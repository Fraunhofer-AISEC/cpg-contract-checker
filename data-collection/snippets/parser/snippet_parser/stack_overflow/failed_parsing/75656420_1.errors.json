{
    "no viable alternative at input 'function_sell(uint256tokenAmount,addressrecipient)internal{\\nrequire(tokenAmount>0&&_balances[msg.sender]>=tokenAmount);\\n\\nuint256oldPrice=_calculatePrice();\\n\\nbooltakeFee=!isFeeExempt[msg.sender];\\n\\n\\nuint256tokensToSwap=takeFee\\n?tokenAmount.mul(sellFee).div(feeDenominator)\\n:tokenAmount.sub(100,\"100 Asset Minimum For Fee Exemption\");\\n\\n\\nuint256amountUnderlyingAsset=(tokensToSwap.mul(oldPrice)).div(\\nprecision\\n);\\n\\nrequire(\\namountUnderlyingAsset>0,\\n\"Zero Assets To Redeem For Given Value\"\\n);\\n\\n\\n_burn(msg.sender,tokenAmount);\\n\\nif(takeFee){\\n\\nuint256taxTaken=tokenAmount.sub(tokensToSwap);\\n\\nuint256allocation=taxTaken.mul(devShare).div(\\ndevShare.add(liquidityShare)\\n);\\n\\n_mint(dev,allocation);\\n}\\n\\n\\nboolsuccessful=IERC20(_underlying).transfer(\\nrecipient,\\namountUnderlyingAsset\\n);\\n\\nrequire(successful,\"Underlying Asset Transfer Failure\");\\n\\n_requirePriceRises(oldPrice);\\n\\nemitTokenSold(tokenAmount,amountUnderlyingAsset,recipient);\\n'": [
        "ERROR: when parsing line 48 column 0: no viable alternative at input 'function_sell(uint256tokenAmount,addressrecipient)internal{\\nrequire(tokenAmount>0&&_balances[msg.sender]>=tokenAmount);\\n\\nuint256oldPrice=_calculatePrice();\\n\\nbooltakeFee=!isFeeExempt[msg.sender];\\n\\n\\nuint256tokensToSwap=takeFee\\n?tokenAmount.mul(sellFee).div(feeDenominator)\\n:tokenAmount.sub(100,\"100 Asset Minimum For Fee Exemption\");\\n\\n\\nuint256amountUnderlyingAsset=(tokensToSwap.mul(oldPrice)).div(\\nprecision\\n);\\n\\nrequire(\\namountUnderlyingAsset>0,\\n\"Zero Assets To Redeem For Given Value\"\\n);\\n\\n\\n_burn(msg.sender,tokenAmount);\\n\\nif(takeFee){\\n\\nuint256taxTaken=tokenAmount.sub(tokensToSwap);\\n\\nuint256allocation=taxTaken.mul(devShare).div(\\ndevShare.add(liquidityShare)\\n);\\n\\n_mint(dev,allocation);\\n}\\n\\n\\nboolsuccessful=IERC20(_underlying).transfer(\\nrecipient,\\namountUnderlyingAsset\\n);\\n\\nrequire(successful,\"Underlying Asset Transfer Failure\");\\n\\n_requirePriceRises(oldPrice);\\n\\nemitTokenSold(tokenAmount,amountUnderlyingAsset,recipient);\\n'\n"
    ]
}