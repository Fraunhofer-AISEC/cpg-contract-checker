{
    "extraneous input 'int' expecting {'(', NL}": [
        "ERROR: when parsing line 1 column 3: extraneous input 'int' expecting {'(', NL}\n"
    ],
    "extraneous input '!=' expecting {'~', 'from', '{', '(', 'error', 'for', 'function', '[', 'address', 'mapping', 'calldata', 'if', 'try', 'while', 'unchecked', 'assembly', 'do', 'return', 'throw', 'emit', 'revert', 'var', 'bool', 'string', 'byte', '++', '--', 'new', '+', '-', 'after', 'delete', '!', 'callback', Int, Uint, Byte, Fixed, Ufixed, BooleanLiteral, DecimalNumber, HexNumber, HexLiteralFragment, 'break', 'continue', 'leave', 'payable', 'type', 'constructor', 'receive', Identifier, StringLiteralFragment, NL}": [
        "ERROR: when parsing line 1 column 32: extraneous input '!=' expecting {'~', 'from', '{', '(', 'error', 'for', 'function', '[', 'address', 'mapping', 'calldata', 'if', 'try', 'while', 'unchecked', 'assembly', 'do', 'return', 'throw', 'emit', 'revert', 'var', 'bool', 'string', 'byte', '++', '--', 'new', '+', '-', 'after', 'delete', '!', 'callback', Int, Uint, Byte, Fixed, Ufixed, BooleanLiteral, DecimalNumber, HexNumber, HexLiteralFragment, 'break', 'continue', 'leave', 'payable', 'type', 'constructor', 'receive', Identifier, StringLiteralFragment, NL}\n"
    ],
    "extraneous input ':' expecting {';', NL}": [
        "ERROR: when parsing line 1 column 36: extraneous input ':' expecting {';', NL}\n"
    ],
    "mismatched input 'contract' expecting {'from', 'error', 'calldata', 'revert', 'callback', 'leave', 'payable', 'constructor', 'receive', Identifier, NL}": [
        "ERROR: when parsing line 3 column 19: mismatched input 'contract' expecting {'from', 'error', 'calldata', 'revert', 'callback', 'leave', 'payable', 'constructor', 'receive', Identifier, NL}\n"
    ],
    "extraneous input '(' expecting {';', NL}": [
        "ERROR: when parsing line 6 column 51: extraneous input '(' expecting {';', NL}\n",
        "ERROR: when parsing line 13 column 22: extraneous input '(' expecting {';', NL}\n",
        "ERROR: when parsing line 22 column 43: extraneous input '(' expecting {';', NL}\n"
    ],
    "no viable alternative at input 'aIn,'": [
        "ERROR: when parsing line 7 column 11: no viable alternative at input 'aIn,'\n"
    ],
    "mismatched input ',' expecting {';', NL}": [
        "ERROR: when parsing line 8 column 9: mismatched input ',' expecting {';', NL}\n",
        "ERROR: when parsing line 12 column 31: mismatched input ',' expecting {';', NL}\n"
    ],
    "mismatched input 'out' expecting {'=', ';', NL}": [
        "ERROR: when parsing line 8 column 25: mismatched input 'out' expecting {'=', ';', NL}\n"
    ],
    "mismatched input 'poolPath' expecting {';', NL}": [
        "ERROR: when parsing line 9 column 8: mismatched input 'poolPath' expecting {';', NL}\n"
    ],
    "mismatched input 'tokenPath' expecting {'=', ';', NL}": [
        "ERROR: when parsing line 10 column 8: mismatched input 'tokenPath' expecting {'=', ';', NL}\n"
    ],
    "mismatched input 'acc' expecting {'=', ';', NL}": [
        "ERROR: when parsing line 11 column 8: mismatched input 'acc' expecting {'=', ';', NL}\n"
    ],
    "mismatched input 'int' expecting {'=', ';', NL}": [
        "ERROR: when parsing line 12 column 8: mismatched input 'int' expecting {'=', ';', NL}\n"
    ],
    "mismatched input ')' expecting {';', NL}": [
        "ERROR: when parsing line 13 column 4: mismatched input ')' expecting {';', NL}\n"
    ],
    "mismatched input ':' expecting {';', NL}": [
        "ERROR: when parsing line 15 column 18: mismatched input ':' expecting {';', NL}\n",
        "ERROR: when parsing line 16 column 19: mismatched input ':' expecting {';', NL}\n",
        "ERROR: when parsing line 17 column 17: mismatched input ':' expecting {';', NL}\n",
        "ERROR: when parsing line 18 column 22: mismatched input ':' expecting {';', NL}\n",
        "ERROR: when parsing line 19 column 19: mismatched input ':' expecting {';', NL}\n"
    ],
    "extraneous input ',' expecting {';', NL}": [
        "ERROR: when parsing line 17 column 44: extraneous input ',' expecting {';', NL}\n",
        "ERROR: when parsing line 18 column 55: extraneous input ',' expecting {';', NL}\n"
    ],
    "extraneous input ')' expecting {<EOF>, '~', 'from', '{', '(', 'error', 'for', 'function', '[', 'address', 'mapping', 'calldata', 'if', 'try', 'while', 'unchecked', 'assembly', 'do', 'return', 'throw', 'emit', 'revert', 'var', 'bool', 'string', 'byte', '++', '--', 'new', '+', '-', 'after', 'delete', '!', 'callback', Int, Uint, Byte, Fixed, Ufixed, BooleanLiteral, DecimalNumber, HexNumber, HexLiteralFragment, 'break', 'continue', 'leave', 'payable', 'type', 'constructor', 'receive', Identifier, StringLiteralFragment}": [
        "ERROR: when parsing line 21 column 4: extraneous input ')' expecting {<EOF>, '~', 'from', '{', '(', 'error', 'for', 'function', '[', 'address', 'mapping', 'calldata', 'if', 'try', 'while', 'unchecked', 'assembly', 'do', 'return', 'throw', 'emit', 'revert', 'var', 'bool', 'string', 'byte', '++', '--', 'new', '+', '-', 'after', 'delete', '!', 'callback', Int, Uint, Byte, Fixed, Ufixed, BooleanLiteral, DecimalNumber, HexNumber, HexLiteralFragment, 'break', 'continue', 'leave', 'payable', 'type', 'constructor', 'receive', Identifier, StringLiteralFragment}\n"
    ],
    "no viable alternative at input 'txn,'": [
        "ERROR: when parsing line 23 column 11: no viable alternative at input 'txn,'\n"
    ],
    "no viable alternative at input 'acc1,'": [
        "ERROR: when parsing line 24 column 24: no viable alternative at input 'acc1,'\n"
    ],
    "extraneous input 'else' expecting {<EOF>, '~', 'from', '{', '(', 'error', 'for', 'function', '[', 'address', 'mapping', 'calldata', 'if', 'try', 'while', 'unchecked', 'assembly', 'do', 'return', 'throw', 'emit', 'revert', 'var', 'bool', 'string', 'byte', '++', '--', 'new', '+', '-', 'after', 'delete', '!', 'callback', Int, Uint, Byte, Fixed, Ufixed, BooleanLiteral, DecimalNumber, HexNumber, HexLiteralFragment, 'break', 'continue', 'leave', 'payable', 'type', 'constructor', 'receive', Identifier, StringLiteralFragment}": [
        "ERROR: when parsing line 28 column 0: extraneous input 'else' expecting {<EOF>, '~', 'from', '{', '(', 'error', 'for', 'function', '[', 'address', 'mapping', 'calldata', 'if', 'try', 'while', 'unchecked', 'assembly', 'do', 'return', 'throw', 'emit', 'revert', 'var', 'bool', 'string', 'byte', '++', '--', 'new', '+', '-', 'after', 'delete', '!', 'callback', Int, Uint, Byte, Fixed, Ufixed, BooleanLiteral, DecimalNumber, HexNumber, HexLiteralFragment, 'break', 'continue', 'leave', 'payable', 'type', 'constructor', 'receive', Identifier, StringLiteralFragment}\n"
    ]
}