{
    "extraneous input 'addLiquidity' expecting {'(', NL}": [
        "ERROR: when parsing line 28 column 14: extraneous input 'addLiquidity' expecting {'(', NL}\n"
    ],
    "extraneous input 'tokenA' expecting {',', ')'}": [
        "ERROR: when parsing line 29 column 16: extraneous input 'tokenA' expecting {',', ')'}\n",
        "ERROR: when parsing line 89 column 16: extraneous input 'tokenA' expecting {',', ')'}\n"
    ],
    "missing ')' at 'tokenB'": [
        "ERROR: when parsing line 30 column 16: missing ')' at 'tokenB'\n",
        "ERROR: when parsing line 90 column 16: missing ')' at 'tokenB'\n"
    ],
    "extraneous input ',' expecting {'=', ';', NL}": [
        "ERROR: when parsing line 30 column 22: extraneous input ',' expecting {'=', ';', NL}\n",
        "ERROR: when parsing line 31 column 27: extraneous input ',' expecting {'=', ';', NL}\n",
        "ERROR: when parsing line 32 column 27: extraneous input ',' expecting {'=', ';', NL}\n",
        "ERROR: when parsing line 33 column 23: extraneous input ',' expecting {'=', ';', NL}\n",
        "ERROR: when parsing line 34 column 23: extraneous input ',' expecting {'=', ';', NL}\n",
        "ERROR: when parsing line 35 column 18: extraneous input ',' expecting {'=', ';', NL}\n",
        "ERROR: when parsing line 90 column 22: extraneous input ',' expecting {'=', ';', NL}\n",
        "ERROR: when parsing line 91 column 22: extraneous input ',' expecting {'=', ';', NL}\n",
        "ERROR: when parsing line 92 column 23: extraneous input ',' expecting {'=', ';', NL}\n",
        "ERROR: when parsing line 93 column 23: extraneous input ',' expecting {'=', ';', NL}\n",
        "ERROR: when parsing line 94 column 18: extraneous input ',' expecting {'=', ';', NL}\n"
    ],
    "mismatched input ')' expecting {'=', ';', NL}": [
        "ERROR: when parsing line 37 column 5: mismatched input ')' expecting {'=', ';', NL}\n",
        "ERROR: when parsing line 43 column 55: mismatched input ')' expecting {'=', ';', NL}\n",
        "ERROR: when parsing line 96 column 5: mismatched input ')' expecting {'=', ';', NL}\n"
    ],
    "extraneous input 'deposit' expecting {'(', NL}": [
        "ERROR: when parsing line 43 column 14: extraneous input 'deposit' expecting {'(', NL}\n"
    ],
    "mismatched input '_pid' expecting {',', ')'}": [
        "ERROR: when parsing line 43 column 30: mismatched input '_pid' expecting {',', ')'}\n"
    ],
    "mismatched input '259' expecting {'=', ';', NL}": [
        "ERROR: when parsing line 43 column 35: mismatched input '259' expecting {'=', ';', NL}\n"
    ],
    "mismatched input ',' expecting {';', NL}": [
        "ERROR: when parsing line 43 column 38: mismatched input ',' expecting {';', NL}\n"
    ],
    "extraneous input 'withdraw' expecting {'(', NL}": [
        "ERROR: when parsing line 66 column 14: extraneous input 'withdraw' expecting {'(', NL}\n"
    ],
    "extraneous input '_pid' expecting {',', ')'}": [
        "ERROR: when parsing line 66 column 31: extraneous input '_pid' expecting {',', ')'}\n"
    ],
    "extraneous input '_amount' expecting ')'": [
        "ERROR: when parsing line 66 column 45: extraneous input '_amount' expecting ')'\n"
    ],
    "mismatched input 'public' expecting {'from', 'error', 'memory', 'storage', 'calldata', 'revert', 'callback', 'leave', 'payable', 'constructor', 'receive', Identifier}": [
        "ERROR: when parsing line 66 column 54: mismatched input 'public' expecting {'from', 'error', 'memory', 'storage', 'calldata', 'revert', 'callback', 'leave', 'payable', 'constructor', 'receive', Identifier}\n"
    ],
    "extraneous input 'removeLiquidity' expecting {'(', NL}": [
        "ERROR: when parsing line 88 column 14: extraneous input 'removeLiquidity' expecting {'(', NL}\n"
    ],
    "extraneous input 'swapTokensForExactETH' expecting {'(', NL}": [
        "ERROR: when parsing line 101 column 14: extraneous input 'swapTokensForExactETH' expecting {'(', NL}\n"
    ],
    "extraneous input 'amountOut' expecting {',', ')'}": [
        "ERROR: when parsing line 101 column 41: extraneous input 'amountOut' expecting {',', ')'}\n"
    ],
    "missing ')' at 'amountInMax'": [
        "ERROR: when parsing line 101 column 57: missing ')' at 'amountInMax'\n"
    ],
    "mismatched input ',' expecting {'=', ';', NL}": [
        "ERROR: when parsing line 101 column 68: mismatched input ',' expecting {'=', ';', NL}\n",
        "ERROR: when parsing line 101 column 93: mismatched input ',' expecting {'=', ';', NL}\n",
        "ERROR: when parsing line 101 column 105: mismatched input ',' expecting {'=', ';', NL}\n"
    ],
    "extraneous input ')' expecting {'=', ';', NL}": [
        "ERROR: when parsing line 101 column 120: extraneous input ')' expecting {'=', ';', NL}\n"
    ],
    "extraneous input 'external' expecting {<EOF>, 'pragma', '~', 'import', 'from', '{', '}', 'abstract', 'contract', 'interface', 'library', '(', 'error', 'using', 'for', 'struct', 'modifier', 'function', 'event', 'enum', '[', 'address', 'mapping', 'calldata', 'if', 'else', 'try', 'while', 'unchecked', 'assembly', 'do', 'return', 'throw', 'emit', 'revert', 'var', 'bool', 'string', 'byte', '++', '--', 'new', '+', '-', 'after', 'delete', '!', 'callback', Int, Uint, Byte, Fixed, Ufixed, BooleanLiteral, DecimalNumber, HexNumber, HexLiteralFragment, 'break', 'continue', 'leave', 'payable', 'type', 'constructor', 'fallback', 'receive', Identifier, StringLiteralFragment}": [
        "ERROR: when parsing line 102 column 8: extraneous input 'external' expecting {<EOF>, 'pragma', '~', 'import', 'from', '{', '}', 'abstract', 'contract', 'interface', 'library', '(', 'error', 'using', 'for', 'struct', 'modifier', 'function', 'event', 'enum', '[', 'address', 'mapping', 'calldata', 'if', 'else', 'try', 'while', 'unchecked', 'assembly', 'do', 'return', 'throw', 'emit', 'revert', 'var', 'bool', 'string', 'byte', '++', '--', 'new', '+', '-', 'after', 'delete', '!', 'callback', Int, Uint, Byte, Fixed, Ufixed, BooleanLiteral, DecimalNumber, HexNumber, HexLiteralFragment, 'break', 'continue', 'leave', 'payable', 'type', 'constructor', 'fallback', 'receive', Identifier, StringLiteralFragment}\n"
    ]
}