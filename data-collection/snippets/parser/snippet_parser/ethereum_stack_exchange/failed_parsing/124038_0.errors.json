{
    "mismatched input 'from' expecting {';', NL}": [
        "ERROR: when parsing line 3 column 0: mismatched input 'from' expecting {';', NL}\n"
    ],
    "mismatched input '.' expecting {'=', ';', NL}": [
        "ERROR: when parsing line 3 column 10: mismatched input '.' expecting {'=', ';', NL}\n"
    ],
    "extraneous input 'interface' expecting {<EOF>, '~', 'from', '{', '(', 'error', 'for', 'function', '[', 'address', 'mapping', 'calldata', 'if', 'try', 'while', 'unchecked', 'assembly', 'do', 'return', 'throw', 'emit', 'revert', 'var', 'bool', 'string', 'byte', '++', '--', 'new', '+', '-', 'after', 'delete', '!', 'callback', Int, Uint, Byte, Fixed, Ufixed, BooleanLiteral, DecimalNumber, HexNumber, HexLiteralFragment, 'break', 'continue', 'leave', 'payable', 'type', 'constructor', 'receive', Identifier, StringLiteralFragment}": [
        "ERROR: when parsing line 5 column 0: extraneous input 'interface' expecting {<EOF>, '~', 'from', '{', '(', 'error', 'for', 'function', '[', 'address', 'mapping', 'calldata', 'if', 'try', 'while', 'unchecked', 'assembly', 'do', 'return', 'throw', 'emit', 'revert', 'var', 'bool', 'string', 'byte', '++', '--', 'new', '+', '-', 'after', 'delete', '!', 'callback', Int, Uint, Byte, Fixed, Ufixed, BooleanLiteral, DecimalNumber, HexNumber, HexLiteralFragment, 'break', 'continue', 'leave', 'payable', 'type', 'constructor', 'receive', Identifier, StringLiteralFragment}\n"
    ],
    "extraneous input '(' expecting {'=', ';', NL}": [
        "ERROR: when parsing line 6 column 32: extraneous input '(' expecting {'=', ';', NL}\n"
    ],
    "no viable alternative at input 'amountIn:'": [
        "ERROR: when parsing line 7 column 16: no viable alternative at input 'amountIn:'\n"
    ],
    "extraneous input ',' expecting {';', NL}": [
        "ERROR: when parsing line 9 column 24: extraneous input ',' expecting {';', NL}\n",
        "ERROR: when parsing line 25 column 96: extraneous input ',' expecting {';', NL}\n",
        "ERROR: when parsing line 26 column 38: extraneous input ',' expecting {';', NL}\n",
        "ERROR: when parsing line 27 column 31: extraneous input ',' expecting {';', NL}\n",
        "ERROR: when parsing line 28 column 33: extraneous input ',' expecting {';', NL}\n",
        "ERROR: when parsing line 29 column 34: extraneous input ',' expecting {';', NL}\n",
        "ERROR: when parsing line 30 column 45: extraneous input ',' expecting {';', NL}\n",
        "ERROR: when parsing line 31 column 31: extraneous input ',' expecting {';', NL}\n",
        "ERROR: when parsing line 32 column 37: extraneous input ',' expecting {';', NL}\n",
        "ERROR: when parsing line 33 column 34: extraneous input ',' expecting {';', NL}\n",
        "ERROR: when parsing line 34 column 38: extraneous input ',' expecting {';', NL}\n",
        "ERROR: when parsing line 36 column 23: extraneous input ',' expecting {';', NL}\n"
    ],
    "no viable alternative at input 'to:'": [
        "ERROR: when parsing line 10 column 10: no viable alternative at input 'to:'\n"
    ],
    "mismatched input ')' expecting {';', NL}": [
        "ERROR: when parsing line 12 column 4: mismatched input ')' expecting {';', NL}\n"
    ],
    "mismatched input ':' expecting {';', NL}": [
        "ERROR: when parsing line 12 column 19: mismatched input ':' expecting {';', NL}\n"
    ],
    "mismatched input 'PANCAKESWAP' expecting {';', NL}": [
        "ERROR: when parsing line 14 column 0: mismatched input 'PANCAKESWAP' expecting {';', NL}\n"
    ],
    "mismatched input 'WBNB' expecting {';', NL}": [
        "ERROR: when parsing line 15 column 0: mismatched input 'WBNB' expecting {';', NL}\n"
    ],
    "extraneous input 'external' expecting {';', NL}": [
        "ERROR: when parsing line 17 column 1: extraneous input 'external' expecting {';', NL}\n"
    ],
    "mismatched input '(' expecting {'=', ';', NL}": [
        "ERROR: when parsing line 18 column 8: mismatched input '(' expecting {'=', ';', NL}\n"
    ],
    "no viable alternative at input 'res:'": [
        "ERROR: when parsing line 22 column 7: no viable alternative at input 'res:'\n"
    ],
    "extraneous input '(' expecting {';', NL}": [
        "ERROR: when parsing line 22 column 30: extraneous input '(' expecting {';', NL}\n",
        "ERROR: when parsing line 24 column 14: extraneous input '(' expecting {';', NL}\n"
    ],
    "no viable alternative at input 'PANCAKESWAP,'": [
        "ERROR: when parsing line 23 column 19: no viable alternative at input 'PANCAKESWAP,'\n"
    ],
    "extraneous input ')' expecting {<EOF>, '~', 'from', '{', '(', 'error', 'for', 'function', '[', 'address', 'mapping', 'calldata', 'if', 'try', 'while', 'unchecked', 'assembly', 'do', 'return', 'throw', 'emit', 'revert', 'var', 'bool', 'string', 'byte', '++', '--', 'new', '+', '-', 'after', 'delete', '!', 'callback', Int, Uint, Byte, Fixed, Ufixed, BooleanLiteral, DecimalNumber, HexNumber, HexLiteralFragment, 'break', 'continue', 'leave', 'payable', 'type', 'constructor', 'receive', Identifier, StringLiteralFragment}": [
        "ERROR: when parsing line 35 column 8: extraneous input ')' expecting {<EOF>, '~', 'from', '{', '(', 'error', 'for', 'function', '[', 'address', 'mapping', 'calldata', 'if', 'try', 'while', 'unchecked', 'assembly', 'do', 'return', 'throw', 'emit', 'revert', 'var', 'bool', 'string', 'byte', '++', '--', 'new', '+', '-', 'after', 'delete', '!', 'callback', Int, Uint, Byte, Fixed, Ufixed, BooleanLiteral, DecimalNumber, HexNumber, HexLiteralFragment, 'break', 'continue', 'leave', 'payable', 'type', 'constructor', 'receive', Identifier, StringLiteralFragment}\n",
        "ERROR: when parsing line 37 column 4: extraneous input ')' expecting {<EOF>, '~', 'from', '{', '(', 'error', 'for', 'function', '[', 'address', 'mapping', 'calldata', 'if', 'try', 'while', 'unchecked', 'assembly', 'do', 'return', 'throw', 'emit', 'revert', 'var', 'bool', 'string', 'byte', '++', '--', 'new', '+', '-', 'after', 'delete', '!', 'callback', Int, Uint, Byte, Fixed, Ufixed, BooleanLiteral, DecimalNumber, HexNumber, HexLiteralFragment, 'break', 'continue', 'leave', 'payable', 'type', 'constructor', 'receive', Identifier, StringLiteralFragment}\n"
    ]
}