{
    "extraneous input 'null' expecting {<EOF>, 'pragma', '~', 'import', 'from', 'abstract', 'contract', 'interface', 'library', '(', 'error', 'struct', 'function', 'enum', '[', 'address', 'mapping', 'calldata', 'revert', 'var', 'bool', 'string', 'byte', '++', '--', 'new', '+', '-', 'after', 'delete', '!', 'callback', Int, Uint, Byte, Fixed, Ufixed, BooleanLiteral, DecimalNumber, HexNumber, HexLiteralFragment, 'leave', 'payable', 'type', 'constructor', 'fallback', 'receive', Identifier, StringLiteralFragment}": [
        "ERROR: when parsing line 23 column 0: extraneous input 'null' expecting {<EOF>, 'pragma', '~', 'import', 'from', 'abstract', 'contract', 'interface', 'library', '(', 'error', 'struct', 'function', 'enum', '[', 'address', 'mapping', 'calldata', 'revert', 'var', 'bool', 'string', 'byte', '++', '--', 'new', '+', '-', 'after', 'delete', '!', 'callback', Int, Uint, Byte, Fixed, Ufixed, BooleanLiteral, DecimalNumber, HexNumber, HexLiteralFragment, 'leave', 'payable', 'type', 'constructor', 'fallback', 'receive', Identifier, StringLiteralFragment}\n"
    ],
    "mismatched input '{' expecting {'~', 'from', '(', 'error', '[', ']', 'address', 'calldata', 'revert', 'var', 'bool', 'string', 'byte', '++', '--', 'new', '+', '-', 'after', 'delete', '!', 'callback', Int, Uint, Byte, Fixed, Ufixed, BooleanLiteral, DecimalNumber, HexNumber, HexLiteralFragment, 'leave', 'payable', 'type', 'constructor', 'receive', Identifier, StringLiteralFragment}": [
        "ERROR: when parsing line 24 column 2: mismatched input '{' expecting {'~', 'from', '(', 'error', '[', ']', 'address', 'calldata', 'revert', 'var', 'bool', 'string', 'byte', '++', '--', 'new', '+', '-', 'after', 'delete', '!', 'callback', Int, Uint, Byte, Fixed, Ufixed, BooleanLiteral, DecimalNumber, HexNumber, HexLiteralFragment, 'leave', 'payable', 'type', 'constructor', 'receive', Identifier, StringLiteralFragment}\n"
    ],
    "mismatched input ':' expecting {';', NL}": [
        "ERROR: when parsing line 25 column 14: mismatched input ':' expecting {';', NL}\n",
        "ERROR: when parsing line 26 column 22: mismatched input ':' expecting {';', NL}\n",
        "ERROR: when parsing line 27 column 21: mismatched input ':' expecting {';', NL}\n",
        "ERROR: when parsing line 28 column 15: mismatched input ':' expecting {';', NL}\n",
        "ERROR: when parsing line 29 column 17: mismatched input ':' expecting {';', NL}\n",
        "ERROR: when parsing line 30 column 13: mismatched input ':' expecting {';', NL}\n",
        "ERROR: when parsing line 31 column 10: mismatched input ':' expecting {';', NL}\n",
        "ERROR: when parsing line 32 column 12: mismatched input ':' expecting {';', NL}\n",
        "ERROR: when parsing line 35 column 10: mismatched input ':' expecting {';', NL}\n",
        "ERROR: when parsing line 38 column 14: mismatched input ':' expecting {';', NL}\n",
        "ERROR: when parsing line 39 column 22: mismatched input ':' expecting {';', NL}\n",
        "ERROR: when parsing line 40 column 21: mismatched input ':' expecting {';', NL}\n",
        "ERROR: when parsing line 41 column 15: mismatched input ':' expecting {';', NL}\n",
        "ERROR: when parsing line 42 column 17: mismatched input ':' expecting {';', NL}\n",
        "ERROR: when parsing line 43 column 13: mismatched input ':' expecting {';', NL}\n",
        "ERROR: when parsing line 44 column 10: mismatched input ':' expecting {';', NL}\n",
        "ERROR: when parsing line 45 column 12: mismatched input ':' expecting {';', NL}\n",
        "ERROR: when parsing line 48 column 10: mismatched input ':' expecting {';', NL}\n"
    ],
    "extraneous input ',' expecting {';', NL}": [
        "ERROR: when parsing line 25 column 17: extraneous input ',' expecting {';', NL}\n",
        "ERROR: when parsing line 26 column 25: extraneous input ',' expecting {';', NL}\n",
        "ERROR: when parsing line 27 column 91: extraneous input ',' expecting {';', NL}\n",
        "ERROR: when parsing line 28 column 85: extraneous input ',' expecting {';', NL}\n",
        "ERROR: when parsing line 29 column 20: extraneous input ',' expecting {';', NL}\n",
        "ERROR: when parsing line 30 column 59: extraneous input ',' expecting {';', NL}\n",
        "ERROR: when parsing line 31 column 80: extraneous input ',' expecting {';', NL}\n",
        "ERROR: when parsing line 34 column 5: extraneous input ',' expecting {';', NL}\n",
        "ERROR: when parsing line 38 column 17: extraneous input ',' expecting {';', NL}\n",
        "ERROR: when parsing line 39 column 25: extraneous input ',' expecting {';', NL}\n",
        "ERROR: when parsing line 40 column 91: extraneous input ',' expecting {';', NL}\n",
        "ERROR: when parsing line 41 column 85: extraneous input ',' expecting {';', NL}\n",
        "ERROR: when parsing line 42 column 20: extraneous input ',' expecting {';', NL}\n",
        "ERROR: when parsing line 43 column 59: extraneous input ',' expecting {';', NL}\n",
        "ERROR: when parsing line 44 column 208: extraneous input ',' expecting {';', NL}\n",
        "ERROR: when parsing line 47 column 5: extraneous input ',' expecting {';', NL}\n"
    ],
    "mismatched input '}' expecting {';', NL}": [
        "ERROR: when parsing line 36 column 2: mismatched input '}' expecting {';', NL}\n"
    ],
    "extraneous input '}' expecting {';', NL}": [
        "ERROR: when parsing line 49 column 2: extraneous input '}' expecting {';', NL}\n"
    ],
    "extraneous input ']' expecting {<EOF>, 'pragma', '~', 'import', 'from', 'abstract', 'contract', 'interface', 'library', '(', 'error', 'struct', 'function', 'enum', '[', 'address', 'mapping', 'calldata', 'revert', 'var', 'bool', 'string', 'byte', '++', '--', 'new', '+', '-', 'after', 'delete', '!', 'callback', Int, Uint, Byte, Fixed, Ufixed, BooleanLiteral, DecimalNumber, HexNumber, HexLiteralFragment, 'leave', 'payable', 'type', 'constructor', 'fallback', 'receive', Identifier, StringLiteralFragment}": [
        "ERROR: when parsing line 50 column 0: extraneous input ']' expecting {<EOF>, 'pragma', '~', 'import', 'from', 'abstract', 'contract', 'interface', 'library', '(', 'error', 'struct', 'function', 'enum', '[', 'address', 'mapping', 'calldata', 'revert', 'var', 'bool', 'string', 'byte', '++', '--', 'new', '+', '-', 'after', 'delete', '!', 'callback', Int, Uint, Byte, Fixed, Ufixed, BooleanLiteral, DecimalNumber, HexNumber, HexLiteralFragment, 'leave', 'payable', 'type', 'constructor', 'fallback', 'receive', Identifier, StringLiteralFragment}\n"
    ]
}