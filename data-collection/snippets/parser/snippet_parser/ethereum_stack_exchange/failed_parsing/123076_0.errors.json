{
    "extraneous input 'bool' expecting {'(', NL}": [
        "ERROR: when parsing line 1 column 3: extraneous input 'bool' expecting {'(', NL}\n",
        "ERROR: when parsing line 2 column 9: extraneous input 'bool' expecting {'(', NL}\n",
        "ERROR: when parsing line 7 column 13: extraneous input 'bool' expecting {'(', NL}\n",
        "ERROR: when parsing line 19 column 9: extraneous input 'bool' expecting {'(', NL}\n",
        "ERROR: when parsing line 24 column 13: extraneous input 'bool' expecting {'(', NL}\n"
    ],
    "extraneous input ':' expecting {'~', 'from', '{', '(', 'error', 'for', 'function', '[', 'address', 'mapping', 'calldata', 'if', 'try', 'while', 'unchecked', 'assembly', 'do', 'return', 'throw', 'emit', 'revert', 'var', 'bool', 'string', 'byte', '++', '--', 'new', '+', '-', 'after', 'delete', '!', 'callback', Int, Uint, Byte, Fixed, Ufixed, BooleanLiteral, DecimalNumber, HexNumber, HexLiteralFragment, 'break', 'continue', 'leave', 'payable', 'type', 'constructor', 'receive', Identifier, StringLiteralFragment, NL}": [
        "ERROR: when parsing line 1 column 22: extraneous input ':' expecting {'~', 'from', '{', '(', 'error', 'for', 'function', '[', 'address', 'mapping', 'calldata', 'if', 'try', 'while', 'unchecked', 'assembly', 'do', 'return', 'throw', 'emit', 'revert', 'var', 'bool', 'string', 'byte', '++', '--', 'new', '+', '-', 'after', 'delete', '!', 'callback', Int, Uint, Byte, Fixed, Ufixed, BooleanLiteral, DecimalNumber, HexNumber, HexLiteralFragment, 'break', 'continue', 'leave', 'payable', 'type', 'constructor', 'receive', Identifier, StringLiteralFragment, NL}\n"
    ],
    "extraneous input '==' expecting {'~', 'from', '{', '(', 'error', 'for', 'function', '[', 'address', 'mapping', 'calldata', 'if', 'try', 'while', 'unchecked', 'assembly', 'do', 'return', 'throw', 'emit', 'revert', 'var', 'bool', 'string', 'byte', '++', '--', 'new', '+', '-', 'after', 'delete', '!', 'callback', Int, Uint, Byte, Fixed, Ufixed, BooleanLiteral, DecimalNumber, HexNumber, HexLiteralFragment, 'break', 'continue', 'leave', 'payable', 'type', 'constructor', 'receive', Identifier, StringLiteralFragment, NL}": [
        "ERROR: when parsing line 2 column 29: extraneous input '==' expecting {'~', 'from', '{', '(', 'error', 'for', 'function', '[', 'address', 'mapping', 'calldata', 'if', 'try', 'while', 'unchecked', 'assembly', 'do', 'return', 'throw', 'emit', 'revert', 'var', 'bool', 'string', 'byte', '++', '--', 'new', '+', '-', 'after', 'delete', '!', 'callback', Int, Uint, Byte, Fixed, Ufixed, BooleanLiteral, DecimalNumber, HexNumber, HexLiteralFragment, 'break', 'continue', 'leave', 'payable', 'type', 'constructor', 'receive', Identifier, StringLiteralFragment, NL}\n",
        "ERROR: when parsing line 19 column 29: extraneous input '==' expecting {'~', 'from', '{', '(', 'error', 'for', 'function', '[', 'address', 'mapping', 'calldata', 'if', 'try', 'while', 'unchecked', 'assembly', 'do', 'return', 'throw', 'emit', 'revert', 'var', 'bool', 'string', 'byte', '++', '--', 'new', '+', '-', 'after', 'delete', '!', 'callback', Int, Uint, Byte, Fixed, Ufixed, BooleanLiteral, DecimalNumber, HexNumber, HexLiteralFragment, 'break', 'continue', 'leave', 'payable', 'type', 'constructor', 'receive', Identifier, StringLiteralFragment, NL}\n"
    ],
    "extraneous input ':' expecting {';', NL}": [
        "ERROR: when parsing line 2 column 65: extraneous input ':' expecting {';', NL}\n",
        "ERROR: when parsing line 4 column 32: extraneous input ':' expecting {';', NL}\n",
        "ERROR: when parsing line 7 column 37: extraneous input ':' expecting {';', NL}\n",
        "ERROR: when parsing line 12 column 54: extraneous input ':' expecting {';', NL}\n",
        "ERROR: when parsing line 19 column 58: extraneous input ':' expecting {';', NL}\n",
        "ERROR: when parsing line 21 column 32: extraneous input ':' expecting {';', NL}\n",
        "ERROR: when parsing line 24 column 37: extraneous input ':' expecting {';', NL}\n"
    ],
    "no viable alternative at input 'revertwith0'": [
        "ERROR: when parsing line 3 column 22: no viable alternative at input 'revertwith0'\n",
        "ERROR: when parsing line 20 column 22: no viable alternative at input 'revertwith0'\n"
    ],
    "mismatched input ',' expecting {';', NL}": [
        "ERROR: when parsing line 3 column 23: mismatched input ',' expecting {';', NL}\n",
        "ERROR: when parsing line 20 column 23: mismatched input ',' expecting {';', NL}\n"
    ],
    "mismatched input 'if' expecting {';', NL}": [
        "ERROR: when parsing line 4 column 6: mismatched input 'if' expecting {';', NL}\n",
        "ERROR: when parsing line 21 column 6: mismatched input 'if' expecting {';', NL}\n"
    ],
    "mismatched input 'not' expecting {'(', NL}": [
        "ERROR: when parsing line 4 column 9: mismatched input 'not' expecting {'(', NL}\n",
        "ERROR: when parsing line 21 column 9: mismatched input 'not' expecting {'(', NL}\n"
    ],
    "no viable alternative at input 'log0x5514cc73'": [
        "ERROR: when parsing line 5 column 14: no viable alternative at input 'log0x5514cc73'\n",
        "ERROR: when parsing line 8 column 18: no viable alternative at input 'log0x5514cc73'\n",
        "ERROR: when parsing line 17 column 18: no viable alternative at input 'log0x5514cc73'\n",
        "ERROR: when parsing line 22 column 14: no viable alternative at input 'log0x5514cc73'\n",
        "ERROR: when parsing line 25 column 18: no viable alternative at input 'log0x5514cc73'\n",
        "ERROR: when parsing line 34 column 18: no viable alternative at input 'log0x5514cc73'\n"
    ],
    "mismatched input ':' expecting {';', NL}": [
        "ERROR: when parsing line 5 column 24: mismatched input ':' expecting {';', NL}\n",
        "ERROR: when parsing line 8 column 28: mismatched input ':' expecting {';', NL}\n",
        "ERROR: when parsing line 17 column 28: mismatched input ':' expecting {';', NL}\n",
        "ERROR: when parsing line 22 column 24: mismatched input ':' expecting {';', NL}\n",
        "ERROR: when parsing line 25 column 28: mismatched input ':' expecting {';', NL}\n",
        "ERROR: when parsing line 34 column 28: mismatched input ':' expecting {';', NL}\n"
    ],
    "extraneous input 'else' expecting {<EOF>, '~', 'from', '{', '(', 'error', 'for', 'function', '[', 'address', 'mapping', 'calldata', 'if', 'try', 'while', 'unchecked', 'assembly', 'do', 'return', 'throw', 'emit', 'revert', 'var', 'bool', 'string', 'byte', '++', '--', 'new', '+', '-', 'after', 'delete', '!', 'callback', Int, Uint, Byte, Fixed, Ufixed, BooleanLiteral, DecimalNumber, HexNumber, HexLiteralFragment, 'break', 'continue', 'leave', 'payable', 'type', 'constructor', 'receive', Identifier, StringLiteralFragment}": [
        "ERROR: when parsing line 6 column 6: extraneous input 'else' expecting {<EOF>, '~', 'from', '{', '(', 'error', 'for', 'function', '[', 'address', 'mapping', 'calldata', 'if', 'try', 'while', 'unchecked', 'assembly', 'do', 'return', 'throw', 'emit', 'revert', 'var', 'bool', 'string', 'byte', '++', '--', 'new', '+', '-', 'after', 'delete', '!', 'callback', Int, Uint, Byte, Fixed, Ufixed, BooleanLiteral, DecimalNumber, HexNumber, HexLiteralFragment, 'break', 'continue', 'leave', 'payable', 'type', 'constructor', 'receive', Identifier, StringLiteralFragment}\n",
        "ERROR: when parsing line 9 column 10: extraneous input 'else' expecting {<EOF>, '~', 'from', '{', '(', 'error', 'for', 'function', '[', 'address', 'mapping', 'calldata', 'if', 'try', 'while', 'unchecked', 'assembly', 'do', 'return', 'throw', 'emit', 'revert', 'var', 'bool', 'string', 'byte', '++', '--', 'new', '+', '-', 'after', 'delete', '!', 'callback', Int, Uint, Byte, Fixed, Ufixed, BooleanLiteral, DecimalNumber, HexNumber, HexLiteralFragment, 'break', 'continue', 'leave', 'payable', 'type', 'constructor', 'receive', Identifier, StringLiteralFragment}\n",
        "ERROR: when parsing line 23 column 6: extraneous input 'else' expecting {<EOF>, '~', 'from', '{', '(', 'error', 'for', 'function', '[', 'address', 'mapping', 'calldata', 'if', 'try', 'while', 'unchecked', 'assembly', 'do', 'return', 'throw', 'emit', 'revert', 'var', 'bool', 'string', 'byte', '++', '--', 'new', '+', '-', 'after', 'delete', '!', 'callback', Int, Uint, Byte, Fixed, Ufixed, BooleanLiteral, DecimalNumber, HexNumber, HexLiteralFragment, 'break', 'continue', 'leave', 'payable', 'type', 'constructor', 'receive', Identifier, StringLiteralFragment}\n",
        "ERROR: when parsing line 26 column 10: extraneous input 'else' expecting {<EOF>, '~', 'from', '{', '(', 'error', 'for', 'function', '[', 'address', 'mapping', 'calldata', 'if', 'try', 'while', 'unchecked', 'assembly', 'do', 'return', 'throw', 'emit', 'revert', 'var', 'bool', 'string', 'byte', '++', '--', 'new', '+', '-', 'after', 'delete', '!', 'callback', Int, Uint, Byte, Fixed, Ufixed, BooleanLiteral, DecimalNumber, HexNumber, HexLiteralFragment, 'break', 'continue', 'leave', 'payable', 'type', 'constructor', 'receive', Identifier, StringLiteralFragment}\n"
    ],
    "extraneous input '!=' expecting {'~', 'from', '{', '(', 'error', 'for', 'function', '[', 'address', 'mapping', 'calldata', 'if', 'try', 'while', 'unchecked', 'assembly', 'do', 'return', 'throw', 'emit', 'revert', 'var', 'bool', 'string', 'byte', '++', '--', 'new', '+', '-', 'after', 'delete', '!', 'callback', Int, Uint, Byte, Fixed, Ufixed, BooleanLiteral, DecimalNumber, HexNumber, HexLiteralFragment, 'break', 'continue', 'leave', 'payable', 'type', 'constructor', 'receive', Identifier, StringLiteralFragment, NL}": [
        "ERROR: when parsing line 7 column 33: extraneous input '!=' expecting {'~', 'from', '{', '(', 'error', 'for', 'function', '[', 'address', 'mapping', 'calldata', 'if', 'try', 'while', 'unchecked', 'assembly', 'do', 'return', 'throw', 'emit', 'revert', 'var', 'bool', 'string', 'byte', '++', '--', 'new', '+', '-', 'after', 'delete', '!', 'callback', Int, Uint, Byte, Fixed, Ufixed, BooleanLiteral, DecimalNumber, HexNumber, HexLiteralFragment, 'break', 'continue', 'leave', 'payable', 'type', 'constructor', 'receive', Identifier, StringLiteralFragment, NL}\n",
        "ERROR: when parsing line 24 column 33: extraneous input '!=' expecting {'~', 'from', '{', '(', 'error', 'for', 'function', '[', 'address', 'mapping', 'calldata', 'if', 'try', 'while', 'unchecked', 'assembly', 'do', 'return', 'throw', 'emit', 'revert', 'var', 'bool', 'string', 'byte', '++', '--', 'new', '+', '-', 'after', 'delete', '!', 'callback', Int, Uint, Byte, Fixed, Ufixed, BooleanLiteral, DecimalNumber, HexNumber, HexLiteralFragment, 'break', 'continue', 'leave', 'payable', 'type', 'constructor', 'receive', Identifier, StringLiteralFragment, NL}\n"
    ],
    "mismatched input 'len' expecting {',', ']'}": [
        "ERROR: when parsing line 8 column 71: mismatched input 'len' expecting {',', ']'}\n",
        "ERROR: when parsing line 25 column 71: mismatched input 'len' expecting {',', ']'}\n"
    ],
    "extraneous input ']' expecting {';', NL}": [
        "ERROR: when parsing line 8 column 112: extraneous input ']' expecting {';', NL}\n",
        "ERROR: when parsing line 25 column 112: extraneous input ']' expecting {';', NL}\n"
    ],
    "mismatched input 'idx' expecting {'(', NL}": [
        "ERROR: when parsing line 12 column 20: mismatched input 'idx' expecting {'(', NL}\n",
        "ERROR: when parsing line 29 column 20: mismatched input 'idx' expecting {'(', NL}\n"
    ],
    "extraneous input 'continue' expecting {';', NL}": [
        "ERROR: when parsing line 16 column 18: extraneous input 'continue' expecting {';', NL}\n",
        "ERROR: when parsing line 33 column 18: extraneous input 'continue' expecting {';', NL}\n"
    ],
    "mismatched input '(' expecting {';', NL}": [
        "ERROR: when parsing line 17 column 35: mismatched input '(' expecting {';', NL}\n",
        "ERROR: when parsing line 34 column 35: mismatched input '(' expecting {';', NL}\n"
    ],
    "no viable alternative at input '[ceil32(ceil32(_baseURI.length))+161len'": [
        "ERROR: when parsing line 17 column 121: no viable alternative at input '[ceil32(ceil32(_baseURI.length))+161len'\n",
        "ERROR: when parsing line 34 column 108: no viable alternative at input '[ceil32(ceil32(_baseURI.length))+161len'\n"
    ],
    "mismatched input 'len' expecting {';', NL}": [
        "ERROR: when parsing line 17 column 121: mismatched input 'len' expecting {';', NL}\n",
        "ERROR: when parsing line 34 column 108: mismatched input 'len' expecting {';', NL}\n"
    ],
    "mismatched input '(' expecting {'=', ';', NL}": [
        "ERROR: when parsing line 17 column 131: mismatched input '(' expecting {'=', ';', NL}\n",
        "ERROR: when parsing line 34 column 118: mismatched input '(' expecting {'=', ';', NL}\n"
    ],
    "mismatched input ')' expecting {';', NL}": [
        "ERROR: when parsing line 17 column 160: mismatched input ')' expecting {';', NL}\n"
    ],
    "no viable alternative at input 'stor11.length.field_1:'": [
        "ERROR: when parsing line 29 column 47: no viable alternative at input 'stor11.length.field_1:'\n"
    ]
}