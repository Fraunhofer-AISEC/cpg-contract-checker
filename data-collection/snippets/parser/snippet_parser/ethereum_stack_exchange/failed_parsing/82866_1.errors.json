{
    "extraneous input '^' expecting {<EOF>, 'pragma', 'import', 'from', '}', 'abstract', 'contract', 'interface', 'library', 'error', 'using', 'struct', 'modifier', 'function', 'event', 'enum', 'address', 'mapping', 'calldata', 'revert', 'var', 'bool', 'string', 'byte', 'callback', Int, Uint, Byte, Fixed, Ufixed, 'leave', 'payable', 'constructor', 'fallback', 'receive', Identifier, NL}": [
        "ERROR: when parsing line 2 column 0: extraneous input '^' expecting {<EOF>, 'pragma', 'import', 'from', '}', 'abstract', 'contract', 'interface', 'library', 'error', 'using', 'struct', 'modifier', 'function', 'event', 'enum', 'address', 'mapping', 'calldata', 'revert', 'var', 'bool', 'string', 'byte', 'callback', Int, Uint, Byte, Fixed, Ufixed, 'leave', 'payable', 'constructor', 'fallback', 'receive', Identifier, NL}\n"
    ],
    "mismatched input 'part' expecting {'=', ';', NL}": [
        "ERROR: when parsing line 2 column 19: mismatched input 'part' expecting {'=', ';', NL}\n"
    ],
    "mismatched input 'here' expecting {'=', ';', NL}": [
        "ERROR: when parsing line 2 column 31: mismatched input 'here' expecting {'=', ';', NL}\n",
        "ERROR: when parsing line 5 column 31: mismatched input 'here' expecting {'=', ';', NL}\n",
        "ERROR: when parsing line 8 column 31: mismatched input 'here' expecting {'=', ';', NL}\n"
    ],
    "mismatched input 'spans' expecting {'=', ';', NL}": [
        "ERROR: when parsing line 2 column 40: mismatched input 'spans' expecting {'=', ';', NL}\n",
        "ERROR: when parsing line 5 column 40: mismatched input 'spans' expecting {'=', ';', NL}\n",
        "ERROR: when parsing line 8 column 40: mismatched input 'spans' expecting {'=', ';', NL}\n"
    ],
    "mismatched input 'multiple' expecting {'=', ';', NL}": [
        "ERROR: when parsing line 2 column 53: mismatched input 'multiple' expecting {'=', ';', NL}\n",
        "ERROR: when parsing line 5 column 53: mismatched input 'multiple' expecting {'=', ';', NL}\n",
        "ERROR: when parsing line 8 column 53: mismatched input 'multiple' expecting {'=', ';', NL}\n"
    ],
    "mismatched input ')' expecting {'=', ';', NL}": [
        "ERROR: when parsing line 2 column 67: mismatched input ')' expecting {'=', ';', NL}\n",
        "ERROR: when parsing line 5 column 67: mismatched input ')' expecting {'=', ';', NL}\n",
        "ERROR: when parsing line 8 column 67: mismatched input ')' expecting {'=', ';', NL}\n"
    ],
    "extraneous input '/' expecting {'from', 'error', 'calldata', 'revert', 'callback', 'override', 'constant', 'immutable', 'leave', 'internal', 'payable', 'private', 'public', 'constructor', 'receive', Identifier}": [
        "ERROR: when parsing line 3 column 7: extraneous input '/' expecting {'from', 'error', 'calldata', 'revert', 'callback', 'override', 'constant', 'immutable', 'leave', 'internal', 'payable', 'private', 'public', 'constructor', 'receive', Identifier}\n"
    ],
    "mismatched input '.' expecting {'=', ';', NL}": [
        "ERROR: when parsing line 3 column 28: mismatched input '.' expecting {'=', ';', NL}\n"
    ],
    "mismatched input ':' expecting {'from', 'error', 'calldata', 'revert', 'callback', 'override', 'constant', 'immutable', 'leave', 'internal', 'payable', 'private', 'public', 'constructor', 'receive', Identifier}": [
        "ERROR: when parsing line 3 column 32: mismatched input ':' expecting {'from', 'error', 'calldata', 'revert', 'callback', 'override', 'constant', 'immutable', 'leave', 'internal', 'payable', 'private', 'public', 'constructor', 'receive', Identifier}\n"
    ],
    "mismatched input 'in' expecting {'from', 'error', 'calldata', 'revert', 'callback', 'override', 'constant', 'immutable', 'leave', 'internal', 'payable', 'private', 'public', 'constructor', 'receive', Identifier}": [
        "ERROR: when parsing line 3 column 49: mismatched input 'in' expecting {'from', 'error', 'calldata', 'revert', 'callback', 'override', 'constant', 'immutable', 'leave', 'internal', 'payable', 'private', 'public', 'constructor', 'receive', Identifier}\n"
    ],
    "extraneous input '^' expecting {<EOF>, 'pragma', '~', 'import', 'from', '{', '}', 'abstract', 'contract', 'interface', 'library', '(', 'error', 'using', 'for', 'struct', 'modifier', 'function', 'event', 'enum', '[', 'address', 'mapping', 'calldata', 'if', 'else', 'try', 'while', 'unchecked', 'assembly', 'do', 'return', 'throw', 'emit', 'revert', 'var', 'bool', 'string', 'byte', '++', '--', 'new', '+', '-', 'after', 'delete', '!', 'callback', Int, Uint, Byte, Fixed, Ufixed, BooleanLiteral, DecimalNumber, HexNumber, HexLiteralFragment, 'break', 'continue', 'leave', 'payable', 'type', 'constructor', 'fallback', 'receive', Identifier, StringLiteralFragment, NL}": [
        "ERROR: when parsing line 5 column 0: extraneous input '^' expecting {<EOF>, 'pragma', '~', 'import', 'from', '{', '}', 'abstract', 'contract', 'interface', 'library', '(', 'error', 'using', 'for', 'struct', 'modifier', 'function', 'event', 'enum', '[', 'address', 'mapping', 'calldata', 'if', 'else', 'try', 'while', 'unchecked', 'assembly', 'do', 'return', 'throw', 'emit', 'revert', 'var', 'bool', 'string', 'byte', '++', '--', 'new', '+', '-', 'after', 'delete', '!', 'callback', Int, Uint, Byte, Fixed, Ufixed, BooleanLiteral, DecimalNumber, HexNumber, HexLiteralFragment, 'break', 'continue', 'leave', 'payable', 'type', 'constructor', 'fallback', 'receive', Identifier, StringLiteralFragment, NL}\n"
    ],
    "mismatched input 'part' expecting ')'": [
        "ERROR: when parsing line 5 column 19: mismatched input 'part' expecting ')'\n",
        "ERROR: when parsing line 8 column 19: mismatched input 'part' expecting ')'\n"
    ],
    "no viable alternative at input 'multiple_inheritance.sol:'": [
        "ERROR: when parsing line 6 column 32: no viable alternative at input 'multiple_inheritance.sol:'\n"
    ],
    "mismatched input ':' expecting {';', NL}": [
        "ERROR: when parsing line 6 column 35: mismatched input ':' expecting {';', NL}\n",
        "ERROR: when parsing line 6 column 37: mismatched input ':' expecting {';', NL}\n"
    ],
    "extraneous input ':' expecting {';', NL}": [
        "ERROR: when parsing line 6 column 56: extraneous input ':' expecting {';', NL}\n"
    ],
    "extraneous input 'foo' expecting {'(', NL}": [
        "ERROR: when parsing line 7 column 9: extraneous input 'foo' expecting {'(', NL}\n"
    ],
    "mismatched input 'public' expecting {'from', 'error', 'memory', 'storage', 'calldata', 'revert', 'callback', 'leave', 'payable', 'constructor', 'receive', Identifier}": [
        "ERROR: when parsing line 7 column 15: mismatched input 'public' expecting {'from', 'error', 'memory', 'storage', 'calldata', 'revert', 'callback', 'leave', 'payable', 'constructor', 'receive', Identifier}\n"
    ],
    "extraneous input '{' expecting {';', NL}": [
        "ERROR: when parsing line 7 column 42: extraneous input '{' expecting {';', NL}\n"
    ],
    "extraneous input '^' expecting {<EOF>, 'pragma', '~', 'import', 'from', '{', '}', 'abstract', 'contract', 'interface', 'library', '(', 'error', 'using', 'for', 'struct', 'modifier', 'function', 'event', 'enum', '[', 'address', 'mapping', 'calldata', 'if', 'else', 'try', 'while', 'unchecked', 'assembly', 'do', 'return', 'throw', 'emit', 'revert', 'var', 'bool', 'string', 'byte', '++', '--', 'new', '+', '-', 'after', 'delete', '!', 'callback', Int, Uint, Byte, Fixed, Ufixed, BooleanLiteral, DecimalNumber, HexNumber, HexLiteralFragment, 'break', 'continue', 'leave', 'payable', 'type', 'constructor', 'fallback', 'receive', Identifier, StringLiteralFragment}": [
        "ERROR: when parsing line 8 column 0: extraneous input '^' expecting {<EOF>, 'pragma', '~', 'import', 'from', '{', '}', 'abstract', 'contract', 'interface', 'library', '(', 'error', 'using', 'for', 'struct', 'modifier', 'function', 'event', 'enum', '[', 'address', 'mapping', 'calldata', 'if', 'else', 'try', 'while', 'unchecked', 'assembly', 'do', 'return', 'throw', 'emit', 'revert', 'var', 'bool', 'string', 'byte', '++', '--', 'new', '+', '-', 'after', 'delete', '!', 'callback', Int, Uint, Byte, Fixed, Ufixed, BooleanLiteral, DecimalNumber, HexNumber, HexLiteralFragment, 'break', 'continue', 'leave', 'payable', 'type', 'constructor', 'fallback', 'receive', Identifier, StringLiteralFragment}\n"
    ]
}