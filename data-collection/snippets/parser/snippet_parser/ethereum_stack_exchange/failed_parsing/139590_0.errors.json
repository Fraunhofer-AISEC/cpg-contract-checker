{
    "no viable alternative at input 'function_withdrawPairNft(uint256mainTypePoolId,PairNftWithAmount[]calldata_nfts)private{\\nfor(uint256i;i<_nfts.length;++i){\\nuint256mainTokenId=_nfts[i].mainTokenId;\\nuint256bbbcTokenId=_nfts[i].bbbcTokenId;\\nuint256amount=_nfts[i].amount;\\naddressmainTokenOwner=nftContracts[mainTypePoolId].ownerOf(mainTokenId);\\naddressbbbcOwner=nftContracts[BBBC_POOL_ID].ownerOf(bbbcTokenId);\\nPairingStatusmemorymainToSecond=mainToBbbc[mainTypePoolId][mainTokenId];\\nPairingStatusmemorysecondToMain=bbbcToMain[bakcTokenId][mainTypePoolId];\\n\\nrequire(mainTokenOwner==msg.sender||bbbcOwner==msg.sender,\"At least one token in pair must be owned by caller\");\\nrequire(mainToSecond.tokenId==bbbcTokenId&&mainToSecond.isPaired\\n&&secondToMain.tokenId==mainTokenId&&secondToMain.isPaired,\"The provided Token IDs are not paired\");\\n\\nPositionstorageposition=nftPosition[BBBC_POOL_ID][bbbcTokenId];\\nrequire(mainTokenOwner==bbbcOwner||amount==position.stakedAmount,\"Split pair can't partially withdraw\");\\n\\nif(amount==position.stakedAmount){\\nuint256rewardsToBeClaimed=_claim(BBBC_POOL_ID,position,bbbcOwner);\\nmainToBbbc[mainTypePoolId][mainTokenId]=PairingStatus(0,false);\\nbbbcToMain[bbbcTokenId][mainTypePoolId]=PairingStatus(0,false);\\nemitClaimRewardsPairNft(msg.sender,rewardsToBeClaimed,mainTypePoolId,mainTokenId,bbbcTokenId);\\n}\\n_withdraw(BBBC_POOL_ID,position,amount,mainTokenOwner);\\nemitWithdrawPairNft(msg.sender,amount,mainTypePoolId,mainTokenId,bbbcTokenId);\\n'": [
        "ERROR: when parsing line 26 column 0: no viable alternative at input 'function_withdrawPairNft(uint256mainTypePoolId,PairNftWithAmount[]calldata_nfts)private{\\nfor(uint256i;i<_nfts.length;++i){\\nuint256mainTokenId=_nfts[i].mainTokenId;\\nuint256bbbcTokenId=_nfts[i].bbbcTokenId;\\nuint256amount=_nfts[i].amount;\\naddressmainTokenOwner=nftContracts[mainTypePoolId].ownerOf(mainTokenId);\\naddressbbbcOwner=nftContracts[BBBC_POOL_ID].ownerOf(bbbcTokenId);\\nPairingStatusmemorymainToSecond=mainToBbbc[mainTypePoolId][mainTokenId];\\nPairingStatusmemorysecondToMain=bbbcToMain[bakcTokenId][mainTypePoolId];\\n\\nrequire(mainTokenOwner==msg.sender||bbbcOwner==msg.sender,\"At least one token in pair must be owned by caller\");\\nrequire(mainToSecond.tokenId==bbbcTokenId&&mainToSecond.isPaired\\n&&secondToMain.tokenId==mainTokenId&&secondToMain.isPaired,\"The provided Token IDs are not paired\");\\n\\nPositionstorageposition=nftPosition[BBBC_POOL_ID][bbbcTokenId];\\nrequire(mainTokenOwner==bbbcOwner||amount==position.stakedAmount,\"Split pair can't partially withdraw\");\\n\\nif(amount==position.stakedAmount){\\nuint256rewardsToBeClaimed=_claim(BBBC_POOL_ID,position,bbbcOwner);\\nmainToBbbc[mainTypePoolId][mainTokenId]=PairingStatus(0,false);\\nbbbcToMain[bbbcTokenId][mainTypePoolId]=PairingStatus(0,false);\\nemitClaimRewardsPairNft(msg.sender,rewardsToBeClaimed,mainTypePoolId,mainTokenId,bbbcTokenId);\\n}\\n_withdraw(BBBC_POOL_ID,position,amount,mainTokenOwner);\\nemitWithdrawPairNft(msg.sender,amount,mainTypePoolId,mainTokenId,bbbcTokenId);\\n'\n"
    ]
}