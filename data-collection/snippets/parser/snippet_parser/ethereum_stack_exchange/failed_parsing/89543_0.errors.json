{
    "mismatched input 'i' expecting {'(', NL}": [
        "ERROR: when parsing line 1 column 4: mismatched input 'i' expecting {'(', NL}\n"
    ],
    "extraneous input ':' expecting {';', NL}": [
        "ERROR: when parsing line 1 column 30: extraneous input ':' expecting {';', NL}\n"
    ],
    "mismatched input 'sizes' expecting {'(', NL}": [
        "ERROR: when parsing line 2 column 7: mismatched input 'sizes' expecting {'(', NL}\n"
    ],
    "mismatched input 'is' expecting {';', NL}": [
        "ERROR: when parsing line 2 column 16: mismatched input 'is' expecting {';', NL}\n",
        "ERROR: when parsing line 5 column 44: mismatched input 'is' expecting {';', NL}\n"
    ],
    "mismatched input 'j' expecting {'(', NL}": [
        "ERROR: when parsing line 5 column 14: mismatched input 'j' expecting {'(', NL}\n"
    ],
    "mismatched input 'and' expecting {';', NL}": [
        "ERROR: when parsing line 5 column 21: mismatched input 'and' expecting {';', NL}\n"
    ],
    "mismatched input '[' expecting {'=', ';', NL}": [
        "ERROR: when parsing line 5 column 40: mismatched input '[' expecting {'=', ';', NL}\n"
    ],
    "extraneous input 'else' expecting {<EOF>, '~', 'from', '{', '(', 'error', 'for', 'function', '[', 'address', 'mapping', 'calldata', 'if', 'try', 'while', 'unchecked', 'assembly', 'do', 'return', 'throw', 'emit', 'revert', 'var', 'bool', 'string', 'byte', '++', '--', 'new', '+', '-', 'after', 'delete', '!', 'callback', Int, Uint, Byte, Fixed, Ufixed, BooleanLiteral, DecimalNumber, HexNumber, HexLiteralFragment, 'break', 'continue', 'leave', 'payable', 'type', 'constructor', 'receive', Identifier, StringLiteralFragment}": [
        "ERROR: when parsing line 9 column 4: extraneous input 'else' expecting {<EOF>, '~', 'from', '{', '(', 'error', 'for', 'function', '[', 'address', 'mapping', 'calldata', 'if', 'try', 'while', 'unchecked', 'assembly', 'do', 'return', 'throw', 'emit', 'revert', 'var', 'bool', 'string', 'byte', '++', '--', 'new', '+', '-', 'after', 'delete', '!', 'callback', Int, Uint, Byte, Fixed, Ufixed, BooleanLiteral, DecimalNumber, HexNumber, HexLiteralFragment, 'break', 'continue', 'leave', 'payable', 'type', 'constructor', 'receive', Identifier, StringLiteralFragment}\n"
    ]
}