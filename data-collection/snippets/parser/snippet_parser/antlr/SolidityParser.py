# Generated from ../../../../cpg-solidity/src/main/antlr/Solidity.g4 by ANTLR 4.12.0
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,134,2430,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,1,0,5,0,196,
        8,0,10,0,12,0,199,9,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,5,0,209,8,
        0,10,0,12,0,212,9,0,1,0,1,0,1,0,1,0,1,0,5,0,219,8,0,10,0,12,0,222,
        9,0,3,0,224,8,0,1,0,1,0,1,1,1,1,5,1,230,8,1,10,1,12,1,233,9,1,1,
        1,1,1,1,1,1,1,1,2,1,2,1,3,1,3,3,3,243,8,3,1,4,1,4,1,4,5,4,248,8,
        4,10,4,12,4,251,9,4,3,4,253,8,4,1,4,5,4,256,8,4,10,4,12,4,259,9,
        4,1,5,1,5,5,5,263,8,5,10,5,12,5,266,9,5,1,6,3,6,269,8,6,1,6,1,6,
        5,6,273,8,6,10,6,12,6,276,9,6,1,6,3,6,279,8,6,1,6,1,6,5,6,283,8,
        6,10,6,12,6,286,9,6,3,6,288,8,6,1,7,1,7,1,7,5,7,293,8,7,10,7,12,
        7,296,9,7,1,7,3,7,299,8,7,1,8,1,8,5,8,303,8,8,10,8,12,8,306,9,8,
        1,8,1,8,1,8,5,8,311,8,8,10,8,12,8,314,9,8,1,8,3,8,317,8,8,1,8,1,
        8,1,8,1,8,5,8,323,8,8,10,8,12,8,326,9,8,1,8,1,8,5,8,330,8,8,10,8,
        12,8,333,9,8,1,8,3,8,336,8,8,1,8,1,8,5,8,340,8,8,10,8,12,8,343,9,
        8,1,8,3,8,346,8,8,1,8,1,8,5,8,350,8,8,10,8,12,8,353,9,8,1,8,1,8,
        1,8,1,8,1,8,5,8,360,8,8,10,8,12,8,363,9,8,1,8,1,8,5,8,367,8,8,10,
        8,12,8,370,9,8,1,8,1,8,1,8,5,8,375,8,8,10,8,12,8,378,9,8,1,8,5,8,
        381,8,8,10,8,12,8,384,9,8,1,8,1,8,5,8,388,8,8,10,8,12,8,391,9,8,
        1,8,1,8,5,8,395,8,8,10,8,12,8,398,9,8,1,8,1,8,1,8,3,8,403,8,8,1,
        9,1,9,1,10,1,10,5,10,409,8,10,10,10,12,10,412,9,10,3,10,414,8,10,
        1,10,1,10,5,10,418,8,10,10,10,12,10,421,9,10,1,10,1,10,1,10,5,10,
        426,8,10,10,10,12,10,429,9,10,1,10,1,10,1,10,5,10,434,8,10,10,10,
        12,10,437,9,10,1,10,5,10,440,8,10,10,10,12,10,443,9,10,3,10,445,
        8,10,1,10,1,10,5,10,449,8,10,10,10,12,10,452,9,10,1,10,5,10,455,
        8,10,10,10,12,10,458,9,10,1,10,1,10,5,10,462,8,10,10,10,12,10,465,
        9,10,1,11,1,11,1,11,5,11,470,8,11,10,11,12,11,473,9,11,1,11,3,11,
        476,8,11,1,11,1,11,5,11,480,8,11,10,11,12,11,483,9,11,3,11,485,8,
        11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,3,12,495,8,12,1,13,1,
        13,1,13,5,13,500,8,13,10,13,12,13,503,9,13,1,13,1,13,5,13,507,8,
        13,10,13,12,13,510,9,13,1,13,1,13,5,13,514,8,13,10,13,12,13,517,
        9,13,1,13,1,13,5,13,521,8,13,10,13,12,13,524,9,13,1,13,1,13,5,13,
        528,8,13,10,13,12,13,531,9,13,1,13,5,13,534,8,13,10,13,12,13,537,
        9,13,1,13,1,13,1,13,5,13,542,8,13,10,13,12,13,545,9,13,1,13,3,13,
        548,8,13,1,13,1,13,1,14,1,14,1,14,5,14,555,8,14,10,14,12,14,558,
        9,14,1,14,1,14,1,14,5,14,563,8,14,10,14,12,14,566,9,14,1,14,1,14,
        1,14,1,15,1,15,5,15,573,8,15,10,15,12,15,576,9,15,1,15,1,15,1,15,
        1,15,1,16,1,16,5,16,584,8,16,10,16,12,16,587,9,16,1,16,1,16,1,16,
        5,16,592,8,16,10,16,12,16,595,9,16,1,16,1,16,5,16,599,8,16,10,16,
        12,16,602,9,16,1,16,3,16,605,8,16,1,16,1,16,1,17,1,17,5,17,611,8,
        17,10,17,12,17,614,9,17,1,17,1,17,1,17,5,17,619,8,17,10,17,12,17,
        622,9,17,1,17,1,17,1,17,1,17,1,17,5,17,629,8,17,10,17,12,17,632,
        9,17,3,17,634,8,17,1,17,1,17,5,17,638,8,17,10,17,12,17,641,9,17,
        1,18,1,18,5,18,645,8,18,10,18,12,18,648,9,18,1,18,1,18,3,18,652,
        8,18,1,18,1,18,5,18,656,8,18,10,18,12,18,659,9,18,1,18,5,18,662,
        8,18,10,18,12,18,665,9,18,1,18,1,18,3,18,669,8,18,1,19,1,19,1,19,
        5,19,674,8,19,10,19,12,19,677,9,19,1,19,3,19,680,8,19,1,19,1,19,
        5,19,684,8,19,10,19,12,19,687,9,19,3,19,689,8,19,1,20,1,20,1,20,
        1,20,3,20,695,8,20,1,20,1,20,3,20,699,8,20,1,21,1,21,5,21,703,8,
        21,10,21,12,21,706,9,21,1,21,3,21,709,8,21,1,21,1,21,5,21,713,8,
        21,10,21,12,21,716,9,21,1,21,1,21,5,21,720,8,21,10,21,12,21,723,
        9,21,1,21,1,21,5,21,727,8,21,10,21,12,21,730,9,21,3,21,732,8,21,
        1,22,1,22,5,22,736,8,22,10,22,12,22,739,9,22,1,22,1,22,1,23,1,23,
        5,23,745,8,23,10,23,12,23,748,9,23,1,23,1,23,5,23,752,8,23,10,23,
        12,23,755,9,23,1,23,1,23,5,23,759,8,23,10,23,12,23,762,9,23,1,23,
        1,23,5,23,766,8,23,10,23,12,23,769,9,23,1,23,1,23,5,23,773,8,23,
        10,23,12,23,776,9,23,1,23,1,23,1,23,5,23,781,8,23,10,23,12,23,784,
        9,23,1,24,1,24,5,24,788,8,24,10,24,12,24,791,9,24,1,24,1,24,1,24,
        1,24,5,24,797,8,24,10,24,12,24,800,9,24,3,24,802,8,24,1,24,1,24,
        1,25,1,25,1,26,1,26,5,26,810,8,26,10,26,12,26,813,9,26,1,26,1,26,
        1,26,5,26,818,8,26,10,26,12,26,821,9,26,1,26,3,26,824,8,26,1,26,
        1,26,5,26,828,8,26,10,26,12,26,831,9,26,1,26,5,26,834,8,26,10,26,
        12,26,837,9,26,1,26,1,26,5,26,841,8,26,10,26,12,26,844,9,26,1,27,
        1,27,5,27,848,8,27,10,27,12,27,851,9,27,1,27,1,27,1,27,5,27,856,
        8,27,10,27,12,27,859,9,27,1,27,5,27,862,8,27,10,27,12,27,865,9,27,
        3,27,867,8,27,1,27,1,27,5,27,871,8,27,10,27,12,27,874,9,27,1,28,
        1,28,3,28,878,8,28,1,28,3,28,881,8,28,1,29,1,29,5,29,885,8,29,10,
        29,12,29,888,9,29,1,29,1,29,1,29,5,29,893,8,29,10,29,12,29,896,9,
        29,1,29,5,29,899,8,29,10,29,12,29,902,9,29,3,29,904,8,29,1,29,1,
        29,5,29,908,8,29,10,29,12,29,911,9,29,1,30,1,30,1,30,5,30,916,8,
        30,10,30,12,30,919,9,30,3,30,921,8,30,1,30,3,30,924,8,30,1,31,1,
        31,5,31,928,8,31,10,31,12,31,931,9,31,1,31,1,31,1,31,5,31,936,8,
        31,10,31,12,31,939,9,31,1,31,5,31,942,8,31,10,31,12,31,945,9,31,
        3,31,947,8,31,1,31,1,31,5,31,951,8,31,10,31,12,31,954,9,31,1,32,
        1,32,3,32,958,8,32,1,33,1,33,3,33,962,8,33,1,33,1,33,1,34,1,34,1,
        34,1,34,1,34,1,34,1,34,5,34,973,8,34,10,34,12,34,976,9,34,1,34,1,
        34,5,34,980,8,34,10,34,12,34,983,9,34,3,34,985,8,34,1,34,1,34,1,
        34,5,34,990,8,34,10,34,12,34,993,9,34,1,34,3,34,996,8,34,1,34,1,
        34,5,34,1000,8,34,10,34,12,34,1003,9,34,5,34,1005,8,34,10,34,12,
        34,1008,9,34,1,35,1,35,1,35,5,35,1013,8,35,10,35,12,35,1016,9,35,
        1,35,5,35,1019,8,35,10,35,12,35,1022,9,35,1,36,1,36,3,36,1026,8,
        36,1,37,1,37,5,37,1030,8,37,10,37,12,37,1033,9,37,1,37,1,37,5,37,
        1037,8,37,10,37,12,37,1040,9,37,1,37,1,37,1,37,5,37,1045,8,37,10,
        37,12,37,1048,9,37,1,37,1,37,1,37,5,37,1053,8,37,10,37,12,37,1056,
        9,37,1,38,1,38,5,38,1060,8,38,10,38,12,38,1063,9,38,1,38,1,38,1,
        38,5,38,1068,8,38,10,38,12,38,1071,9,38,1,38,1,38,5,38,1075,8,38,
        10,38,12,38,1078,9,38,1,38,5,38,1081,8,38,10,38,12,38,1084,9,38,
        1,38,1,38,5,38,1088,8,38,10,38,12,38,1091,9,38,1,38,3,38,1094,8,
        38,1,39,1,39,5,39,1098,8,39,10,39,12,39,1101,9,39,1,40,1,40,5,40,
        1105,8,40,10,40,12,40,1108,9,40,1,41,1,41,5,41,1112,8,41,10,41,12,
        41,1115,9,41,1,41,5,41,1118,8,41,10,41,12,41,1121,9,41,1,41,1,41,
        5,41,1125,8,41,10,41,12,41,1128,9,41,1,42,1,42,1,42,1,42,1,42,1,
        42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,3,42,1145,8,42,1,
        43,1,43,1,43,1,44,1,44,5,44,1152,8,44,10,44,12,44,1155,9,44,1,44,
        1,44,5,44,1159,8,44,10,44,12,44,1162,9,44,1,44,1,44,1,44,5,44,1167,
        8,44,10,44,12,44,1170,9,44,1,44,1,44,1,44,5,44,1175,8,44,10,44,12,
        44,1178,9,44,1,44,3,44,1181,8,44,1,45,1,45,5,45,1185,8,45,10,45,
        12,45,1188,9,45,1,45,1,45,3,45,1192,8,45,1,45,1,45,4,45,1196,8,45,
        11,45,12,45,1197,1,46,1,46,5,46,1202,8,46,10,46,12,46,1205,9,46,
        1,46,3,46,1208,8,46,1,46,3,46,1211,8,46,1,46,1,46,1,47,1,47,5,47,
        1217,8,47,10,47,12,47,1220,9,47,1,47,1,47,5,47,1224,8,47,10,47,12,
        47,1227,9,47,1,47,1,47,1,47,5,47,1232,8,47,10,47,12,47,1235,9,47,
        1,47,1,47,1,48,1,48,3,48,1241,8,48,1,49,1,49,5,49,1245,8,49,10,49,
        12,49,1248,9,49,1,49,1,49,1,50,1,50,5,50,1254,8,50,10,50,12,50,1257,
        9,50,1,50,1,50,5,50,1261,8,50,10,50,12,50,1264,9,50,1,50,1,50,1,
        50,5,50,1269,8,50,10,50,12,50,1272,9,50,3,50,1274,8,50,1,50,1,50,
        1,50,5,50,1279,8,50,10,50,12,50,1282,9,50,3,50,1284,8,50,1,50,3,
        50,1287,8,50,1,50,1,50,5,50,1291,8,50,10,50,12,50,1294,9,50,1,50,
        1,50,1,51,1,51,5,51,1300,8,51,10,51,12,51,1303,9,51,1,51,1,51,5,
        51,1307,8,51,10,51,12,51,1310,9,51,3,51,1312,8,51,1,51,1,51,1,52,
        1,52,5,52,1318,8,52,10,52,12,52,1321,9,52,1,52,1,52,1,52,5,52,1326,
        8,52,10,52,12,52,1329,9,52,1,52,1,52,5,52,1333,8,52,10,52,12,52,
        1336,9,52,1,52,1,52,1,52,5,52,1341,8,52,10,52,12,52,1344,9,52,1,
        52,1,52,1,53,1,53,1,53,1,54,1,54,1,54,1,55,1,55,5,55,1356,8,55,10,
        55,12,55,1359,9,55,1,55,3,55,1362,8,55,1,55,1,55,1,56,1,56,1,56,
        1,57,1,57,5,57,1371,8,57,10,57,12,57,1374,9,57,1,57,1,57,1,57,1,
        58,1,58,5,58,1381,8,58,10,58,12,58,1384,9,58,1,58,1,58,1,58,1,59,
        1,59,5,59,1391,8,59,10,59,12,59,1394,9,59,1,59,1,59,1,59,1,59,5,
        59,1400,8,59,10,59,12,59,1403,9,59,1,59,1,59,1,59,5,59,1408,8,59,
        10,59,12,59,1411,9,59,3,59,1413,8,59,1,59,1,59,5,59,1417,8,59,10,
        59,12,59,1420,9,59,1,59,3,59,1423,8,59,1,59,1,59,1,60,3,60,1428,
        8,60,1,60,1,60,5,60,1432,8,60,10,60,12,60,1435,9,60,1,60,3,60,1438,
        8,60,5,60,1440,8,60,10,60,12,60,1443,9,60,1,61,1,61,5,61,1447,8,
        61,10,61,12,61,1450,9,61,1,61,3,61,1453,8,61,1,61,1,61,5,61,1457,
        8,61,10,61,12,61,1460,9,61,5,61,1462,8,61,10,61,12,61,1465,9,61,
        1,61,3,61,1468,8,61,1,61,1,61,5,61,1472,8,61,10,61,12,61,1475,9,
        61,1,62,1,62,5,62,1479,8,62,10,62,12,62,1482,9,62,1,63,1,63,1,63,
        5,63,1487,8,63,10,63,12,63,1490,9,63,1,63,1,63,1,63,5,63,1495,8,
        63,10,63,12,63,1498,9,63,1,63,1,63,1,63,5,63,1503,8,63,10,63,12,
        63,1506,9,63,1,63,1,63,5,63,1510,8,63,10,63,12,63,1513,9,63,1,63,
        1,63,1,63,5,63,1518,8,63,10,63,12,63,1521,9,63,1,63,1,63,1,63,5,
        63,1526,8,63,10,63,12,63,1529,9,63,1,63,1,63,1,63,5,63,1534,8,63,
        10,63,12,63,1537,9,63,1,63,1,63,1,63,5,63,1542,8,63,10,63,12,63,
        1545,9,63,1,63,1,63,3,63,1549,8,63,1,63,1,63,1,63,5,63,1554,8,63,
        10,63,12,63,1557,9,63,1,63,1,63,1,63,1,63,5,63,1563,8,63,10,63,12,
        63,1566,9,63,1,63,1,63,1,63,1,63,5,63,1572,8,63,10,63,12,63,1575,
        9,63,1,63,1,63,1,63,1,63,5,63,1581,8,63,10,63,12,63,1584,9,63,1,
        63,1,63,1,63,1,63,5,63,1590,8,63,10,63,12,63,1593,9,63,1,63,1,63,
        1,63,1,63,5,63,1599,8,63,10,63,12,63,1602,9,63,1,63,1,63,1,63,1,
        63,5,63,1608,8,63,10,63,12,63,1611,9,63,1,63,1,63,1,63,1,63,5,63,
        1617,8,63,10,63,12,63,1620,9,63,1,63,1,63,1,63,1,63,5,63,1626,8,
        63,10,63,12,63,1629,9,63,1,63,1,63,1,63,1,63,5,63,1635,8,63,10,63,
        12,63,1638,9,63,1,63,1,63,1,63,1,63,5,63,1644,8,63,10,63,12,63,1647,
        9,63,1,63,1,63,1,63,1,63,5,63,1653,8,63,10,63,12,63,1656,9,63,1,
        63,1,63,1,63,5,63,1661,8,63,10,63,12,63,1664,9,63,1,63,1,63,1,63,
        1,63,1,63,5,63,1671,8,63,10,63,12,63,1674,9,63,1,63,1,63,1,63,1,
        63,5,63,1680,8,63,10,63,12,63,1683,9,63,1,63,1,63,1,63,5,63,1688,
        8,63,10,63,12,63,1691,9,63,1,63,1,63,1,63,5,63,1696,8,63,10,63,12,
        63,1699,9,63,1,63,1,63,1,63,5,63,1704,8,63,10,63,12,63,1707,9,63,
        1,63,3,63,1710,8,63,1,63,1,63,5,63,1714,8,63,10,63,12,63,1717,9,
        63,1,63,3,63,1720,8,63,1,63,1,63,5,63,1724,8,63,10,63,12,63,1727,
        9,63,1,63,1,63,1,63,5,63,1732,8,63,10,63,12,63,1735,9,63,1,63,1,
        63,1,63,1,63,5,63,1741,8,63,10,63,12,63,1744,9,63,1,63,1,63,1,63,
        5,63,1749,8,63,10,63,12,63,1752,9,63,1,63,1,63,1,63,5,63,1757,8,
        63,10,63,12,63,1760,9,63,1,63,1,63,1,63,5,63,1765,8,63,10,63,12,
        63,1768,9,63,5,63,1770,8,63,10,63,12,63,1773,9,63,1,64,1,64,5,64,
        1777,8,64,10,64,12,64,1780,9,64,1,64,1,64,1,64,1,64,1,64,1,64,5,
        64,1788,8,64,10,64,12,64,1791,9,64,1,64,1,64,5,64,1795,8,64,10,64,
        12,64,1798,9,64,3,64,1800,8,64,1,64,1,64,5,64,1804,8,64,10,64,12,
        64,1807,9,64,1,64,1,64,5,64,1811,8,64,10,64,12,64,1814,9,64,1,64,
        1,64,1,64,1,64,5,64,1820,8,64,10,64,12,64,1823,9,64,1,64,1,64,5,
        64,1827,8,64,10,64,12,64,1830,9,64,3,64,1832,8,64,3,64,1834,8,64,
        1,65,1,65,1,65,5,65,1839,8,65,10,65,12,65,1842,9,65,1,65,5,65,1845,
        8,65,10,65,12,65,1848,9,65,1,66,1,66,1,66,5,66,1853,8,66,10,66,12,
        66,1856,9,66,1,66,5,66,1859,8,66,10,66,12,66,1862,9,66,1,66,1,66,
        5,66,1866,8,66,10,66,12,66,1869,9,66,3,66,1871,8,66,1,67,1,67,1,
        67,5,67,1876,8,67,10,67,12,67,1879,9,67,1,67,1,67,1,68,1,68,5,68,
        1885,8,68,10,68,12,68,1888,9,68,1,68,3,68,1891,8,68,1,68,1,68,5,
        68,1895,8,68,10,68,12,68,1898,9,68,1,68,3,68,1901,8,68,3,68,1903,
        8,68,1,69,1,69,1,69,5,69,1908,8,69,10,69,12,69,1911,9,69,1,69,1,
        69,1,69,5,69,1916,8,69,10,69,12,69,1919,9,69,1,70,1,70,5,70,1923,
        8,70,10,70,12,70,1926,9,70,1,70,5,70,1929,8,70,10,70,12,70,1932,
        9,70,1,70,1,70,5,70,1936,8,70,10,70,12,70,1939,9,70,1,71,1,71,1,
        71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,5,71,1954,8,
        71,10,71,12,71,1957,9,71,1,71,1,71,5,71,1961,8,71,10,71,12,71,1964,
        9,71,1,71,1,71,5,71,1968,8,71,10,71,12,71,1971,9,71,1,71,1,71,1,
        71,1,71,3,71,1977,8,71,1,72,1,72,1,72,3,72,1982,8,72,1,73,1,73,1,
        73,5,73,1987,8,73,10,73,12,73,1990,9,73,1,73,1,73,1,74,1,74,5,74,
        1996,8,74,10,74,12,74,1999,9,74,1,74,1,74,5,74,2003,8,74,10,74,12,
        74,2006,9,74,1,74,1,74,5,74,2010,8,74,10,74,12,74,2013,9,74,1,74,
        3,74,2016,8,74,1,74,1,74,5,74,2020,8,74,10,74,12,74,2023,9,74,1,
        74,3,74,2026,8,74,1,74,1,74,5,74,2030,8,74,10,74,12,74,2033,9,74,
        1,74,5,74,2036,8,74,10,74,12,74,2039,9,74,1,74,1,74,5,74,2043,8,
        74,10,74,12,74,2046,9,74,3,74,2048,8,74,1,75,1,75,5,75,2052,8,75,
        10,75,12,75,2055,9,75,1,75,1,75,1,75,5,75,2060,8,75,10,75,12,75,
        2063,9,75,1,75,3,75,2066,8,75,1,76,1,76,1,76,5,76,2071,8,76,10,76,
        12,76,2074,9,76,1,76,1,76,1,77,1,77,1,77,1,77,5,77,2082,8,77,10,
        77,12,77,2085,9,77,1,77,1,77,1,77,5,77,2090,8,77,10,77,12,77,2093,
        9,77,3,77,2095,8,77,1,78,1,78,1,78,5,78,2100,8,78,10,78,12,78,2103,
        9,78,1,78,5,78,2106,8,78,10,78,12,78,2109,9,78,1,79,1,79,5,79,2113,
        8,79,10,79,12,79,2116,9,79,1,79,1,79,1,80,1,80,1,80,5,80,2123,8,
        80,10,80,12,80,2126,9,80,1,81,1,81,5,81,2130,8,81,10,81,12,81,2133,
        9,81,1,81,1,81,5,81,2137,8,81,10,81,12,81,2140,9,81,1,82,1,82,5,
        82,2144,8,82,10,82,12,82,2147,9,82,1,82,1,82,1,82,1,82,1,82,5,82,
        2154,8,82,10,82,12,82,2157,9,82,1,82,3,82,2160,8,82,1,83,1,83,5,
        83,2164,8,83,10,83,12,83,2167,9,83,1,83,1,83,1,83,5,83,2172,8,83,
        10,83,12,83,2175,9,83,1,83,3,83,2178,8,83,1,83,1,83,5,83,2182,8,
        83,10,83,12,83,2185,9,83,1,83,3,83,2188,8,83,1,83,1,83,1,84,1,84,
        5,84,2194,8,84,10,84,12,84,2197,9,84,1,84,1,84,1,85,1,85,5,85,2203,
        8,85,10,85,12,85,2206,9,85,1,85,1,85,3,85,2210,8,85,1,85,1,85,1,
        85,3,85,2215,8,85,1,85,1,85,1,86,1,86,5,86,2221,8,86,10,86,12,86,
        2224,9,86,1,86,1,86,1,86,1,87,1,87,1,87,5,87,2232,8,87,10,87,12,
        87,2235,9,87,1,87,1,87,5,87,2239,8,87,10,87,12,87,2242,9,87,1,87,
        3,87,2245,8,87,1,88,1,88,5,88,2249,8,88,10,88,12,88,2252,9,88,1,
        88,1,88,1,88,1,89,1,89,5,89,2259,8,89,10,89,12,89,2262,9,89,1,89,
        3,89,2265,8,89,1,89,1,89,5,89,2269,8,89,10,89,12,89,2272,9,89,1,
        89,3,89,2275,8,89,5,89,2277,8,89,10,89,12,89,2280,9,89,1,89,1,89,
        5,89,2284,8,89,10,89,12,89,2287,9,89,1,89,1,89,5,89,2291,8,89,10,
        89,12,89,2294,9,89,1,89,1,89,1,89,5,89,2299,8,89,10,89,12,89,2302,
        9,89,1,89,5,89,2305,8,89,10,89,12,89,2308,9,89,3,89,2310,8,89,1,
        89,1,89,5,89,2314,8,89,10,89,12,89,2317,9,89,3,89,2319,8,89,1,90,
        1,90,3,90,2323,8,90,1,91,1,91,5,91,2327,8,91,10,91,12,91,2330,9,
        91,1,91,1,91,5,91,2334,8,91,10,91,12,91,2337,9,91,3,91,2339,8,91,
        1,91,1,91,5,91,2343,8,91,10,91,12,91,2346,9,91,3,91,2348,8,91,1,
        92,1,92,5,92,2352,8,92,10,92,12,92,2355,9,92,1,93,1,93,5,93,2359,
        8,93,10,93,12,93,2362,9,93,4,93,2364,8,93,11,93,12,93,2365,1,94,
        1,94,5,94,2370,8,94,10,94,12,94,2373,9,94,1,94,1,94,5,94,2377,8,
        94,10,94,12,94,2380,9,94,1,94,1,94,1,94,5,94,2385,8,94,10,94,12,
        94,2388,9,94,1,94,5,94,2391,8,94,10,94,12,94,2394,9,94,1,94,1,94,
        5,94,2398,8,94,10,94,12,94,2401,9,94,3,94,2403,8,94,1,95,1,95,5,
        95,2407,8,95,10,95,12,95,2410,9,95,4,95,2412,8,95,11,95,12,95,2413,
        1,96,1,96,5,96,2418,8,96,10,96,12,96,2421,9,96,1,96,4,96,2424,8,
        96,11,96,12,96,2425,3,96,2428,8,96,1,96,0,2,68,126,97,0,2,4,6,8,
        10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,
        54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,
        98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,
        132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,
        164,166,168,170,172,174,176,178,180,182,184,186,188,190,192,0,14,
        1,0,3,9,1,0,18,20,1,0,39,41,4,0,111,111,118,118,122,122,124,124,
        3,0,35,35,55,58,98,102,1,0,59,60,1,0,63,64,1,0,65,66,2,0,12,12,69,
        70,1,0,71,72,1,0,5,8,1,0,75,76,2,0,9,9,79,88,9,0,13,13,24,24,41,
        41,54,54,96,96,114,114,118,118,125,125,127,128,2780,0,197,1,0,0,
        0,2,227,1,0,0,0,4,238,1,0,0,0,6,242,1,0,0,0,8,244,1,0,0,0,10,260,
        1,0,0,0,12,287,1,0,0,0,14,289,1,0,0,0,16,402,1,0,0,0,18,404,1,0,
        0,0,20,413,1,0,0,0,22,466,1,0,0,0,24,494,1,0,0,0,26,496,1,0,0,0,
        28,551,1,0,0,0,30,570,1,0,0,0,32,581,1,0,0,0,34,608,1,0,0,0,36,642,
        1,0,0,0,38,670,1,0,0,0,40,690,1,0,0,0,42,731,1,0,0,0,44,733,1,0,
        0,0,46,782,1,0,0,0,48,785,1,0,0,0,50,805,1,0,0,0,52,807,1,0,0,0,
        54,845,1,0,0,0,56,875,1,0,0,0,58,882,1,0,0,0,60,912,1,0,0,0,62,925,
        1,0,0,0,64,955,1,0,0,0,66,959,1,0,0,0,68,984,1,0,0,0,70,1009,1,0,
        0,0,72,1025,1,0,0,0,74,1027,1,0,0,0,76,1057,1,0,0,0,78,1095,1,0,
        0,0,80,1102,1,0,0,0,82,1109,1,0,0,0,84,1144,1,0,0,0,86,1146,1,0,
        0,0,88,1149,1,0,0,0,90,1182,1,0,0,0,92,1199,1,0,0,0,94,1214,1,0,
        0,0,96,1240,1,0,0,0,98,1242,1,0,0,0,100,1251,1,0,0,0,102,1297,1,
        0,0,0,104,1315,1,0,0,0,106,1347,1,0,0,0,108,1350,1,0,0,0,110,1353,
        1,0,0,0,112,1365,1,0,0,0,114,1368,1,0,0,0,116,1378,1,0,0,0,118,1412,
        1,0,0,0,120,1427,1,0,0,0,122,1444,1,0,0,0,124,1476,1,0,0,0,126,1548,
        1,0,0,0,128,1833,1,0,0,0,130,1835,1,0,0,0,132,1849,1,0,0,0,134,1872,
        1,0,0,0,136,1902,1,0,0,0,138,1904,1,0,0,0,140,1920,1,0,0,0,142,1976,
        1,0,0,0,144,1981,1,0,0,0,146,1983,1,0,0,0,148,2015,1,0,0,0,150,2049,
        1,0,0,0,152,2067,1,0,0,0,154,2094,1,0,0,0,156,2096,1,0,0,0,158,2110,
        1,0,0,0,160,2119,1,0,0,0,162,2127,1,0,0,0,164,2159,1,0,0,0,166,2161,
        1,0,0,0,168,2191,1,0,0,0,170,2200,1,0,0,0,172,2218,1,0,0,0,174,2244,
        1,0,0,0,176,2246,1,0,0,0,178,2318,1,0,0,0,180,2322,1,0,0,0,182,2338,
        1,0,0,0,184,2349,1,0,0,0,186,2363,1,0,0,0,188,2367,1,0,0,0,190,2411,
        1,0,0,0,192,2427,1,0,0,0,194,196,5,131,0,0,195,194,1,0,0,0,196,199,
        1,0,0,0,197,195,1,0,0,0,197,198,1,0,0,0,198,223,1,0,0,0,199,197,
        1,0,0,0,200,209,3,2,1,0,201,209,3,16,8,0,202,209,3,20,10,0,203,209,
        3,52,26,0,204,209,3,34,17,0,205,209,3,24,12,0,206,209,3,28,14,0,
        207,209,3,30,15,0,208,200,1,0,0,0,208,201,1,0,0,0,208,202,1,0,0,
        0,208,203,1,0,0,0,208,204,1,0,0,0,208,205,1,0,0,0,208,206,1,0,0,
        0,208,207,1,0,0,0,209,212,1,0,0,0,210,208,1,0,0,0,210,211,1,0,0,
        0,211,224,1,0,0,0,212,210,1,0,0,0,213,224,3,40,20,0,214,224,3,86,
        43,0,215,224,3,26,13,0,216,224,3,82,41,0,217,219,3,84,42,0,218,217,
        1,0,0,0,219,222,1,0,0,0,220,218,1,0,0,0,220,221,1,0,0,0,221,224,
        1,0,0,0,222,220,1,0,0,0,223,210,1,0,0,0,223,213,1,0,0,0,223,214,
        1,0,0,0,223,215,1,0,0,0,223,216,1,0,0,0,223,220,1,0,0,0,224,225,
        1,0,0,0,225,226,5,0,0,1,226,1,1,0,0,0,227,231,5,1,0,0,228,230,5,
        131,0,0,229,228,1,0,0,0,230,233,1,0,0,0,231,229,1,0,0,0,231,232,
        1,0,0,0,232,234,1,0,0,0,233,231,1,0,0,0,234,235,3,4,2,0,235,236,
        3,6,3,0,236,237,3,192,96,0,237,3,1,0,0,0,238,239,3,184,92,0,239,
        5,1,0,0,0,240,243,3,8,4,0,241,243,3,126,63,0,242,240,1,0,0,0,242,
        241,1,0,0,0,243,7,1,0,0,0,244,257,3,12,6,0,245,249,5,2,0,0,246,248,
        5,131,0,0,247,246,1,0,0,0,248,251,1,0,0,0,249,247,1,0,0,0,249,250,
        1,0,0,0,250,253,1,0,0,0,251,249,1,0,0,0,252,245,1,0,0,0,252,253,
        1,0,0,0,253,254,1,0,0,0,254,256,3,12,6,0,255,252,1,0,0,0,256,259,
        1,0,0,0,257,255,1,0,0,0,257,258,1,0,0,0,258,9,1,0,0,0,259,257,1,
        0,0,0,260,264,7,0,0,0,261,263,5,131,0,0,262,261,1,0,0,0,263,266,
        1,0,0,0,264,262,1,0,0,0,264,265,1,0,0,0,265,11,1,0,0,0,266,264,1,
        0,0,0,267,269,3,10,5,0,268,267,1,0,0,0,268,269,1,0,0,0,269,270,1,
        0,0,0,270,274,5,130,0,0,271,273,5,131,0,0,272,271,1,0,0,0,273,276,
        1,0,0,0,274,272,1,0,0,0,274,275,1,0,0,0,275,288,1,0,0,0,276,274,
        1,0,0,0,277,279,3,10,5,0,278,277,1,0,0,0,278,279,1,0,0,0,279,280,
        1,0,0,0,280,284,5,104,0,0,281,283,5,131,0,0,282,281,1,0,0,0,283,
        286,1,0,0,0,284,282,1,0,0,0,284,285,1,0,0,0,285,288,1,0,0,0,286,
        284,1,0,0,0,287,268,1,0,0,0,287,278,1,0,0,0,288,13,1,0,0,0,289,298,
        3,184,92,0,290,294,5,10,0,0,291,293,5,131,0,0,292,291,1,0,0,0,293,
        296,1,0,0,0,294,292,1,0,0,0,294,295,1,0,0,0,295,297,1,0,0,0,296,
        294,1,0,0,0,297,299,3,184,92,0,298,290,1,0,0,0,298,299,1,0,0,0,299,
        15,1,0,0,0,300,304,5,11,0,0,301,303,5,131,0,0,302,301,1,0,0,0,303,
        306,1,0,0,0,304,302,1,0,0,0,304,305,1,0,0,0,305,307,1,0,0,0,306,
        304,1,0,0,0,307,316,3,18,9,0,308,312,5,10,0,0,309,311,5,131,0,0,
        310,309,1,0,0,0,311,314,1,0,0,0,312,310,1,0,0,0,312,313,1,0,0,0,
        313,315,1,0,0,0,314,312,1,0,0,0,315,317,3,184,92,0,316,308,1,0,0,
        0,316,317,1,0,0,0,317,318,1,0,0,0,318,319,3,192,96,0,319,403,1,0,
        0,0,320,324,5,11,0,0,321,323,5,131,0,0,322,321,1,0,0,0,323,326,1,
        0,0,0,324,322,1,0,0,0,324,325,1,0,0,0,325,335,1,0,0,0,326,324,1,
        0,0,0,327,331,5,12,0,0,328,330,5,131,0,0,329,328,1,0,0,0,330,333,
        1,0,0,0,331,329,1,0,0,0,331,332,1,0,0,0,332,336,1,0,0,0,333,331,
        1,0,0,0,334,336,3,184,92,0,335,327,1,0,0,0,335,334,1,0,0,0,336,345,
        1,0,0,0,337,341,5,10,0,0,338,340,5,131,0,0,339,338,1,0,0,0,340,343,
        1,0,0,0,341,339,1,0,0,0,341,342,1,0,0,0,342,344,1,0,0,0,343,341,
        1,0,0,0,344,346,3,184,92,0,345,337,1,0,0,0,345,346,1,0,0,0,346,347,
        1,0,0,0,347,351,5,13,0,0,348,350,5,131,0,0,349,348,1,0,0,0,350,353,
        1,0,0,0,351,349,1,0,0,0,351,352,1,0,0,0,352,354,1,0,0,0,353,351,
        1,0,0,0,354,355,3,18,9,0,355,356,3,192,96,0,356,403,1,0,0,0,357,
        361,5,11,0,0,358,360,5,131,0,0,359,358,1,0,0,0,360,363,1,0,0,0,361,
        359,1,0,0,0,361,362,1,0,0,0,362,364,1,0,0,0,363,361,1,0,0,0,364,
        368,5,14,0,0,365,367,5,131,0,0,366,365,1,0,0,0,367,370,1,0,0,0,368,
        366,1,0,0,0,368,369,1,0,0,0,369,371,1,0,0,0,370,368,1,0,0,0,371,
        382,3,14,7,0,372,376,5,15,0,0,373,375,5,131,0,0,374,373,1,0,0,0,
        375,378,1,0,0,0,376,374,1,0,0,0,376,377,1,0,0,0,377,379,1,0,0,0,
        378,376,1,0,0,0,379,381,3,14,7,0,380,372,1,0,0,0,381,384,1,0,0,0,
        382,380,1,0,0,0,382,383,1,0,0,0,383,385,1,0,0,0,384,382,1,0,0,0,
        385,389,5,16,0,0,386,388,5,131,0,0,387,386,1,0,0,0,388,391,1,0,0,
        0,389,387,1,0,0,0,389,390,1,0,0,0,390,392,1,0,0,0,391,389,1,0,0,
        0,392,396,5,13,0,0,393,395,5,131,0,0,394,393,1,0,0,0,395,398,1,0,
        0,0,396,394,1,0,0,0,396,397,1,0,0,0,397,399,1,0,0,0,398,396,1,0,
        0,0,399,400,3,18,9,0,400,401,3,192,96,0,401,403,1,0,0,0,402,300,
        1,0,0,0,402,320,1,0,0,0,402,357,1,0,0,0,403,17,1,0,0,0,404,405,5,
        129,0,0,405,19,1,0,0,0,406,410,5,17,0,0,407,409,5,131,0,0,408,407,
        1,0,0,0,409,412,1,0,0,0,410,408,1,0,0,0,410,411,1,0,0,0,411,414,
        1,0,0,0,412,410,1,0,0,0,413,406,1,0,0,0,413,414,1,0,0,0,414,415,
        1,0,0,0,415,419,7,1,0,0,416,418,5,131,0,0,417,416,1,0,0,0,418,421,
        1,0,0,0,419,417,1,0,0,0,419,420,1,0,0,0,420,422,1,0,0,0,421,419,
        1,0,0,0,422,444,3,184,92,0,423,427,5,21,0,0,424,426,5,131,0,0,425,
        424,1,0,0,0,426,429,1,0,0,0,427,425,1,0,0,0,427,428,1,0,0,0,428,
        430,1,0,0,0,429,427,1,0,0,0,430,441,3,22,11,0,431,435,5,15,0,0,432,
        434,5,131,0,0,433,432,1,0,0,0,434,437,1,0,0,0,435,433,1,0,0,0,435,
        436,1,0,0,0,436,438,1,0,0,0,437,435,1,0,0,0,438,440,3,22,11,0,439,
        431,1,0,0,0,440,443,1,0,0,0,441,439,1,0,0,0,441,442,1,0,0,0,442,
        445,1,0,0,0,443,441,1,0,0,0,444,423,1,0,0,0,444,445,1,0,0,0,445,
        446,1,0,0,0,446,450,5,14,0,0,447,449,5,131,0,0,448,447,1,0,0,0,449,
        452,1,0,0,0,450,448,1,0,0,0,450,451,1,0,0,0,451,456,1,0,0,0,452,
        450,1,0,0,0,453,455,3,24,12,0,454,453,1,0,0,0,455,458,1,0,0,0,456,
        454,1,0,0,0,456,457,1,0,0,0,457,459,1,0,0,0,458,456,1,0,0,0,459,
        463,5,16,0,0,460,462,5,131,0,0,461,460,1,0,0,0,462,465,1,0,0,0,463,
        461,1,0,0,0,463,464,1,0,0,0,464,21,1,0,0,0,465,463,1,0,0,0,466,484,
        3,70,35,0,467,471,5,22,0,0,468,470,5,131,0,0,469,468,1,0,0,0,470,
        473,1,0,0,0,471,469,1,0,0,0,471,472,1,0,0,0,472,475,1,0,0,0,473,
        471,1,0,0,0,474,476,3,130,65,0,475,474,1,0,0,0,475,476,1,0,0,0,476,
        477,1,0,0,0,477,481,5,23,0,0,478,480,5,131,0,0,479,478,1,0,0,0,480,
        483,1,0,0,0,481,479,1,0,0,0,481,482,1,0,0,0,482,485,1,0,0,0,483,
        481,1,0,0,0,484,467,1,0,0,0,484,485,1,0,0,0,485,23,1,0,0,0,486,495,
        3,26,13,0,487,495,3,32,16,0,488,495,3,34,17,0,489,495,3,36,18,0,
        490,495,3,40,20,0,491,495,3,48,24,0,492,495,3,52,26,0,493,495,3,
        30,15,0,494,486,1,0,0,0,494,487,1,0,0,0,494,488,1,0,0,0,494,489,
        1,0,0,0,494,490,1,0,0,0,494,491,1,0,0,0,494,492,1,0,0,0,494,493,
        1,0,0,0,495,25,1,0,0,0,496,535,3,68,34,0,497,501,5,120,0,0,498,500,
        5,131,0,0,499,498,1,0,0,0,500,503,1,0,0,0,501,499,1,0,0,0,501,502,
        1,0,0,0,502,534,1,0,0,0,503,501,1,0,0,0,504,508,5,117,0,0,505,507,
        5,131,0,0,506,505,1,0,0,0,507,510,1,0,0,0,508,506,1,0,0,0,508,509,
        1,0,0,0,509,534,1,0,0,0,510,508,1,0,0,0,511,515,5,119,0,0,512,514,
        5,131,0,0,513,512,1,0,0,0,514,517,1,0,0,0,515,513,1,0,0,0,515,516,
        1,0,0,0,516,534,1,0,0,0,517,515,1,0,0,0,518,522,5,111,0,0,519,521,
        5,131,0,0,520,519,1,0,0,0,521,524,1,0,0,0,522,520,1,0,0,0,522,523,
        1,0,0,0,523,534,1,0,0,0,524,522,1,0,0,0,525,529,5,112,0,0,526,528,
        5,131,0,0,527,526,1,0,0,0,528,531,1,0,0,0,529,527,1,0,0,0,529,530,
        1,0,0,0,530,534,1,0,0,0,531,529,1,0,0,0,532,534,3,188,94,0,533,497,
        1,0,0,0,533,504,1,0,0,0,533,511,1,0,0,0,533,518,1,0,0,0,533,525,
        1,0,0,0,533,532,1,0,0,0,534,537,1,0,0,0,535,533,1,0,0,0,535,536,
        1,0,0,0,536,538,1,0,0,0,537,535,1,0,0,0,538,547,3,184,92,0,539,543,
        5,9,0,0,540,542,5,131,0,0,541,540,1,0,0,0,542,545,1,0,0,0,543,541,
        1,0,0,0,543,544,1,0,0,0,544,546,1,0,0,0,545,543,1,0,0,0,546,548,
        3,126,63,0,547,539,1,0,0,0,547,548,1,0,0,0,548,549,1,0,0,0,549,550,
        3,192,96,0,550,27,1,0,0,0,551,552,3,68,34,0,552,556,5,111,0,0,553,
        555,5,131,0,0,554,553,1,0,0,0,555,558,1,0,0,0,556,554,1,0,0,0,556,
        557,1,0,0,0,557,559,1,0,0,0,558,556,1,0,0,0,559,560,3,184,92,0,560,
        564,5,9,0,0,561,563,5,131,0,0,562,561,1,0,0,0,563,566,1,0,0,0,564,
        562,1,0,0,0,564,565,1,0,0,0,565,567,1,0,0,0,566,564,1,0,0,0,567,
        568,3,126,63,0,568,569,3,192,96,0,569,29,1,0,0,0,570,574,5,24,0,
        0,571,573,5,131,0,0,572,571,1,0,0,0,573,576,1,0,0,0,574,572,1,0,
        0,0,574,575,1,0,0,0,575,577,1,0,0,0,576,574,1,0,0,0,577,578,3,184,
        92,0,578,579,3,54,27,0,579,580,3,192,96,0,580,31,1,0,0,0,581,585,
        5,25,0,0,582,584,5,131,0,0,583,582,1,0,0,0,584,587,1,0,0,0,585,583,
        1,0,0,0,585,586,1,0,0,0,586,588,1,0,0,0,587,585,1,0,0,0,588,589,
        3,184,92,0,589,593,5,26,0,0,590,592,5,131,0,0,591,590,1,0,0,0,592,
        595,1,0,0,0,593,591,1,0,0,0,593,594,1,0,0,0,594,604,1,0,0,0,595,
        593,1,0,0,0,596,600,5,12,0,0,597,599,5,131,0,0,598,597,1,0,0,0,599,
        602,1,0,0,0,600,598,1,0,0,0,600,601,1,0,0,0,601,605,1,0,0,0,602,
        600,1,0,0,0,603,605,3,68,34,0,604,596,1,0,0,0,604,603,1,0,0,0,605,
        606,1,0,0,0,606,607,3,192,96,0,607,33,1,0,0,0,608,612,5,27,0,0,609,
        611,5,131,0,0,610,609,1,0,0,0,611,614,1,0,0,0,612,610,1,0,0,0,612,
        613,1,0,0,0,613,615,1,0,0,0,614,612,1,0,0,0,615,616,3,184,92,0,616,
        620,5,14,0,0,617,619,5,131,0,0,618,617,1,0,0,0,619,622,1,0,0,0,620,
        618,1,0,0,0,620,621,1,0,0,0,621,633,1,0,0,0,622,620,1,0,0,0,623,
        624,3,66,33,0,624,630,3,192,96,0,625,626,3,66,33,0,626,627,3,192,
        96,0,627,629,1,0,0,0,628,625,1,0,0,0,629,632,1,0,0,0,630,628,1,0,
        0,0,630,631,1,0,0,0,631,634,1,0,0,0,632,630,1,0,0,0,633,623,1,0,
        0,0,633,634,1,0,0,0,634,635,1,0,0,0,635,639,5,16,0,0,636,638,5,131,
        0,0,637,636,1,0,0,0,638,641,1,0,0,0,639,637,1,0,0,0,639,640,1,0,
        0,0,640,35,1,0,0,0,641,639,1,0,0,0,642,646,5,28,0,0,643,645,5,131,
        0,0,644,643,1,0,0,0,645,648,1,0,0,0,646,644,1,0,0,0,646,647,1,0,
        0,0,647,649,1,0,0,0,648,646,1,0,0,0,649,651,3,184,92,0,650,652,3,
        54,27,0,651,650,1,0,0,0,651,652,1,0,0,0,652,663,1,0,0,0,653,657,
        5,121,0,0,654,656,5,131,0,0,655,654,1,0,0,0,656,659,1,0,0,0,657,
        655,1,0,0,0,657,658,1,0,0,0,658,662,1,0,0,0,659,657,1,0,0,0,660,
        662,3,188,94,0,661,653,1,0,0,0,661,660,1,0,0,0,662,665,1,0,0,0,663,
        661,1,0,0,0,663,664,1,0,0,0,664,668,1,0,0,0,665,663,1,0,0,0,666,
        669,3,192,96,0,667,669,3,82,41,0,668,666,1,0,0,0,668,667,1,0,0,0,
        669,37,1,0,0,0,670,688,3,184,92,0,671,675,5,22,0,0,672,674,5,131,
        0,0,673,672,1,0,0,0,674,677,1,0,0,0,675,673,1,0,0,0,675,676,1,0,
        0,0,676,679,1,0,0,0,677,675,1,0,0,0,678,680,3,130,65,0,679,678,1,
        0,0,0,679,680,1,0,0,0,680,681,1,0,0,0,681,685,5,23,0,0,682,684,5,
        131,0,0,683,682,1,0,0,0,684,687,1,0,0,0,685,683,1,0,0,0,685,686,
        1,0,0,0,686,689,1,0,0,0,687,685,1,0,0,0,688,671,1,0,0,0,688,689,
        1,0,0,0,689,39,1,0,0,0,690,691,3,42,21,0,691,692,3,54,27,0,692,694,
        3,46,23,0,693,695,3,44,22,0,694,693,1,0,0,0,694,695,1,0,0,0,695,
        698,1,0,0,0,696,699,3,192,96,0,697,699,3,82,41,0,698,696,1,0,0,0,
        698,697,1,0,0,0,699,41,1,0,0,0,700,704,5,29,0,0,701,703,5,131,0,
        0,702,701,1,0,0,0,703,706,1,0,0,0,704,702,1,0,0,0,704,705,1,0,0,
        0,705,708,1,0,0,0,706,704,1,0,0,0,707,709,3,184,92,0,708,707,1,0,
        0,0,708,709,1,0,0,0,709,732,1,0,0,0,710,714,5,125,0,0,711,713,5,
        131,0,0,712,711,1,0,0,0,713,716,1,0,0,0,714,712,1,0,0,0,714,715,
        1,0,0,0,715,732,1,0,0,0,716,714,1,0,0,0,717,721,5,126,0,0,718,720,
        5,131,0,0,719,718,1,0,0,0,720,723,1,0,0,0,721,719,1,0,0,0,721,722,
        1,0,0,0,722,732,1,0,0,0,723,721,1,0,0,0,724,728,5,127,0,0,725,727,
        5,131,0,0,726,725,1,0,0,0,727,730,1,0,0,0,728,726,1,0,0,0,728,729,
        1,0,0,0,729,732,1,0,0,0,730,728,1,0,0,0,731,700,1,0,0,0,731,710,
        1,0,0,0,731,717,1,0,0,0,731,724,1,0,0,0,732,43,1,0,0,0,733,737,5,
        30,0,0,734,736,5,131,0,0,735,734,1,0,0,0,736,739,1,0,0,0,737,735,
        1,0,0,0,737,738,1,0,0,0,738,740,1,0,0,0,739,737,1,0,0,0,740,741,
        3,54,27,0,741,45,1,0,0,0,742,746,5,115,0,0,743,745,5,131,0,0,744,
        743,1,0,0,0,745,748,1,0,0,0,746,744,1,0,0,0,746,747,1,0,0,0,747,
        781,1,0,0,0,748,746,1,0,0,0,749,753,5,120,0,0,750,752,5,131,0,0,
        751,750,1,0,0,0,752,755,1,0,0,0,753,751,1,0,0,0,753,754,1,0,0,0,
        754,781,1,0,0,0,755,753,1,0,0,0,756,760,5,117,0,0,757,759,5,131,
        0,0,758,757,1,0,0,0,759,762,1,0,0,0,760,758,1,0,0,0,760,761,1,0,
        0,0,761,781,1,0,0,0,762,760,1,0,0,0,763,767,5,119,0,0,764,766,5,
        131,0,0,765,764,1,0,0,0,766,769,1,0,0,0,767,765,1,0,0,0,767,768,
        1,0,0,0,768,781,1,0,0,0,769,767,1,0,0,0,770,774,5,121,0,0,771,773,
        5,131,0,0,772,771,1,0,0,0,773,776,1,0,0,0,774,772,1,0,0,0,774,775,
        1,0,0,0,775,781,1,0,0,0,776,774,1,0,0,0,777,781,3,80,40,0,778,781,
        3,38,19,0,779,781,3,188,94,0,780,742,1,0,0,0,780,749,1,0,0,0,780,
        756,1,0,0,0,780,763,1,0,0,0,780,770,1,0,0,0,780,777,1,0,0,0,780,
        778,1,0,0,0,780,779,1,0,0,0,781,784,1,0,0,0,782,780,1,0,0,0,782,
        783,1,0,0,0,783,47,1,0,0,0,784,782,1,0,0,0,785,789,5,31,0,0,786,
        788,5,131,0,0,787,786,1,0,0,0,788,791,1,0,0,0,789,787,1,0,0,0,789,
        790,1,0,0,0,790,792,1,0,0,0,791,789,1,0,0,0,792,793,3,184,92,0,793,
        801,3,58,29,0,794,798,5,109,0,0,795,797,5,131,0,0,796,795,1,0,0,
        0,797,800,1,0,0,0,798,796,1,0,0,0,798,799,1,0,0,0,799,802,1,0,0,
        0,800,798,1,0,0,0,801,794,1,0,0,0,801,802,1,0,0,0,802,803,1,0,0,
        0,803,804,3,192,96,0,804,49,1,0,0,0,805,806,3,184,92,0,806,51,1,
        0,0,0,807,811,5,32,0,0,808,810,5,131,0,0,809,808,1,0,0,0,810,813,
        1,0,0,0,811,809,1,0,0,0,811,812,1,0,0,0,812,814,1,0,0,0,813,811,
        1,0,0,0,814,815,3,184,92,0,815,819,5,14,0,0,816,818,5,131,0,0,817,
        816,1,0,0,0,818,821,1,0,0,0,819,817,1,0,0,0,819,820,1,0,0,0,820,
        823,1,0,0,0,821,819,1,0,0,0,822,824,3,50,25,0,823,822,1,0,0,0,823,
        824,1,0,0,0,824,835,1,0,0,0,825,829,5,15,0,0,826,828,5,131,0,0,827,
        826,1,0,0,0,828,831,1,0,0,0,829,827,1,0,0,0,829,830,1,0,0,0,830,
        832,1,0,0,0,831,829,1,0,0,0,832,834,3,50,25,0,833,825,1,0,0,0,834,
        837,1,0,0,0,835,833,1,0,0,0,835,836,1,0,0,0,836,838,1,0,0,0,837,
        835,1,0,0,0,838,842,5,16,0,0,839,841,5,131,0,0,840,839,1,0,0,0,841,
        844,1,0,0,0,842,840,1,0,0,0,842,843,1,0,0,0,843,53,1,0,0,0,844,842,
        1,0,0,0,845,849,5,22,0,0,846,848,5,131,0,0,847,846,1,0,0,0,848,851,
        1,0,0,0,849,847,1,0,0,0,849,850,1,0,0,0,850,866,1,0,0,0,851,849,
        1,0,0,0,852,863,3,56,28,0,853,857,5,15,0,0,854,856,5,131,0,0,855,
        854,1,0,0,0,856,859,1,0,0,0,857,855,1,0,0,0,857,858,1,0,0,0,858,
        860,1,0,0,0,859,857,1,0,0,0,860,862,3,56,28,0,861,853,1,0,0,0,862,
        865,1,0,0,0,863,861,1,0,0,0,863,864,1,0,0,0,864,867,1,0,0,0,865,
        863,1,0,0,0,866,852,1,0,0,0,866,867,1,0,0,0,867,868,1,0,0,0,868,
        872,5,23,0,0,869,871,5,131,0,0,870,869,1,0,0,0,871,874,1,0,0,0,872,
        870,1,0,0,0,872,873,1,0,0,0,873,55,1,0,0,0,874,872,1,0,0,0,875,877,
        3,68,34,0,876,878,3,78,39,0,877,876,1,0,0,0,877,878,1,0,0,0,878,
        880,1,0,0,0,879,881,3,184,92,0,880,879,1,0,0,0,880,881,1,0,0,0,881,
        57,1,0,0,0,882,886,5,22,0,0,883,885,5,131,0,0,884,883,1,0,0,0,885,
        888,1,0,0,0,886,884,1,0,0,0,886,887,1,0,0,0,887,903,1,0,0,0,888,
        886,1,0,0,0,889,900,3,60,30,0,890,894,5,15,0,0,891,893,5,131,0,0,
        892,891,1,0,0,0,893,896,1,0,0,0,894,892,1,0,0,0,894,895,1,0,0,0,
        895,897,1,0,0,0,896,894,1,0,0,0,897,899,3,60,30,0,898,890,1,0,0,
        0,899,902,1,0,0,0,900,898,1,0,0,0,900,901,1,0,0,0,901,904,1,0,0,
        0,902,900,1,0,0,0,903,889,1,0,0,0,903,904,1,0,0,0,904,905,1,0,0,
        0,905,909,5,23,0,0,906,908,5,131,0,0,907,906,1,0,0,0,908,911,1,0,
        0,0,909,907,1,0,0,0,909,910,1,0,0,0,910,59,1,0,0,0,911,909,1,0,0,
        0,912,920,3,68,34,0,913,917,5,116,0,0,914,916,5,131,0,0,915,914,
        1,0,0,0,916,919,1,0,0,0,917,915,1,0,0,0,917,918,1,0,0,0,918,921,
        1,0,0,0,919,917,1,0,0,0,920,913,1,0,0,0,920,921,1,0,0,0,921,923,
        1,0,0,0,922,924,3,184,92,0,923,922,1,0,0,0,923,924,1,0,0,0,924,61,
        1,0,0,0,925,929,5,22,0,0,926,928,5,131,0,0,927,926,1,0,0,0,928,931,
        1,0,0,0,929,927,1,0,0,0,929,930,1,0,0,0,930,946,1,0,0,0,931,929,
        1,0,0,0,932,943,3,64,32,0,933,937,5,15,0,0,934,936,5,131,0,0,935,
        934,1,0,0,0,936,939,1,0,0,0,937,935,1,0,0,0,937,938,1,0,0,0,938,
        940,1,0,0,0,939,937,1,0,0,0,940,942,3,64,32,0,941,933,1,0,0,0,942,
        945,1,0,0,0,943,941,1,0,0,0,943,944,1,0,0,0,944,947,1,0,0,0,945,
        943,1,0,0,0,946,932,1,0,0,0,946,947,1,0,0,0,947,948,1,0,0,0,948,
        952,5,23,0,0,949,951,5,131,0,0,950,949,1,0,0,0,951,954,1,0,0,0,952,
        950,1,0,0,0,952,953,1,0,0,0,953,63,1,0,0,0,954,952,1,0,0,0,955,957,
        3,68,34,0,956,958,3,78,39,0,957,956,1,0,0,0,957,958,1,0,0,0,958,
        65,1,0,0,0,959,961,3,68,34,0,960,962,3,78,39,0,961,960,1,0,0,0,961,
        962,1,0,0,0,962,963,1,0,0,0,963,964,3,184,92,0,964,67,1,0,0,0,965,
        966,6,34,-1,0,966,985,3,124,62,0,967,985,3,70,35,0,968,985,3,74,
        37,0,969,985,3,76,38,0,970,974,5,35,0,0,971,973,5,131,0,0,972,971,
        1,0,0,0,973,976,1,0,0,0,974,972,1,0,0,0,974,975,1,0,0,0,975,977,
        1,0,0,0,976,974,1,0,0,0,977,981,5,118,0,0,978,980,5,131,0,0,979,
        978,1,0,0,0,980,983,1,0,0,0,981,979,1,0,0,0,981,982,1,0,0,0,982,
        985,1,0,0,0,983,981,1,0,0,0,984,965,1,0,0,0,984,967,1,0,0,0,984,
        968,1,0,0,0,984,969,1,0,0,0,984,970,1,0,0,0,985,1006,1,0,0,0,986,
        987,10,3,0,0,987,991,5,33,0,0,988,990,5,131,0,0,989,988,1,0,0,0,
        990,993,1,0,0,0,991,989,1,0,0,0,991,992,1,0,0,0,992,995,1,0,0,0,
        993,991,1,0,0,0,994,996,3,126,63,0,995,994,1,0,0,0,995,996,1,0,0,
        0,996,997,1,0,0,0,997,1001,5,34,0,0,998,1000,5,131,0,0,999,998,1,
        0,0,0,1000,1003,1,0,0,0,1001,999,1,0,0,0,1001,1002,1,0,0,0,1002,
        1005,1,0,0,0,1003,1001,1,0,0,0,1004,986,1,0,0,0,1005,1008,1,0,0,
        0,1006,1004,1,0,0,0,1006,1007,1,0,0,0,1007,69,1,0,0,0,1008,1006,
        1,0,0,0,1009,1020,3,184,92,0,1010,1014,5,36,0,0,1011,1013,5,131,
        0,0,1012,1011,1,0,0,0,1013,1016,1,0,0,0,1014,1012,1,0,0,0,1014,1015,
        1,0,0,0,1015,1017,1,0,0,0,1016,1014,1,0,0,0,1017,1019,3,184,92,0,
        1018,1010,1,0,0,0,1019,1022,1,0,0,0,1020,1018,1,0,0,0,1020,1021,
        1,0,0,0,1021,71,1,0,0,0,1022,1020,1,0,0,0,1023,1026,3,124,62,0,1024,
        1026,3,70,35,0,1025,1023,1,0,0,0,1025,1024,1,0,0,0,1026,73,1,0,0,
        0,1027,1031,5,37,0,0,1028,1030,5,131,0,0,1029,1028,1,0,0,0,1030,
        1033,1,0,0,0,1031,1029,1,0,0,0,1031,1032,1,0,0,0,1032,1034,1,0,0,
        0,1033,1031,1,0,0,0,1034,1038,5,22,0,0,1035,1037,5,131,0,0,1036,
        1035,1,0,0,0,1037,1040,1,0,0,0,1038,1036,1,0,0,0,1038,1039,1,0,0,
        0,1039,1041,1,0,0,0,1040,1038,1,0,0,0,1041,1042,3,72,36,0,1042,1046,
        5,38,0,0,1043,1045,5,131,0,0,1044,1043,1,0,0,0,1045,1048,1,0,0,0,
        1046,1044,1,0,0,0,1046,1047,1,0,0,0,1047,1049,1,0,0,0,1048,1046,
        1,0,0,0,1049,1050,3,68,34,0,1050,1054,5,23,0,0,1051,1053,5,131,0,
        0,1052,1051,1,0,0,0,1053,1056,1,0,0,0,1054,1052,1,0,0,0,1054,1055,
        1,0,0,0,1055,75,1,0,0,0,1056,1054,1,0,0,0,1057,1061,5,29,0,0,1058,
        1060,5,131,0,0,1059,1058,1,0,0,0,1060,1063,1,0,0,0,1061,1059,1,0,
        0,0,1061,1062,1,0,0,0,1062,1064,1,0,0,0,1063,1061,1,0,0,0,1064,1082,
        3,62,31,0,1065,1069,5,117,0,0,1066,1068,5,131,0,0,1067,1066,1,0,
        0,0,1068,1071,1,0,0,0,1069,1067,1,0,0,0,1069,1070,1,0,0,0,1070,1081,
        1,0,0,0,1071,1069,1,0,0,0,1072,1076,5,115,0,0,1073,1075,5,131,0,
        0,1074,1073,1,0,0,0,1075,1078,1,0,0,0,1076,1074,1,0,0,0,1076,1077,
        1,0,0,0,1077,1081,1,0,0,0,1078,1076,1,0,0,0,1079,1081,3,80,40,0,
        1080,1065,1,0,0,0,1080,1072,1,0,0,0,1080,1079,1,0,0,0,1081,1084,
        1,0,0,0,1082,1080,1,0,0,0,1082,1083,1,0,0,0,1083,1093,1,0,0,0,1084,
        1082,1,0,0,0,1085,1089,5,30,0,0,1086,1088,5,131,0,0,1087,1086,1,
        0,0,0,1088,1091,1,0,0,0,1089,1087,1,0,0,0,1089,1090,1,0,0,0,1090,
        1092,1,0,0,0,1091,1089,1,0,0,0,1092,1094,3,62,31,0,1093,1085,1,0,
        0,0,1093,1094,1,0,0,0,1094,77,1,0,0,0,1095,1099,7,2,0,0,1096,1098,
        5,131,0,0,1097,1096,1,0,0,0,1098,1101,1,0,0,0,1099,1097,1,0,0,0,
        1099,1100,1,0,0,0,1100,79,1,0,0,0,1101,1099,1,0,0,0,1102,1106,7,
        3,0,0,1103,1105,5,131,0,0,1104,1103,1,0,0,0,1105,1108,1,0,0,0,1106,
        1104,1,0,0,0,1106,1107,1,0,0,0,1107,81,1,0,0,0,1108,1106,1,0,0,0,
        1109,1113,5,14,0,0,1110,1112,5,131,0,0,1111,1110,1,0,0,0,1112,1115,
        1,0,0,0,1113,1111,1,0,0,0,1113,1114,1,0,0,0,1114,1119,1,0,0,0,1115,
        1113,1,0,0,0,1116,1118,3,84,42,0,1117,1116,1,0,0,0,1118,1121,1,0,
        0,0,1119,1117,1,0,0,0,1119,1120,1,0,0,0,1120,1122,1,0,0,0,1121,1119,
        1,0,0,0,1122,1126,5,16,0,0,1123,1125,5,131,0,0,1124,1123,1,0,0,0,
        1125,1128,1,0,0,0,1126,1124,1,0,0,0,1126,1127,1,0,0,0,1127,83,1,
        0,0,0,1128,1126,1,0,0,0,1129,1145,3,88,44,0,1130,1145,3,90,45,0,
        1131,1145,3,94,47,0,1132,1145,3,100,50,0,1133,1145,3,82,41,0,1134,
        1145,3,102,51,0,1135,1145,3,104,52,0,1136,1145,3,106,53,0,1137,1145,
        3,108,54,0,1138,1145,3,110,55,0,1139,1145,3,112,56,0,1140,1145,3,
        114,57,0,1141,1145,3,96,48,0,1142,1145,3,98,49,0,1143,1145,3,116,
        58,0,1144,1129,1,0,0,0,1144,1130,1,0,0,0,1144,1131,1,0,0,0,1144,
        1132,1,0,0,0,1144,1133,1,0,0,0,1144,1134,1,0,0,0,1144,1135,1,0,0,
        0,1144,1136,1,0,0,0,1144,1137,1,0,0,0,1144,1138,1,0,0,0,1144,1139,
        1,0,0,0,1144,1140,1,0,0,0,1144,1141,1,0,0,0,1144,1142,1,0,0,0,1144,
        1143,1,0,0,0,1145,85,1,0,0,0,1146,1147,3,126,63,0,1147,1148,3,192,
        96,0,1148,87,1,0,0,0,1149,1153,5,42,0,0,1150,1152,5,131,0,0,1151,
        1150,1,0,0,0,1152,1155,1,0,0,0,1153,1151,1,0,0,0,1153,1154,1,0,0,
        0,1154,1156,1,0,0,0,1155,1153,1,0,0,0,1156,1160,5,22,0,0,1157,1159,
        5,131,0,0,1158,1157,1,0,0,0,1159,1162,1,0,0,0,1160,1158,1,0,0,0,
        1160,1161,1,0,0,0,1161,1163,1,0,0,0,1162,1160,1,0,0,0,1163,1164,
        3,126,63,0,1164,1168,5,23,0,0,1165,1167,5,131,0,0,1166,1165,1,0,
        0,0,1167,1170,1,0,0,0,1168,1166,1,0,0,0,1168,1169,1,0,0,0,1169,1171,
        1,0,0,0,1170,1168,1,0,0,0,1171,1180,3,84,42,0,1172,1176,5,43,0,0,
        1173,1175,5,131,0,0,1174,1173,1,0,0,0,1175,1178,1,0,0,0,1176,1174,
        1,0,0,0,1176,1177,1,0,0,0,1177,1179,1,0,0,0,1178,1176,1,0,0,0,1179,
        1181,3,84,42,0,1180,1172,1,0,0,0,1180,1181,1,0,0,0,1181,89,1,0,0,
        0,1182,1186,5,44,0,0,1183,1185,5,131,0,0,1184,1183,1,0,0,0,1185,
        1188,1,0,0,0,1186,1184,1,0,0,0,1186,1187,1,0,0,0,1187,1189,1,0,0,
        0,1188,1186,1,0,0,0,1189,1191,3,126,63,0,1190,1192,3,44,22,0,1191,
        1190,1,0,0,0,1191,1192,1,0,0,0,1192,1193,1,0,0,0,1193,1195,3,82,
        41,0,1194,1196,3,92,46,0,1195,1194,1,0,0,0,1196,1197,1,0,0,0,1197,
        1195,1,0,0,0,1197,1198,1,0,0,0,1198,91,1,0,0,0,1199,1203,5,45,0,
        0,1200,1202,5,131,0,0,1201,1200,1,0,0,0,1202,1205,1,0,0,0,1203,1201,
        1,0,0,0,1203,1204,1,0,0,0,1204,1210,1,0,0,0,1205,1203,1,0,0,0,1206,
        1208,3,184,92,0,1207,1206,1,0,0,0,1207,1208,1,0,0,0,1208,1209,1,
        0,0,0,1209,1211,3,54,27,0,1210,1207,1,0,0,0,1210,1211,1,0,0,0,1211,
        1212,1,0,0,0,1212,1213,3,82,41,0,1213,93,1,0,0,0,1214,1218,5,46,
        0,0,1215,1217,5,131,0,0,1216,1215,1,0,0,0,1217,1220,1,0,0,0,1218,
        1216,1,0,0,0,1218,1219,1,0,0,0,1219,1221,1,0,0,0,1220,1218,1,0,0,
        0,1221,1225,5,22,0,0,1222,1224,5,131,0,0,1223,1222,1,0,0,0,1224,
        1227,1,0,0,0,1225,1223,1,0,0,0,1225,1226,1,0,0,0,1226,1228,1,0,0,
        0,1227,1225,1,0,0,0,1228,1229,3,126,63,0,1229,1233,5,23,0,0,1230,
        1232,5,131,0,0,1231,1230,1,0,0,0,1232,1235,1,0,0,0,1233,1231,1,0,
        0,0,1233,1234,1,0,0,0,1234,1236,1,0,0,0,1235,1233,1,0,0,0,1236,1237,
        3,84,42,0,1237,95,1,0,0,0,1238,1241,3,118,59,0,1239,1241,3,86,43,
        0,1240,1238,1,0,0,0,1240,1239,1,0,0,0,1241,97,1,0,0,0,1242,1246,
        5,47,0,0,1243,1245,5,131,0,0,1244,1243,1,0,0,0,1245,1248,1,0,0,0,
        1246,1244,1,0,0,0,1246,1247,1,0,0,0,1247,1249,1,0,0,0,1248,1246,
        1,0,0,0,1249,1250,3,82,41,0,1250,99,1,0,0,0,1251,1255,5,26,0,0,1252,
        1254,5,131,0,0,1253,1252,1,0,0,0,1254,1257,1,0,0,0,1255,1253,1,0,
        0,0,1255,1256,1,0,0,0,1256,1258,1,0,0,0,1257,1255,1,0,0,0,1258,1262,
        5,22,0,0,1259,1261,5,131,0,0,1260,1259,1,0,0,0,1261,1264,1,0,0,0,
        1262,1260,1,0,0,0,1262,1263,1,0,0,0,1263,1273,1,0,0,0,1264,1262,
        1,0,0,0,1265,1274,3,96,48,0,1266,1270,5,48,0,0,1267,1269,5,131,0,
        0,1268,1267,1,0,0,0,1269,1272,1,0,0,0,1270,1268,1,0,0,0,1270,1271,
        1,0,0,0,1271,1274,1,0,0,0,1272,1270,1,0,0,0,1273,1265,1,0,0,0,1273,
        1266,1,0,0,0,1274,1283,1,0,0,0,1275,1284,3,86,43,0,1276,1280,5,48,
        0,0,1277,1279,5,131,0,0,1278,1277,1,0,0,0,1279,1282,1,0,0,0,1280,
        1278,1,0,0,0,1280,1281,1,0,0,0,1281,1284,1,0,0,0,1282,1280,1,0,0,
        0,1283,1275,1,0,0,0,1283,1276,1,0,0,0,1284,1286,1,0,0,0,1285,1287,
        3,126,63,0,1286,1285,1,0,0,0,1286,1287,1,0,0,0,1287,1288,1,0,0,0,
        1288,1292,5,23,0,0,1289,1291,5,131,0,0,1290,1289,1,0,0,0,1291,1294,
        1,0,0,0,1292,1290,1,0,0,0,1292,1293,1,0,0,0,1293,1295,1,0,0,0,1294,
        1292,1,0,0,0,1295,1296,3,84,42,0,1296,101,1,0,0,0,1297,1301,5,49,
        0,0,1298,1300,5,131,0,0,1299,1298,1,0,0,0,1300,1303,1,0,0,0,1301,
        1299,1,0,0,0,1301,1302,1,0,0,0,1302,1311,1,0,0,0,1303,1301,1,0,0,
        0,1304,1308,5,129,0,0,1305,1307,5,131,0,0,1306,1305,1,0,0,0,1307,
        1310,1,0,0,0,1308,1306,1,0,0,0,1308,1309,1,0,0,0,1309,1312,1,0,0,
        0,1310,1308,1,0,0,0,1311,1304,1,0,0,0,1311,1312,1,0,0,0,1312,1313,
        1,0,0,0,1313,1314,3,140,70,0,1314,103,1,0,0,0,1315,1319,5,50,0,0,
        1316,1318,5,131,0,0,1317,1316,1,0,0,0,1318,1321,1,0,0,0,1319,1317,
        1,0,0,0,1319,1320,1,0,0,0,1320,1322,1,0,0,0,1321,1319,1,0,0,0,1322,
        1323,3,84,42,0,1323,1327,5,46,0,0,1324,1326,5,131,0,0,1325,1324,
        1,0,0,0,1326,1329,1,0,0,0,1327,1325,1,0,0,0,1327,1328,1,0,0,0,1328,
        1330,1,0,0,0,1329,1327,1,0,0,0,1330,1334,5,22,0,0,1331,1333,5,131,
        0,0,1332,1331,1,0,0,0,1333,1336,1,0,0,0,1334,1332,1,0,0,0,1334,1335,
        1,0,0,0,1335,1337,1,0,0,0,1336,1334,1,0,0,0,1337,1338,3,126,63,0,
        1338,1342,5,23,0,0,1339,1341,5,131,0,0,1340,1339,1,0,0,0,1341,1344,
        1,0,0,0,1342,1340,1,0,0,0,1342,1343,1,0,0,0,1343,1345,1,0,0,0,1344,
        1342,1,0,0,0,1345,1346,3,192,96,0,1346,105,1,0,0,0,1347,1348,5,113,
        0,0,1348,1349,3,192,96,0,1349,107,1,0,0,0,1350,1351,5,110,0,0,1351,
        1352,3,192,96,0,1352,109,1,0,0,0,1353,1357,5,51,0,0,1354,1356,5,
        131,0,0,1355,1354,1,0,0,0,1356,1359,1,0,0,0,1357,1355,1,0,0,0,1357,
        1358,1,0,0,0,1358,1361,1,0,0,0,1359,1357,1,0,0,0,1360,1362,3,126,
        63,0,1361,1360,1,0,0,0,1361,1362,1,0,0,0,1362,1363,1,0,0,0,1363,
        1364,3,192,96,0,1364,111,1,0,0,0,1365,1366,5,52,0,0,1366,1367,3,
        192,96,0,1367,113,1,0,0,0,1368,1372,5,53,0,0,1369,1371,5,131,0,0,
        1370,1369,1,0,0,0,1371,1374,1,0,0,0,1372,1370,1,0,0,0,1372,1373,
        1,0,0,0,1373,1375,1,0,0,0,1374,1372,1,0,0,0,1375,1376,3,138,69,0,
        1376,1377,3,192,96,0,1377,115,1,0,0,0,1378,1382,5,54,0,0,1379,1381,
        5,131,0,0,1380,1379,1,0,0,0,1381,1384,1,0,0,0,1382,1380,1,0,0,0,
        1382,1383,1,0,0,0,1383,1385,1,0,0,0,1384,1382,1,0,0,0,1385,1386,
        3,138,69,0,1386,1387,3,192,96,0,1387,117,1,0,0,0,1388,1392,5,55,
        0,0,1389,1391,5,131,0,0,1390,1389,1,0,0,0,1391,1394,1,0,0,0,1392,
        1390,1,0,0,0,1392,1393,1,0,0,0,1393,1395,1,0,0,0,1394,1392,1,0,0,
        0,1395,1413,3,122,61,0,1396,1413,3,66,33,0,1397,1401,5,22,0,0,1398,
        1400,5,131,0,0,1399,1398,1,0,0,0,1400,1403,1,0,0,0,1401,1399,1,0,
        0,0,1401,1402,1,0,0,0,1402,1404,1,0,0,0,1403,1401,1,0,0,0,1404,1405,
        3,120,60,0,1405,1409,5,23,0,0,1406,1408,5,131,0,0,1407,1406,1,0,
        0,0,1408,1411,1,0,0,0,1409,1407,1,0,0,0,1409,1410,1,0,0,0,1410,1413,
        1,0,0,0,1411,1409,1,0,0,0,1412,1388,1,0,0,0,1412,1396,1,0,0,0,1412,
        1397,1,0,0,0,1413,1422,1,0,0,0,1414,1418,5,9,0,0,1415,1417,5,131,
        0,0,1416,1415,1,0,0,0,1417,1420,1,0,0,0,1418,1416,1,0,0,0,1418,1419,
        1,0,0,0,1419,1421,1,0,0,0,1420,1418,1,0,0,0,1421,1423,3,126,63,0,
        1422,1414,1,0,0,0,1422,1423,1,0,0,0,1423,1424,1,0,0,0,1424,1425,
        3,192,96,0,1425,119,1,0,0,0,1426,1428,3,66,33,0,1427,1426,1,0,0,
        0,1427,1428,1,0,0,0,1428,1441,1,0,0,0,1429,1433,5,15,0,0,1430,1432,
        5,131,0,0,1431,1430,1,0,0,0,1432,1435,1,0,0,0,1433,1431,1,0,0,0,
        1433,1434,1,0,0,0,1434,1437,1,0,0,0,1435,1433,1,0,0,0,1436,1438,
        3,66,33,0,1437,1436,1,0,0,0,1437,1438,1,0,0,0,1438,1440,1,0,0,0,
        1439,1429,1,0,0,0,1440,1443,1,0,0,0,1441,1439,1,0,0,0,1441,1442,
        1,0,0,0,1442,121,1,0,0,0,1443,1441,1,0,0,0,1444,1448,5,22,0,0,1445,
        1447,5,131,0,0,1446,1445,1,0,0,0,1447,1450,1,0,0,0,1448,1446,1,0,
        0,0,1448,1449,1,0,0,0,1449,1463,1,0,0,0,1450,1448,1,0,0,0,1451,1453,
        3,184,92,0,1452,1451,1,0,0,0,1452,1453,1,0,0,0,1453,1454,1,0,0,0,
        1454,1458,5,15,0,0,1455,1457,5,131,0,0,1456,1455,1,0,0,0,1457,1460,
        1,0,0,0,1458,1456,1,0,0,0,1458,1459,1,0,0,0,1459,1462,1,0,0,0,1460,
        1458,1,0,0,0,1461,1452,1,0,0,0,1462,1465,1,0,0,0,1463,1461,1,0,0,
        0,1463,1464,1,0,0,0,1464,1467,1,0,0,0,1465,1463,1,0,0,0,1466,1468,
        3,184,92,0,1467,1466,1,0,0,0,1467,1468,1,0,0,0,1468,1469,1,0,0,0,
        1469,1473,5,23,0,0,1470,1472,5,131,0,0,1471,1470,1,0,0,0,1472,1475,
        1,0,0,0,1473,1471,1,0,0,0,1473,1474,1,0,0,0,1474,123,1,0,0,0,1475,
        1473,1,0,0,0,1476,1480,7,4,0,0,1477,1479,5,131,0,0,1478,1477,1,0,
        0,0,1479,1482,1,0,0,0,1480,1478,1,0,0,0,1480,1481,1,0,0,0,1481,125,
        1,0,0,0,1482,1480,1,0,0,0,1483,1484,6,63,-1,0,1484,1488,5,61,0,0,
        1485,1487,5,131,0,0,1486,1485,1,0,0,0,1487,1490,1,0,0,0,1488,1486,
        1,0,0,0,1488,1489,1,0,0,0,1489,1491,1,0,0,0,1490,1488,1,0,0,0,1491,
        1549,3,68,34,0,1492,1496,5,22,0,0,1493,1495,5,131,0,0,1494,1493,
        1,0,0,0,1495,1498,1,0,0,0,1496,1494,1,0,0,0,1496,1497,1,0,0,0,1497,
        1499,1,0,0,0,1498,1496,1,0,0,0,1499,1500,3,126,63,0,1500,1504,5,
        23,0,0,1501,1503,5,131,0,0,1502,1501,1,0,0,0,1503,1506,1,0,0,0,1504,
        1502,1,0,0,0,1504,1505,1,0,0,0,1505,1549,1,0,0,0,1506,1504,1,0,0,
        0,1507,1511,7,5,0,0,1508,1510,5,131,0,0,1509,1508,1,0,0,0,1510,1513,
        1,0,0,0,1511,1509,1,0,0,0,1511,1512,1,0,0,0,1512,1514,1,0,0,0,1513,
        1511,1,0,0,0,1514,1549,3,126,63,19,1515,1519,7,6,0,0,1516,1518,5,
        131,0,0,1517,1516,1,0,0,0,1518,1521,1,0,0,0,1519,1517,1,0,0,0,1519,
        1520,1,0,0,0,1520,1522,1,0,0,0,1521,1519,1,0,0,0,1522,1549,3,126,
        63,18,1523,1527,7,7,0,0,1524,1526,5,131,0,0,1525,1524,1,0,0,0,1526,
        1529,1,0,0,0,1527,1525,1,0,0,0,1527,1528,1,0,0,0,1528,1530,1,0,0,
        0,1529,1527,1,0,0,0,1530,1549,3,126,63,17,1531,1535,5,67,0,0,1532,
        1534,5,131,0,0,1533,1532,1,0,0,0,1534,1537,1,0,0,0,1535,1533,1,0,
        0,0,1535,1536,1,0,0,0,1536,1538,1,0,0,0,1537,1535,1,0,0,0,1538,1549,
        3,126,63,16,1539,1543,5,4,0,0,1540,1542,5,131,0,0,1541,1540,1,0,
        0,0,1542,1545,1,0,0,0,1543,1541,1,0,0,0,1543,1544,1,0,0,0,1544,1546,
        1,0,0,0,1545,1543,1,0,0,0,1546,1549,3,126,63,15,1547,1549,3,128,
        64,0,1548,1483,1,0,0,0,1548,1492,1,0,0,0,1548,1507,1,0,0,0,1548,
        1515,1,0,0,0,1548,1523,1,0,0,0,1548,1531,1,0,0,0,1548,1539,1,0,0,
        0,1548,1547,1,0,0,0,1549,1771,1,0,0,0,1550,1551,10,14,0,0,1551,1555,
        5,68,0,0,1552,1554,5,131,0,0,1553,1552,1,0,0,0,1554,1557,1,0,0,0,
        1555,1553,1,0,0,0,1555,1556,1,0,0,0,1556,1558,1,0,0,0,1557,1555,
        1,0,0,0,1558,1770,3,126,63,15,1559,1560,10,13,0,0,1560,1564,7,8,
        0,0,1561,1563,5,131,0,0,1562,1561,1,0,0,0,1563,1566,1,0,0,0,1564,
        1562,1,0,0,0,1564,1565,1,0,0,0,1565,1567,1,0,0,0,1566,1564,1,0,0,
        0,1567,1770,3,126,63,14,1568,1569,10,12,0,0,1569,1573,7,6,0,0,1570,
        1572,5,131,0,0,1571,1570,1,0,0,0,1572,1575,1,0,0,0,1573,1571,1,0,
        0,0,1573,1574,1,0,0,0,1574,1576,1,0,0,0,1575,1573,1,0,0,0,1576,1770,
        3,126,63,13,1577,1578,10,11,0,0,1578,1582,7,9,0,0,1579,1581,5,131,
        0,0,1580,1579,1,0,0,0,1581,1584,1,0,0,0,1582,1580,1,0,0,0,1582,1583,
        1,0,0,0,1583,1585,1,0,0,0,1584,1582,1,0,0,0,1585,1770,3,126,63,12,
        1586,1587,10,10,0,0,1587,1591,5,73,0,0,1588,1590,5,131,0,0,1589,
        1588,1,0,0,0,1590,1593,1,0,0,0,1591,1589,1,0,0,0,1591,1592,1,0,0,
        0,1592,1594,1,0,0,0,1593,1591,1,0,0,0,1594,1770,3,126,63,11,1595,
        1596,10,9,0,0,1596,1600,5,3,0,0,1597,1599,5,131,0,0,1598,1597,1,
        0,0,0,1599,1602,1,0,0,0,1600,1598,1,0,0,0,1600,1601,1,0,0,0,1601,
        1603,1,0,0,0,1602,1600,1,0,0,0,1603,1770,3,126,63,10,1604,1605,10,
        8,0,0,1605,1609,5,74,0,0,1606,1608,5,131,0,0,1607,1606,1,0,0,0,1608,
        1611,1,0,0,0,1609,1607,1,0,0,0,1609,1610,1,0,0,0,1610,1612,1,0,0,
        0,1611,1609,1,0,0,0,1612,1770,3,126,63,9,1613,1614,10,7,0,0,1614,
        1618,7,10,0,0,1615,1617,5,131,0,0,1616,1615,1,0,0,0,1617,1620,1,
        0,0,0,1618,1616,1,0,0,0,1618,1619,1,0,0,0,1619,1621,1,0,0,0,1620,
        1618,1,0,0,0,1621,1770,3,126,63,8,1622,1623,10,6,0,0,1623,1627,7,
        11,0,0,1624,1626,5,131,0,0,1625,1624,1,0,0,0,1626,1629,1,0,0,0,1627,
        1625,1,0,0,0,1627,1628,1,0,0,0,1628,1630,1,0,0,0,1629,1627,1,0,0,
        0,1630,1770,3,126,63,7,1631,1632,10,5,0,0,1632,1636,5,77,0,0,1633,
        1635,5,131,0,0,1634,1633,1,0,0,0,1635,1638,1,0,0,0,1636,1634,1,0,
        0,0,1636,1637,1,0,0,0,1637,1639,1,0,0,0,1638,1636,1,0,0,0,1639,1770,
        3,126,63,6,1640,1641,10,4,0,0,1641,1645,5,2,0,0,1642,1644,5,131,
        0,0,1643,1642,1,0,0,0,1644,1647,1,0,0,0,1645,1643,1,0,0,0,1645,1646,
        1,0,0,0,1646,1648,1,0,0,0,1647,1645,1,0,0,0,1648,1770,3,126,63,5,
        1649,1650,10,3,0,0,1650,1654,5,78,0,0,1651,1653,5,131,0,0,1652,1651,
        1,0,0,0,1653,1656,1,0,0,0,1654,1652,1,0,0,0,1654,1655,1,0,0,0,1655,
        1657,1,0,0,0,1656,1654,1,0,0,0,1657,1658,3,126,63,0,1658,1662,5,
        62,0,0,1659,1661,5,131,0,0,1660,1659,1,0,0,0,1661,1664,1,0,0,0,1662,
        1660,1,0,0,0,1662,1663,1,0,0,0,1663,1665,1,0,0,0,1664,1662,1,0,0,
        0,1665,1666,3,126,63,4,1666,1770,1,0,0,0,1667,1668,10,2,0,0,1668,
        1672,7,12,0,0,1669,1671,5,131,0,0,1670,1669,1,0,0,0,1671,1674,1,
        0,0,0,1672,1670,1,0,0,0,1672,1673,1,0,0,0,1673,1675,1,0,0,0,1674,
        1672,1,0,0,0,1675,1770,3,126,63,3,1676,1677,10,27,0,0,1677,1681,
        7,5,0,0,1678,1680,5,131,0,0,1679,1678,1,0,0,0,1680,1683,1,0,0,0,
        1681,1679,1,0,0,0,1681,1682,1,0,0,0,1682,1770,1,0,0,0,1683,1681,
        1,0,0,0,1684,1685,10,25,0,0,1685,1689,5,33,0,0,1686,1688,5,131,0,
        0,1687,1686,1,0,0,0,1688,1691,1,0,0,0,1689,1687,1,0,0,0,1689,1690,
        1,0,0,0,1690,1692,1,0,0,0,1691,1689,1,0,0,0,1692,1693,3,126,63,0,
        1693,1697,5,34,0,0,1694,1696,5,131,0,0,1695,1694,1,0,0,0,1696,1699,
        1,0,0,0,1697,1695,1,0,0,0,1697,1698,1,0,0,0,1698,1770,1,0,0,0,1699,
        1697,1,0,0,0,1700,1701,10,24,0,0,1701,1705,5,33,0,0,1702,1704,5,
        131,0,0,1703,1702,1,0,0,0,1704,1707,1,0,0,0,1705,1703,1,0,0,0,1705,
        1706,1,0,0,0,1706,1709,1,0,0,0,1707,1705,1,0,0,0,1708,1710,3,126,
        63,0,1709,1708,1,0,0,0,1709,1710,1,0,0,0,1710,1711,1,0,0,0,1711,
        1715,5,62,0,0,1712,1714,5,131,0,0,1713,1712,1,0,0,0,1714,1717,1,
        0,0,0,1715,1713,1,0,0,0,1715,1716,1,0,0,0,1716,1719,1,0,0,0,1717,
        1715,1,0,0,0,1718,1720,3,126,63,0,1719,1718,1,0,0,0,1719,1720,1,
        0,0,0,1720,1721,1,0,0,0,1721,1725,5,34,0,0,1722,1724,5,131,0,0,1723,
        1722,1,0,0,0,1724,1727,1,0,0,0,1725,1723,1,0,0,0,1725,1726,1,0,0,
        0,1726,1770,1,0,0,0,1727,1725,1,0,0,0,1728,1729,10,23,0,0,1729,1733,
        5,36,0,0,1730,1732,5,131,0,0,1731,1730,1,0,0,0,1732,1735,1,0,0,0,
        1733,1731,1,0,0,0,1733,1734,1,0,0,0,1734,1736,1,0,0,0,1735,1733,
        1,0,0,0,1736,1770,3,184,92,0,1737,1738,10,22,0,0,1738,1742,5,14,
        0,0,1739,1741,5,131,0,0,1740,1739,1,0,0,0,1741,1744,1,0,0,0,1742,
        1740,1,0,0,0,1742,1743,1,0,0,0,1743,1745,1,0,0,0,1744,1742,1,0,0,
        0,1745,1746,3,132,66,0,1746,1750,5,16,0,0,1747,1749,5,131,0,0,1748,
        1747,1,0,0,0,1749,1752,1,0,0,0,1750,1748,1,0,0,0,1750,1751,1,0,0,
        0,1751,1770,1,0,0,0,1752,1750,1,0,0,0,1753,1754,10,21,0,0,1754,1758,
        5,22,0,0,1755,1757,5,131,0,0,1756,1755,1,0,0,0,1757,1760,1,0,0,0,
        1758,1756,1,0,0,0,1758,1759,1,0,0,0,1759,1761,1,0,0,0,1760,1758,
        1,0,0,0,1761,1762,3,136,68,0,1762,1766,5,23,0,0,1763,1765,5,131,
        0,0,1764,1763,1,0,0,0,1765,1768,1,0,0,0,1766,1764,1,0,0,0,1766,1767,
        1,0,0,0,1767,1770,1,0,0,0,1768,1766,1,0,0,0,1769,1550,1,0,0,0,1769,
        1559,1,0,0,0,1769,1568,1,0,0,0,1769,1577,1,0,0,0,1769,1586,1,0,0,
        0,1769,1595,1,0,0,0,1769,1604,1,0,0,0,1769,1613,1,0,0,0,1769,1622,
        1,0,0,0,1769,1631,1,0,0,0,1769,1640,1,0,0,0,1769,1649,1,0,0,0,1769,
        1667,1,0,0,0,1769,1676,1,0,0,0,1769,1684,1,0,0,0,1769,1700,1,0,0,
        0,1769,1728,1,0,0,0,1769,1737,1,0,0,0,1769,1753,1,0,0,0,1770,1773,
        1,0,0,0,1771,1769,1,0,0,0,1771,1772,1,0,0,0,1772,127,1,0,0,0,1773,
        1771,1,0,0,0,1774,1778,5,103,0,0,1775,1777,5,131,0,0,1776,1775,1,
        0,0,0,1777,1780,1,0,0,0,1778,1776,1,0,0,0,1778,1779,1,0,0,0,1779,
        1834,1,0,0,0,1780,1778,1,0,0,0,1781,1834,3,182,91,0,1782,1834,3,
        186,93,0,1783,1834,3,190,95,0,1784,1799,3,184,92,0,1785,1789,5,33,
        0,0,1786,1788,5,131,0,0,1787,1786,1,0,0,0,1788,1791,1,0,0,0,1789,
        1787,1,0,0,0,1789,1790,1,0,0,0,1790,1792,1,0,0,0,1791,1789,1,0,0,
        0,1792,1796,5,34,0,0,1793,1795,5,131,0,0,1794,1793,1,0,0,0,1795,
        1798,1,0,0,0,1796,1794,1,0,0,0,1796,1797,1,0,0,0,1797,1800,1,0,0,
        0,1798,1796,1,0,0,0,1799,1785,1,0,0,0,1799,1800,1,0,0,0,1800,1834,
        1,0,0,0,1801,1805,5,123,0,0,1802,1804,5,131,0,0,1803,1802,1,0,0,
        0,1804,1807,1,0,0,0,1805,1803,1,0,0,0,1805,1806,1,0,0,0,1806,1834,
        1,0,0,0,1807,1805,1,0,0,0,1808,1812,5,118,0,0,1809,1811,5,131,0,
        0,1810,1809,1,0,0,0,1811,1814,1,0,0,0,1812,1810,1,0,0,0,1812,1813,
        1,0,0,0,1813,1834,1,0,0,0,1814,1812,1,0,0,0,1815,1834,3,178,89,0,
        1816,1831,3,180,90,0,1817,1821,5,33,0,0,1818,1820,5,131,0,0,1819,
        1818,1,0,0,0,1820,1823,1,0,0,0,1821,1819,1,0,0,0,1821,1822,1,0,0,
        0,1822,1824,1,0,0,0,1823,1821,1,0,0,0,1824,1828,5,34,0,0,1825,1827,
        5,131,0,0,1826,1825,1,0,0,0,1827,1830,1,0,0,0,1828,1826,1,0,0,0,
        1828,1829,1,0,0,0,1829,1832,1,0,0,0,1830,1828,1,0,0,0,1831,1817,
        1,0,0,0,1831,1832,1,0,0,0,1832,1834,1,0,0,0,1833,1774,1,0,0,0,1833,
        1781,1,0,0,0,1833,1782,1,0,0,0,1833,1783,1,0,0,0,1833,1784,1,0,0,
        0,1833,1801,1,0,0,0,1833,1808,1,0,0,0,1833,1815,1,0,0,0,1833,1816,
        1,0,0,0,1834,129,1,0,0,0,1835,1846,3,126,63,0,1836,1840,5,15,0,0,
        1837,1839,5,131,0,0,1838,1837,1,0,0,0,1839,1842,1,0,0,0,1840,1838,
        1,0,0,0,1840,1841,1,0,0,0,1841,1843,1,0,0,0,1842,1840,1,0,0,0,1843,
        1845,3,126,63,0,1844,1836,1,0,0,0,1845,1848,1,0,0,0,1846,1844,1,
        0,0,0,1846,1847,1,0,0,0,1847,131,1,0,0,0,1848,1846,1,0,0,0,1849,
        1860,3,134,67,0,1850,1854,5,15,0,0,1851,1853,5,131,0,0,1852,1851,
        1,0,0,0,1853,1856,1,0,0,0,1854,1852,1,0,0,0,1854,1855,1,0,0,0,1855,
        1857,1,0,0,0,1856,1854,1,0,0,0,1857,1859,3,134,67,0,1858,1850,1,
        0,0,0,1859,1862,1,0,0,0,1860,1858,1,0,0,0,1860,1861,1,0,0,0,1861,
        1870,1,0,0,0,1862,1860,1,0,0,0,1863,1867,5,15,0,0,1864,1866,5,131,
        0,0,1865,1864,1,0,0,0,1866,1869,1,0,0,0,1867,1865,1,0,0,0,1867,1868,
        1,0,0,0,1868,1871,1,0,0,0,1869,1867,1,0,0,0,1870,1863,1,0,0,0,1870,
        1871,1,0,0,0,1871,133,1,0,0,0,1872,1873,3,184,92,0,1873,1877,5,62,
        0,0,1874,1876,5,131,0,0,1875,1874,1,0,0,0,1876,1879,1,0,0,0,1877,
        1875,1,0,0,0,1877,1878,1,0,0,0,1878,1880,1,0,0,0,1879,1877,1,0,0,
        0,1880,1881,3,126,63,0,1881,135,1,0,0,0,1882,1886,5,14,0,0,1883,
        1885,5,131,0,0,1884,1883,1,0,0,0,1885,1888,1,0,0,0,1886,1884,1,0,
        0,0,1886,1887,1,0,0,0,1887,1890,1,0,0,0,1888,1886,1,0,0,0,1889,1891,
        3,132,66,0,1890,1889,1,0,0,0,1890,1891,1,0,0,0,1891,1892,1,0,0,0,
        1892,1896,5,16,0,0,1893,1895,5,131,0,0,1894,1893,1,0,0,0,1895,1898,
        1,0,0,0,1896,1894,1,0,0,0,1896,1897,1,0,0,0,1897,1903,1,0,0,0,1898,
        1896,1,0,0,0,1899,1901,3,130,65,0,1900,1899,1,0,0,0,1900,1901,1,
        0,0,0,1901,1903,1,0,0,0,1902,1882,1,0,0,0,1902,1900,1,0,0,0,1903,
        137,1,0,0,0,1904,1905,3,126,63,0,1905,1909,5,22,0,0,1906,1908,5,
        131,0,0,1907,1906,1,0,0,0,1908,1911,1,0,0,0,1909,1907,1,0,0,0,1909,
        1910,1,0,0,0,1910,1912,1,0,0,0,1911,1909,1,0,0,0,1912,1913,3,136,
        68,0,1913,1917,5,23,0,0,1914,1916,5,131,0,0,1915,1914,1,0,0,0,1916,
        1919,1,0,0,0,1917,1915,1,0,0,0,1917,1918,1,0,0,0,1918,139,1,0,0,
        0,1919,1917,1,0,0,0,1920,1924,5,14,0,0,1921,1923,5,131,0,0,1922,
        1921,1,0,0,0,1923,1926,1,0,0,0,1924,1922,1,0,0,0,1924,1925,1,0,0,
        0,1925,1930,1,0,0,0,1926,1924,1,0,0,0,1927,1929,3,142,71,0,1928,
        1927,1,0,0,0,1929,1932,1,0,0,0,1930,1928,1,0,0,0,1930,1931,1,0,0,
        0,1931,1933,1,0,0,0,1932,1930,1,0,0,0,1933,1937,5,16,0,0,1934,1936,
        5,131,0,0,1935,1934,1,0,0,0,1936,1939,1,0,0,0,1937,1935,1,0,0,0,
        1937,1938,1,0,0,0,1938,141,1,0,0,0,1939,1937,1,0,0,0,1940,1977,3,
        184,92,0,1941,1977,3,140,70,0,1942,1977,3,144,72,0,1943,1977,3,150,
        75,0,1944,1977,3,152,76,0,1945,1977,3,158,79,0,1946,1977,3,160,80,
        0,1947,1977,3,162,81,0,1948,1977,3,166,83,0,1949,1977,3,170,85,0,
        1950,1977,3,172,86,0,1951,1955,5,110,0,0,1952,1954,5,131,0,0,1953,
        1952,1,0,0,0,1954,1957,1,0,0,0,1955,1953,1,0,0,0,1955,1956,1,0,0,
        0,1956,1977,1,0,0,0,1957,1955,1,0,0,0,1958,1962,5,113,0,0,1959,1961,
        5,131,0,0,1960,1959,1,0,0,0,1961,1964,1,0,0,0,1962,1960,1,0,0,0,
        1962,1963,1,0,0,0,1963,1977,1,0,0,0,1964,1962,1,0,0,0,1965,1969,
        5,114,0,0,1966,1968,5,131,0,0,1967,1966,1,0,0,0,1968,1971,1,0,0,
        0,1969,1967,1,0,0,0,1969,1970,1,0,0,0,1970,1977,1,0,0,0,1971,1969,
        1,0,0,0,1972,1977,3,176,88,0,1973,1977,3,182,91,0,1974,1977,3,190,
        95,0,1975,1977,3,186,93,0,1976,1940,1,0,0,0,1976,1941,1,0,0,0,1976,
        1942,1,0,0,0,1976,1943,1,0,0,0,1976,1944,1,0,0,0,1976,1945,1,0,0,
        0,1976,1946,1,0,0,0,1976,1947,1,0,0,0,1976,1948,1,0,0,0,1976,1949,
        1,0,0,0,1976,1950,1,0,0,0,1976,1951,1,0,0,0,1976,1958,1,0,0,0,1976,
        1965,1,0,0,0,1976,1972,1,0,0,0,1976,1973,1,0,0,0,1976,1974,1,0,0,
        0,1976,1975,1,0,0,0,1977,143,1,0,0,0,1978,1982,3,148,74,0,1979,1982,
        3,174,87,0,1980,1982,3,146,73,0,1981,1978,1,0,0,0,1981,1979,1,0,
        0,0,1981,1980,1,0,0,0,1982,145,1,0,0,0,1983,1984,3,184,92,0,1984,
        1988,5,36,0,0,1985,1987,5,131,0,0,1986,1985,1,0,0,0,1987,1990,1,
        0,0,0,1988,1986,1,0,0,0,1988,1989,1,0,0,0,1989,1991,1,0,0,0,1990,
        1988,1,0,0,0,1991,1992,3,184,92,0,1992,147,1,0,0,0,1993,1997,5,51,
        0,0,1994,1996,5,131,0,0,1995,1994,1,0,0,0,1996,1999,1,0,0,0,1997,
        1995,1,0,0,0,1997,1998,1,0,0,0,1998,2016,1,0,0,0,1999,1997,1,0,0,
        0,2000,2004,5,35,0,0,2001,2003,5,131,0,0,2002,2001,1,0,0,0,2003,
        2006,1,0,0,0,2004,2002,1,0,0,0,2004,2005,1,0,0,0,2005,2016,1,0,0,
        0,2006,2004,1,0,0,0,2007,2011,5,58,0,0,2008,2010,5,131,0,0,2009,
        2008,1,0,0,0,2010,2013,1,0,0,0,2011,2009,1,0,0,0,2011,2012,1,0,0,
        0,2012,2016,1,0,0,0,2013,2011,1,0,0,0,2014,2016,3,184,92,0,2015,
        1993,1,0,0,0,2015,2000,1,0,0,0,2015,2007,1,0,0,0,2015,2014,1,0,0,
        0,2016,2047,1,0,0,0,2017,2021,5,22,0,0,2018,2020,5,131,0,0,2019,
        2018,1,0,0,0,2020,2023,1,0,0,0,2021,2019,1,0,0,0,2021,2022,1,0,0,
        0,2022,2025,1,0,0,0,2023,2021,1,0,0,0,2024,2026,3,144,72,0,2025,
        2024,1,0,0,0,2025,2026,1,0,0,0,2026,2037,1,0,0,0,2027,2031,5,15,
        0,0,2028,2030,5,131,0,0,2029,2028,1,0,0,0,2030,2033,1,0,0,0,2031,
        2029,1,0,0,0,2031,2032,1,0,0,0,2032,2034,1,0,0,0,2033,2031,1,0,0,
        0,2034,2036,3,144,72,0,2035,2027,1,0,0,0,2036,2039,1,0,0,0,2037,
        2035,1,0,0,0,2037,2038,1,0,0,0,2038,2040,1,0,0,0,2039,2037,1,0,0,
        0,2040,2044,5,23,0,0,2041,2043,5,131,0,0,2042,2041,1,0,0,0,2043,
        2046,1,0,0,0,2044,2042,1,0,0,0,2044,2045,1,0,0,0,2045,2048,1,0,0,
        0,2046,2044,1,0,0,0,2047,2017,1,0,0,0,2047,2048,1,0,0,0,2048,149,
        1,0,0,0,2049,2053,5,89,0,0,2050,2052,5,131,0,0,2051,2050,1,0,0,0,
        2052,2055,1,0,0,0,2053,2051,1,0,0,0,2053,2054,1,0,0,0,2054,2056,
        1,0,0,0,2055,2053,1,0,0,0,2056,2065,3,154,77,0,2057,2061,5,90,0,
        0,2058,2060,5,131,0,0,2059,2058,1,0,0,0,2060,2063,1,0,0,0,2061,2059,
        1,0,0,0,2061,2062,1,0,0,0,2062,2064,1,0,0,0,2063,2061,1,0,0,0,2064,
        2066,3,144,72,0,2065,2057,1,0,0,0,2065,2066,1,0,0,0,2066,151,1,0,
        0,0,2067,2068,3,154,77,0,2068,2072,5,90,0,0,2069,2071,5,131,0,0,
        2070,2069,1,0,0,0,2071,2074,1,0,0,0,2072,2070,1,0,0,0,2072,2073,
        1,0,0,0,2073,2075,1,0,0,0,2074,2072,1,0,0,0,2075,2076,3,144,72,0,
        2076,153,1,0,0,0,2077,2095,3,184,92,0,2078,2095,3,146,73,0,2079,
        2083,5,22,0,0,2080,2082,5,131,0,0,2081,2080,1,0,0,0,2082,2085,1,
        0,0,0,2083,2081,1,0,0,0,2083,2084,1,0,0,0,2084,2086,1,0,0,0,2085,
        2083,1,0,0,0,2086,2087,3,156,78,0,2087,2091,5,23,0,0,2088,2090,5,
        131,0,0,2089,2088,1,0,0,0,2090,2093,1,0,0,0,2091,2089,1,0,0,0,2091,
        2092,1,0,0,0,2092,2095,1,0,0,0,2093,2091,1,0,0,0,2094,2077,1,0,0,
        0,2094,2078,1,0,0,0,2094,2079,1,0,0,0,2095,155,1,0,0,0,2096,2107,
        3,184,92,0,2097,2101,5,15,0,0,2098,2100,5,131,0,0,2099,2098,1,0,
        0,0,2100,2103,1,0,0,0,2101,2099,1,0,0,0,2101,2102,1,0,0,0,2102,2104,
        1,0,0,0,2103,2101,1,0,0,0,2104,2106,3,184,92,0,2105,2097,1,0,0,0,
        2106,2109,1,0,0,0,2107,2105,1,0,0,0,2107,2108,1,0,0,0,2108,157,1,
        0,0,0,2109,2107,1,0,0,0,2110,2114,5,91,0,0,2111,2113,5,131,0,0,2112,
        2111,1,0,0,0,2113,2116,1,0,0,0,2114,2112,1,0,0,0,2114,2115,1,0,0,
        0,2115,2117,1,0,0,0,2116,2114,1,0,0,0,2117,2118,3,184,92,0,2118,
        159,1,0,0,0,2119,2120,3,184,92,0,2120,2124,5,62,0,0,2121,2123,5,
        131,0,0,2122,2121,1,0,0,0,2123,2126,1,0,0,0,2124,2122,1,0,0,0,2124,
        2125,1,0,0,0,2125,161,1,0,0,0,2126,2124,1,0,0,0,2127,2131,5,92,0,
        0,2128,2130,5,131,0,0,2129,2128,1,0,0,0,2130,2133,1,0,0,0,2131,2129,
        1,0,0,0,2131,2132,1,0,0,0,2132,2134,1,0,0,0,2133,2131,1,0,0,0,2134,
        2138,3,144,72,0,2135,2137,3,164,82,0,2136,2135,1,0,0,0,2137,2140,
        1,0,0,0,2138,2136,1,0,0,0,2138,2139,1,0,0,0,2139,163,1,0,0,0,2140,
        2138,1,0,0,0,2141,2145,5,93,0,0,2142,2144,5,131,0,0,2143,2142,1,
        0,0,0,2144,2147,1,0,0,0,2145,2143,1,0,0,0,2145,2146,1,0,0,0,2146,
        2148,1,0,0,0,2147,2145,1,0,0,0,2148,2149,3,174,87,0,2149,2150,3,
        140,70,0,2150,2160,1,0,0,0,2151,2155,5,94,0,0,2152,2154,5,131,0,
        0,2153,2152,1,0,0,0,2154,2157,1,0,0,0,2155,2153,1,0,0,0,2155,2156,
        1,0,0,0,2156,2158,1,0,0,0,2157,2155,1,0,0,0,2158,2160,3,140,70,0,
        2159,2141,1,0,0,0,2159,2151,1,0,0,0,2160,165,1,0,0,0,2161,2165,5,
        29,0,0,2162,2164,5,131,0,0,2163,2162,1,0,0,0,2164,2167,1,0,0,0,2165,
        2163,1,0,0,0,2165,2166,1,0,0,0,2166,2168,1,0,0,0,2167,2165,1,0,0,
        0,2168,2169,3,184,92,0,2169,2173,5,22,0,0,2170,2172,5,131,0,0,2171,
        2170,1,0,0,0,2172,2175,1,0,0,0,2173,2171,1,0,0,0,2173,2174,1,0,0,
        0,2174,2177,1,0,0,0,2175,2173,1,0,0,0,2176,2178,3,156,78,0,2177,
        2176,1,0,0,0,2177,2178,1,0,0,0,2178,2179,1,0,0,0,2179,2183,5,23,
        0,0,2180,2182,5,131,0,0,2181,2180,1,0,0,0,2182,2185,1,0,0,0,2183,
        2181,1,0,0,0,2183,2184,1,0,0,0,2184,2187,1,0,0,0,2185,2183,1,0,0,
        0,2186,2188,3,168,84,0,2187,2186,1,0,0,0,2187,2188,1,0,0,0,2188,
        2189,1,0,0,0,2189,2190,3,140,70,0,2190,167,1,0,0,0,2191,2195,5,95,
        0,0,2192,2194,5,131,0,0,2193,2192,1,0,0,0,2194,2197,1,0,0,0,2195,
        2193,1,0,0,0,2195,2196,1,0,0,0,2196,2198,1,0,0,0,2197,2195,1,0,0,
        0,2198,2199,3,156,78,0,2199,169,1,0,0,0,2200,2204,5,26,0,0,2201,
        2203,5,131,0,0,2202,2201,1,0,0,0,2203,2206,1,0,0,0,2204,2202,1,0,
        0,0,2204,2205,1,0,0,0,2205,2209,1,0,0,0,2206,2204,1,0,0,0,2207,2210,
        3,140,70,0,2208,2210,3,144,72,0,2209,2207,1,0,0,0,2209,2208,1,0,
        0,0,2210,2211,1,0,0,0,2211,2214,3,144,72,0,2212,2215,3,140,70,0,
        2213,2215,3,144,72,0,2214,2212,1,0,0,0,2214,2213,1,0,0,0,2215,2216,
        1,0,0,0,2216,2217,3,140,70,0,2217,171,1,0,0,0,2218,2222,5,42,0,0,
        2219,2221,5,131,0,0,2220,2219,1,0,0,0,2221,2224,1,0,0,0,2222,2220,
        1,0,0,0,2222,2223,1,0,0,0,2223,2225,1,0,0,0,2224,2222,1,0,0,0,2225,
        2226,3,144,72,0,2226,2227,3,140,70,0,2227,173,1,0,0,0,2228,2245,
        3,190,95,0,2229,2233,5,104,0,0,2230,2232,5,131,0,0,2231,2230,1,0,
        0,0,2232,2235,1,0,0,0,2233,2231,1,0,0,0,2233,2234,1,0,0,0,2234,2245,
        1,0,0,0,2235,2233,1,0,0,0,2236,2240,5,105,0,0,2237,2239,5,131,0,
        0,2238,2237,1,0,0,0,2239,2242,1,0,0,0,2240,2238,1,0,0,0,2240,2241,
        1,0,0,0,2241,2245,1,0,0,0,2242,2240,1,0,0,0,2243,2245,3,186,93,0,
        2244,2228,1,0,0,0,2244,2229,1,0,0,0,2244,2236,1,0,0,0,2244,2243,
        1,0,0,0,2245,175,1,0,0,0,2246,2250,5,49,0,0,2247,2249,5,131,0,0,
        2248,2247,1,0,0,0,2249,2252,1,0,0,0,2250,2248,1,0,0,0,2250,2251,
        1,0,0,0,2251,2253,1,0,0,0,2252,2250,1,0,0,0,2253,2254,3,184,92,0,
        2254,2255,3,140,70,0,2255,177,1,0,0,0,2256,2260,5,22,0,0,2257,2259,
        5,131,0,0,2258,2257,1,0,0,0,2259,2262,1,0,0,0,2260,2258,1,0,0,0,
        2260,2261,1,0,0,0,2261,2264,1,0,0,0,2262,2260,1,0,0,0,2263,2265,
        3,126,63,0,2264,2263,1,0,0,0,2264,2265,1,0,0,0,2265,2278,1,0,0,0,
        2266,2270,5,15,0,0,2267,2269,5,131,0,0,2268,2267,1,0,0,0,2269,2272,
        1,0,0,0,2270,2268,1,0,0,0,2270,2271,1,0,0,0,2271,2274,1,0,0,0,2272,
        2270,1,0,0,0,2273,2275,3,126,63,0,2274,2273,1,0,0,0,2274,2275,1,
        0,0,0,2275,2277,1,0,0,0,2276,2266,1,0,0,0,2277,2280,1,0,0,0,2278,
        2276,1,0,0,0,2278,2279,1,0,0,0,2279,2281,1,0,0,0,2280,2278,1,0,0,
        0,2281,2285,5,23,0,0,2282,2284,5,131,0,0,2283,2282,1,0,0,0,2284,
        2287,1,0,0,0,2285,2283,1,0,0,0,2285,2286,1,0,0,0,2286,2319,1,0,0,
        0,2287,2285,1,0,0,0,2288,2292,5,33,0,0,2289,2291,5,131,0,0,2290,
        2289,1,0,0,0,2291,2294,1,0,0,0,2292,2290,1,0,0,0,2292,2293,1,0,0,
        0,2293,2309,1,0,0,0,2294,2292,1,0,0,0,2295,2306,3,126,63,0,2296,
        2300,5,15,0,0,2297,2299,5,131,0,0,2298,2297,1,0,0,0,2299,2302,1,
        0,0,0,2300,2298,1,0,0,0,2300,2301,1,0,0,0,2301,2303,1,0,0,0,2302,
        2300,1,0,0,0,2303,2305,3,126,63,0,2304,2296,1,0,0,0,2305,2308,1,
        0,0,0,2306,2304,1,0,0,0,2306,2307,1,0,0,0,2307,2310,1,0,0,0,2308,
        2306,1,0,0,0,2309,2295,1,0,0,0,2309,2310,1,0,0,0,2310,2311,1,0,0,
        0,2311,2315,5,34,0,0,2312,2314,5,131,0,0,2313,2312,1,0,0,0,2314,
        2317,1,0,0,0,2315,2313,1,0,0,0,2315,2316,1,0,0,0,2316,2319,1,0,0,
        0,2317,2315,1,0,0,0,2318,2256,1,0,0,0,2318,2288,1,0,0,0,2319,179,
        1,0,0,0,2320,2323,3,124,62,0,2321,2323,3,70,35,0,2322,2320,1,0,0,
        0,2322,2321,1,0,0,0,2323,181,1,0,0,0,2324,2328,5,104,0,0,2325,2327,
        5,131,0,0,2326,2325,1,0,0,0,2327,2330,1,0,0,0,2328,2326,1,0,0,0,
        2328,2329,1,0,0,0,2329,2339,1,0,0,0,2330,2328,1,0,0,0,2331,2335,
        5,105,0,0,2332,2334,5,131,0,0,2333,2332,1,0,0,0,2334,2337,1,0,0,
        0,2335,2333,1,0,0,0,2335,2336,1,0,0,0,2336,2339,1,0,0,0,2337,2335,
        1,0,0,0,2338,2324,1,0,0,0,2338,2331,1,0,0,0,2339,2347,1,0,0,0,2340,
        2344,5,106,0,0,2341,2343,5,131,0,0,2342,2341,1,0,0,0,2343,2346,1,
        0,0,0,2344,2342,1,0,0,0,2344,2345,1,0,0,0,2345,2348,1,0,0,0,2346,
        2344,1,0,0,0,2347,2340,1,0,0,0,2347,2348,1,0,0,0,2348,183,1,0,0,
        0,2349,2353,7,13,0,0,2350,2352,5,131,0,0,2351,2350,1,0,0,0,2352,
        2355,1,0,0,0,2353,2351,1,0,0,0,2353,2354,1,0,0,0,2354,185,1,0,0,
        0,2355,2353,1,0,0,0,2356,2360,5,107,0,0,2357,2359,5,131,0,0,2358,
        2357,1,0,0,0,2359,2362,1,0,0,0,2360,2358,1,0,0,0,2360,2361,1,0,0,
        0,2361,2364,1,0,0,0,2362,2360,1,0,0,0,2363,2356,1,0,0,0,2364,2365,
        1,0,0,0,2365,2363,1,0,0,0,2365,2366,1,0,0,0,2366,187,1,0,0,0,2367,
        2371,5,97,0,0,2368,2370,5,131,0,0,2369,2368,1,0,0,0,2370,2373,1,
        0,0,0,2371,2369,1,0,0,0,2371,2372,1,0,0,0,2372,2402,1,0,0,0,2373,
        2371,1,0,0,0,2374,2378,5,22,0,0,2375,2377,5,131,0,0,2376,2375,1,
        0,0,0,2377,2380,1,0,0,0,2378,2376,1,0,0,0,2378,2379,1,0,0,0,2379,
        2381,1,0,0,0,2380,2378,1,0,0,0,2381,2392,3,70,35,0,2382,2386,5,15,
        0,0,2383,2385,5,131,0,0,2384,2383,1,0,0,0,2385,2388,1,0,0,0,2386,
        2384,1,0,0,0,2386,2387,1,0,0,0,2387,2389,1,0,0,0,2388,2386,1,0,0,
        0,2389,2391,3,70,35,0,2390,2382,1,0,0,0,2391,2394,1,0,0,0,2392,2390,
        1,0,0,0,2392,2393,1,0,0,0,2393,2395,1,0,0,0,2394,2392,1,0,0,0,2395,
        2399,5,23,0,0,2396,2398,5,131,0,0,2397,2396,1,0,0,0,2398,2401,1,
        0,0,0,2399,2397,1,0,0,0,2399,2400,1,0,0,0,2400,2403,1,0,0,0,2401,
        2399,1,0,0,0,2402,2374,1,0,0,0,2402,2403,1,0,0,0,2403,189,1,0,0,
        0,2404,2408,5,129,0,0,2405,2407,5,131,0,0,2406,2405,1,0,0,0,2407,
        2410,1,0,0,0,2408,2406,1,0,0,0,2408,2409,1,0,0,0,2409,2412,1,0,0,
        0,2410,2408,1,0,0,0,2411,2404,1,0,0,0,2412,2413,1,0,0,0,2413,2411,
        1,0,0,0,2413,2414,1,0,0,0,2414,191,1,0,0,0,2415,2419,5,48,0,0,2416,
        2418,5,131,0,0,2417,2416,1,0,0,0,2418,2421,1,0,0,0,2419,2417,1,0,
        0,0,2419,2420,1,0,0,0,2420,2428,1,0,0,0,2421,2419,1,0,0,0,2422,2424,
        5,131,0,0,2423,2422,1,0,0,0,2424,2425,1,0,0,0,2425,2423,1,0,0,0,
        2425,2426,1,0,0,0,2426,2428,1,0,0,0,2427,2415,1,0,0,0,2427,2423,
        1,0,0,0,2428,193,1,0,0,0,349,197,208,210,220,223,231,242,249,252,
        257,264,268,274,278,284,287,294,298,304,312,316,324,331,335,341,
        345,351,361,368,376,382,389,396,402,410,413,419,427,435,441,444,
        450,456,463,471,475,481,484,494,501,508,515,522,529,533,535,543,
        547,556,564,574,585,593,600,604,612,620,630,633,639,646,651,657,
        661,663,668,675,679,685,688,694,698,704,708,714,721,728,731,737,
        746,753,760,767,774,780,782,789,798,801,811,819,823,829,835,842,
        849,857,863,866,872,877,880,886,894,900,903,909,917,920,923,929,
        937,943,946,952,957,961,974,981,984,991,995,1001,1006,1014,1020,
        1025,1031,1038,1046,1054,1061,1069,1076,1080,1082,1089,1093,1099,
        1106,1113,1119,1126,1144,1153,1160,1168,1176,1180,1186,1191,1197,
        1203,1207,1210,1218,1225,1233,1240,1246,1255,1262,1270,1273,1280,
        1283,1286,1292,1301,1308,1311,1319,1327,1334,1342,1357,1361,1372,
        1382,1392,1401,1409,1412,1418,1422,1427,1433,1437,1441,1448,1452,
        1458,1463,1467,1473,1480,1488,1496,1504,1511,1519,1527,1535,1543,
        1548,1555,1564,1573,1582,1591,1600,1609,1618,1627,1636,1645,1654,
        1662,1672,1681,1689,1697,1705,1709,1715,1719,1725,1733,1742,1750,
        1758,1766,1769,1771,1778,1789,1796,1799,1805,1812,1821,1828,1831,
        1833,1840,1846,1854,1860,1867,1870,1877,1886,1890,1896,1900,1902,
        1909,1917,1924,1930,1937,1955,1962,1969,1976,1981,1988,1997,2004,
        2011,2015,2021,2025,2031,2037,2044,2047,2053,2061,2065,2072,2083,
        2091,2094,2101,2107,2114,2124,2131,2138,2145,2155,2159,2165,2173,
        2177,2183,2187,2195,2204,2209,2214,2222,2233,2240,2244,2250,2260,
        2264,2270,2274,2278,2285,2292,2300,2306,2309,2315,2318,2322,2328,
        2335,2338,2344,2347,2353,2360,2365,2371,2378,2386,2392,2399,2402,
        2408,2413,2419,2425,2427
    ]

class SolidityParser ( Parser ):

    grammarFileName = "Solidity.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'pragma'", "'||'", "'^'", "'~'", "'>='", 
                     "'>'", "'<'", "'<='", "'='", "'as'", "'import'", "'*'", 
                     "'from'", "'{'", "','", "'}'", "'abstract'", "'contract'", 
                     "'interface'", "'library'", "'is'", "'('", "')'", "'error'", 
                     "'using'", "'for'", "'struct'", "'modifier'", "'function'", 
                     "'returns'", "'event'", "'enum'", "'['", "']'", "'address'", 
                     "'.'", "'mapping'", "'=>'", "'memory'", "'storage'", 
                     "'calldata'", "'if'", "'else'", "'try'", "'catch'", 
                     "'while'", "'unchecked'", "';'", "'assembly'", "'do'", 
                     "'return'", "'throw'", "'emit'", "'revert'", "'var'", 
                     "'bool'", "'string'", "'byte'", "'++'", "'--'", "'new'", 
                     "':'", "'+'", "'-'", "'after'", "'delete'", "'!'", 
                     "'**'", "'/'", "'%'", "'<<'", "'>>'", "'&'", "'|'", 
                     "'=='", "'!='", "'&&'", "'?'", "'|='", "'^='", "'&='", 
                     "'<<='", "'>>='", "'+='", "'-='", "'*='", "'/='", "'%='", 
                     "'let'", "':='", "'=:'", "'switch'", "'case'", "'default'", 
                     "'->'", "'callback'", "'override'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'anonymous'", "'break'", "'constant'", 
                     "'immutable'", "'continue'", "'leave'", "'external'", 
                     "'indexed'", "'internal'", "'payable'", "'private'", 
                     "'public'", "'virtual'", "'pure'", "'type'", "'view'", 
                     "'constructor'", "'fallback'", "'receive'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "Int", "Uint", "Byte", "Fixed", 
                      "Ufixed", "BooleanLiteral", "DecimalNumber", "HexNumber", 
                      "NumberUnit", "HexLiteralFragment", "ReservedKeyword", 
                      "AnonymousKeyword", "BreakKeyword", "ConstantKeyword", 
                      "ImmutableKeyword", "ContinueKeyword", "LeaveKeyword", 
                      "ExternalKeyword", "IndexedKeyword", "InternalKeyword", 
                      "PayableKeyword", "PrivateKeyword", "PublicKeyword", 
                      "VirtualKeyword", "PureKeyword", "TypeKeyword", "ViewKeyword", 
                      "ConstructorKeyword", "FallbackKeyword", "ReceiveKeyword", 
                      "Identifier", "StringLiteralFragment", "VersionLiteral", 
                      "NL", "WS", "COMMENT", "LINE_COMMENT" ]

    RULE_sourceUnit = 0
    RULE_pragmaDirective = 1
    RULE_pragmaName = 2
    RULE_pragmaValue = 3
    RULE_version = 4
    RULE_versionOperator = 5
    RULE_versionConstraint = 6
    RULE_importDeclaration = 7
    RULE_importDirective = 8
    RULE_importPath = 9
    RULE_contractDefinition = 10
    RULE_inheritanceSpecifier = 11
    RULE_contractPart = 12
    RULE_stateVariableDeclaration = 13
    RULE_fileLevelConstant = 14
    RULE_customErrorDefinition = 15
    RULE_usingForDeclaration = 16
    RULE_structDefinition = 17
    RULE_modifierDefinition = 18
    RULE_modifierInvocation = 19
    RULE_functionDefinition = 20
    RULE_functionDescriptor = 21
    RULE_returnParameters = 22
    RULE_modifierList = 23
    RULE_eventDefinition = 24
    RULE_enumValue = 25
    RULE_enumDefinition = 26
    RULE_parameterList = 27
    RULE_parameter = 28
    RULE_eventParameterList = 29
    RULE_eventParameter = 30
    RULE_functionTypeParameterList = 31
    RULE_functionTypeParameter = 32
    RULE_variableDeclaration = 33
    RULE_typeName = 34
    RULE_userDefinedTypeName = 35
    RULE_mappingKey = 36
    RULE_mapping = 37
    RULE_functionTypeName = 38
    RULE_storageLocation = 39
    RULE_stateMutability = 40
    RULE_block = 41
    RULE_statement = 42
    RULE_expressionStatement = 43
    RULE_ifStatement = 44
    RULE_tryStatement = 45
    RULE_catchClause = 46
    RULE_whileStatement = 47
    RULE_simpleStatement = 48
    RULE_uncheckedStatement = 49
    RULE_forStatement = 50
    RULE_inlineAssemblyStatement = 51
    RULE_doWhileStatement = 52
    RULE_continueStatement = 53
    RULE_breakStatement = 54
    RULE_returnStatement = 55
    RULE_throwStatement = 56
    RULE_emitStatement = 57
    RULE_revertStatement = 58
    RULE_variableDeclarationStatement = 59
    RULE_variableDeclarationList = 60
    RULE_identifierList = 61
    RULE_elementaryTypeName = 62
    RULE_expression = 63
    RULE_primaryExpression = 64
    RULE_expressionList = 65
    RULE_nameValueList = 66
    RULE_nameValue = 67
    RULE_functionCallArguments = 68
    RULE_functionCall = 69
    RULE_assemblyBlock = 70
    RULE_assemblyItem = 71
    RULE_assemblyExpression = 72
    RULE_assemblyMember = 73
    RULE_assemblyCall = 74
    RULE_assemblyLocalDefinition = 75
    RULE_assemblyAssignment = 76
    RULE_assemblyIdentifierOrList = 77
    RULE_assemblyIdentifierList = 78
    RULE_assemblyStackAssignment = 79
    RULE_labelDefinition = 80
    RULE_assemblySwitch = 81
    RULE_assemblyCase = 82
    RULE_assemblyFunctionDefinition = 83
    RULE_assemblyFunctionReturns = 84
    RULE_assemblyFor = 85
    RULE_assemblyIf = 86
    RULE_assemblyLiteral = 87
    RULE_subAssembly = 88
    RULE_tupleExpression = 89
    RULE_typeNameExpression = 90
    RULE_numberLiteral = 91
    RULE_identifier = 92
    RULE_hexLiteral = 93
    RULE_overrideSpecifier = 94
    RULE_stringLiteral = 95
    RULE_eos = 96

    ruleNames =  [ "sourceUnit", "pragmaDirective", "pragmaName", "pragmaValue", 
                   "version", "versionOperator", "versionConstraint", "importDeclaration", 
                   "importDirective", "importPath", "contractDefinition", 
                   "inheritanceSpecifier", "contractPart", "stateVariableDeclaration", 
                   "fileLevelConstant", "customErrorDefinition", "usingForDeclaration", 
                   "structDefinition", "modifierDefinition", "modifierInvocation", 
                   "functionDefinition", "functionDescriptor", "returnParameters", 
                   "modifierList", "eventDefinition", "enumValue", "enumDefinition", 
                   "parameterList", "parameter", "eventParameterList", "eventParameter", 
                   "functionTypeParameterList", "functionTypeParameter", 
                   "variableDeclaration", "typeName", "userDefinedTypeName", 
                   "mappingKey", "mapping", "functionTypeName", "storageLocation", 
                   "stateMutability", "block", "statement", "expressionStatement", 
                   "ifStatement", "tryStatement", "catchClause", "whileStatement", 
                   "simpleStatement", "uncheckedStatement", "forStatement", 
                   "inlineAssemblyStatement", "doWhileStatement", "continueStatement", 
                   "breakStatement", "returnStatement", "throwStatement", 
                   "emitStatement", "revertStatement", "variableDeclarationStatement", 
                   "variableDeclarationList", "identifierList", "elementaryTypeName", 
                   "expression", "primaryExpression", "expressionList", 
                   "nameValueList", "nameValue", "functionCallArguments", 
                   "functionCall", "assemblyBlock", "assemblyItem", "assemblyExpression", 
                   "assemblyMember", "assemblyCall", "assemblyLocalDefinition", 
                   "assemblyAssignment", "assemblyIdentifierOrList", "assemblyIdentifierList", 
                   "assemblyStackAssignment", "labelDefinition", "assemblySwitch", 
                   "assemblyCase", "assemblyFunctionDefinition", "assemblyFunctionReturns", 
                   "assemblyFor", "assemblyIf", "assemblyLiteral", "subAssembly", 
                   "tupleExpression", "typeNameExpression", "numberLiteral", 
                   "identifier", "hexLiteral", "overrideSpecifier", "stringLiteral", 
                   "eos" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    T__45=46
    T__46=47
    T__47=48
    T__48=49
    T__49=50
    T__50=51
    T__51=52
    T__52=53
    T__53=54
    T__54=55
    T__55=56
    T__56=57
    T__57=58
    T__58=59
    T__59=60
    T__60=61
    T__61=62
    T__62=63
    T__63=64
    T__64=65
    T__65=66
    T__66=67
    T__67=68
    T__68=69
    T__69=70
    T__70=71
    T__71=72
    T__72=73
    T__73=74
    T__74=75
    T__75=76
    T__76=77
    T__77=78
    T__78=79
    T__79=80
    T__80=81
    T__81=82
    T__82=83
    T__83=84
    T__84=85
    T__85=86
    T__86=87
    T__87=88
    T__88=89
    T__89=90
    T__90=91
    T__91=92
    T__92=93
    T__93=94
    T__94=95
    T__95=96
    T__96=97
    Int=98
    Uint=99
    Byte=100
    Fixed=101
    Ufixed=102
    BooleanLiteral=103
    DecimalNumber=104
    HexNumber=105
    NumberUnit=106
    HexLiteralFragment=107
    ReservedKeyword=108
    AnonymousKeyword=109
    BreakKeyword=110
    ConstantKeyword=111
    ImmutableKeyword=112
    ContinueKeyword=113
    LeaveKeyword=114
    ExternalKeyword=115
    IndexedKeyword=116
    InternalKeyword=117
    PayableKeyword=118
    PrivateKeyword=119
    PublicKeyword=120
    VirtualKeyword=121
    PureKeyword=122
    TypeKeyword=123
    ViewKeyword=124
    ConstructorKeyword=125
    FallbackKeyword=126
    ReceiveKeyword=127
    Identifier=128
    StringLiteralFragment=129
    VersionLiteral=130
    NL=131
    WS=132
    COMMENT=133
    LINE_COMMENT=134

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.12.0")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class SourceUnitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(SolidityParser.EOF, 0)

        def functionDefinition(self):
            return self.getTypedRuleContext(SolidityParser.FunctionDefinitionContext,0)


        def expressionStatement(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionStatementContext,0)


        def stateVariableDeclaration(self):
            return self.getTypedRuleContext(SolidityParser.StateVariableDeclarationContext,0)


        def block(self):
            return self.getTypedRuleContext(SolidityParser.BlockContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.NL)
            else:
                return self.getToken(SolidityParser.NL, i)

        def pragmaDirective(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.PragmaDirectiveContext)
            else:
                return self.getTypedRuleContext(SolidityParser.PragmaDirectiveContext,i)


        def importDirective(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ImportDirectiveContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ImportDirectiveContext,i)


        def contractDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ContractDefinitionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ContractDefinitionContext,i)


        def enumDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.EnumDefinitionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.EnumDefinitionContext,i)


        def structDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.StructDefinitionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.StructDefinitionContext,i)


        def contractPart(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ContractPartContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ContractPartContext,i)


        def fileLevelConstant(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.FileLevelConstantContext)
            else:
                return self.getTypedRuleContext(SolidityParser.FileLevelConstantContext,i)


        def customErrorDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.CustomErrorDefinitionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.CustomErrorDefinitionContext,i)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.StatementContext)
            else:
                return self.getTypedRuleContext(SolidityParser.StatementContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_sourceUnit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSourceUnit" ):
                listener.enterSourceUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSourceUnit" ):
                listener.exitSourceUnit(self)




    def sourceUnit(self):

        localctx = SolidityParser.SourceUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_sourceUnit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 197
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 194
                self.match(SolidityParser.NL)
                self.state = 199
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 223
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
            if la_ == 1:
                self.state = 210
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & 558448732050171906) != 0) or ((((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & 8057520253) != 0):
                    self.state = 208
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
                    if la_ == 1:
                        self.state = 200
                        self.pragmaDirective()
                        pass

                    elif la_ == 2:
                        self.state = 201
                        self.importDirective()
                        pass

                    elif la_ == 3:
                        self.state = 202
                        self.contractDefinition()
                        pass

                    elif la_ == 4:
                        self.state = 203
                        self.enumDefinition()
                        pass

                    elif la_ == 5:
                        self.state = 204
                        self.structDefinition()
                        pass

                    elif la_ == 6:
                        self.state = 205
                        self.contractPart()
                        pass

                    elif la_ == 7:
                        self.state = 206
                        self.fileLevelConstant()
                        pass

                    elif la_ == 8:
                        self.state = 207
                        self.customErrorDefinition()
                        pass


                    self.state = 212
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 213
                self.functionDefinition()
                pass

            elif la_ == 3:
                self.state = 214
                self.expressionStatement()
                pass

            elif la_ == 4:
                self.state = 215
                self.stateVariableDeclaration()
                pass

            elif la_ == 5:
                self.state = 216
                self.block()
                pass

            elif la_ == 6:
                self.state = 220
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 4)) & ~0x3f) == 0 and ((1 << (_la - 4)) & -288250843242428927) != 0) or ((((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & 15708081149) != 0):
                    self.state = 217
                    self.statement()
                    self.state = 222
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 225
            self.match(SolidityParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PragmaDirectiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pragmaName(self):
            return self.getTypedRuleContext(SolidityParser.PragmaNameContext,0)


        def pragmaValue(self):
            return self.getTypedRuleContext(SolidityParser.PragmaValueContext,0)


        def eos(self):
            return self.getTypedRuleContext(SolidityParser.EosContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.NL)
            else:
                return self.getToken(SolidityParser.NL, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_pragmaDirective

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragmaDirective" ):
                listener.enterPragmaDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragmaDirective" ):
                listener.exitPragmaDirective(self)




    def pragmaDirective(self):

        localctx = SolidityParser.PragmaDirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_pragmaDirective)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 227
            self.match(SolidityParser.T__0)
            self.state = 231
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 228
                self.match(SolidityParser.NL)
                self.state = 233
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 234
            self.pragmaName()
            self.state = 235
            self.pragmaValue()
            self.state = 236
            self.eos()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PragmaNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_pragmaName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragmaName" ):
                listener.enterPragmaName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragmaName" ):
                listener.exitPragmaName(self)




    def pragmaName(self):

        localctx = SolidityParser.PragmaNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_pragmaName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 238
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PragmaValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def version(self):
            return self.getTypedRuleContext(SolidityParser.VersionContext,0)


        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_pragmaValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragmaValue" ):
                listener.enterPragmaValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragmaValue" ):
                listener.exitPragmaValue(self)




    def pragmaValue(self):

        localctx = SolidityParser.PragmaValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_pragmaValue)
        try:
            self.state = 242
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 240
                self.version()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 241
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VersionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def versionConstraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.VersionConstraintContext)
            else:
                return self.getTypedRuleContext(SolidityParser.VersionConstraintContext,i)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.NL)
            else:
                return self.getToken(SolidityParser.NL, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_version

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVersion" ):
                listener.enterVersion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVersion" ):
                listener.exitVersion(self)




    def version(self):

        localctx = SolidityParser.VersionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_version)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 244
            self.versionConstraint()
            self.state = 257
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 1020) != 0) or _la==104 or _la==130:
                self.state = 252
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==2:
                    self.state = 245
                    self.match(SolidityParser.T__1)
                    self.state = 249
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==131:
                        self.state = 246
                        self.match(SolidityParser.NL)
                        self.state = 251
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 254
                self.versionConstraint()
                self.state = 259
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VersionOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.NL)
            else:
                return self.getToken(SolidityParser.NL, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_versionOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVersionOperator" ):
                listener.enterVersionOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVersionOperator" ):
                listener.exitVersionOperator(self)




    def versionOperator(self):

        localctx = SolidityParser.VersionOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_versionOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 260
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 1016) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 264
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 261
                self.match(SolidityParser.NL)
                self.state = 266
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VersionConstraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VersionLiteral(self):
            return self.getToken(SolidityParser.VersionLiteral, 0)

        def versionOperator(self):
            return self.getTypedRuleContext(SolidityParser.VersionOperatorContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.NL)
            else:
                return self.getToken(SolidityParser.NL, i)

        def DecimalNumber(self):
            return self.getToken(SolidityParser.DecimalNumber, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_versionConstraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVersionConstraint" ):
                listener.enterVersionConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVersionConstraint" ):
                listener.exitVersionConstraint(self)




    def versionConstraint(self):

        localctx = SolidityParser.VersionConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_versionConstraint)
        self._la = 0 # Token type
        try:
            self.state = 287
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 268
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1016) != 0):
                    self.state = 267
                    self.versionOperator()


                self.state = 270
                self.match(SolidityParser.VersionLiteral)
                self.state = 274
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,12,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 271
                        self.match(SolidityParser.NL) 
                    self.state = 276
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,12,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 278
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1016) != 0):
                    self.state = 277
                    self.versionOperator()


                self.state = 280
                self.match(SolidityParser.DecimalNumber)
                self.state = 284
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,14,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 281
                        self.match(SolidityParser.NL) 
                    self.state = 286
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,14,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.IdentifierContext,i)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.NL)
            else:
                return self.getToken(SolidityParser.NL, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_importDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportDeclaration" ):
                listener.enterImportDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportDeclaration" ):
                listener.exitImportDeclaration(self)




    def importDeclaration(self):

        localctx = SolidityParser.ImportDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_importDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 289
            self.identifier()
            self.state = 298
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 290
                self.match(SolidityParser.T__9)
                self.state = 294
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 291
                    self.match(SolidityParser.NL)
                    self.state = 296
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 297
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportDirectiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def importPath(self):
            return self.getTypedRuleContext(SolidityParser.ImportPathContext,0)


        def eos(self):
            return self.getTypedRuleContext(SolidityParser.EosContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.NL)
            else:
                return self.getToken(SolidityParser.NL, i)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.IdentifierContext,i)


        def importDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ImportDeclarationContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ImportDeclarationContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_importDirective

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportDirective" ):
                listener.enterImportDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportDirective" ):
                listener.exitImportDirective(self)




    def importDirective(self):

        localctx = SolidityParser.ImportDirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_importDirective)
        self._la = 0 # Token type
        try:
            self.state = 402
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 300
                self.match(SolidityParser.T__10)
                self.state = 304
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 301
                    self.match(SolidityParser.NL)
                    self.state = 306
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 307
                self.importPath()
                self.state = 316
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==10:
                    self.state = 308
                    self.match(SolidityParser.T__9)
                    self.state = 312
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==131:
                        self.state = 309
                        self.match(SolidityParser.NL)
                        self.state = 314
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 315
                    self.identifier()


                self.state = 318
                self.eos()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 320
                self.match(SolidityParser.T__10)
                self.state = 324
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 321
                    self.match(SolidityParser.NL)
                    self.state = 326
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 335
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [12]:
                    self.state = 327
                    self.match(SolidityParser.T__11)
                    self.state = 331
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==131:
                        self.state = 328
                        self.match(SolidityParser.NL)
                        self.state = 333
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [13, 24, 41, 54, 96, 114, 118, 125, 127, 128]:
                    self.state = 334
                    self.identifier()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 345
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==10:
                    self.state = 337
                    self.match(SolidityParser.T__9)
                    self.state = 341
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==131:
                        self.state = 338
                        self.match(SolidityParser.NL)
                        self.state = 343
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 344
                    self.identifier()


                self.state = 347
                self.match(SolidityParser.T__12)
                self.state = 351
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 348
                    self.match(SolidityParser.NL)
                    self.state = 353
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 354
                self.importPath()
                self.state = 355
                self.eos()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 357
                self.match(SolidityParser.T__10)
                self.state = 361
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 358
                    self.match(SolidityParser.NL)
                    self.state = 363
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 364
                self.match(SolidityParser.T__13)
                self.state = 368
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 365
                    self.match(SolidityParser.NL)
                    self.state = 370
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 371
                self.importDeclaration()
                self.state = 382
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==15:
                    self.state = 372
                    self.match(SolidityParser.T__14)
                    self.state = 376
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==131:
                        self.state = 373
                        self.match(SolidityParser.NL)
                        self.state = 378
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 379
                    self.importDeclaration()
                    self.state = 384
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 385
                self.match(SolidityParser.T__15)
                self.state = 389
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 386
                    self.match(SolidityParser.NL)
                    self.state = 391
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 392
                self.match(SolidityParser.T__12)
                self.state = 396
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 393
                    self.match(SolidityParser.NL)
                    self.state = 398
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 399
                self.importPath()
                self.state = 400
                self.eos()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLiteralFragment(self):
            return self.getToken(SolidityParser.StringLiteralFragment, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_importPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportPath" ):
                listener.enterImportPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportPath" ):
                listener.exitImportPath(self)




    def importPath(self):

        localctx = SolidityParser.ImportPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_importPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 404
            self.match(SolidityParser.StringLiteralFragment)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContractDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.NL)
            else:
                return self.getToken(SolidityParser.NL, i)

        def inheritanceSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.InheritanceSpecifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.InheritanceSpecifierContext,i)


        def contractPart(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ContractPartContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ContractPartContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_contractDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContractDefinition" ):
                listener.enterContractDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContractDefinition" ):
                listener.exitContractDefinition(self)




    def contractDefinition(self):

        localctx = SolidityParser.ContractDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_contractDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 413
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17:
                self.state = 406
                self.match(SolidityParser.T__16)
                self.state = 410
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 407
                    self.match(SolidityParser.NL)
                    self.state = 412
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 415
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 1835008) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 419
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 416
                self.match(SolidityParser.NL)
                self.state = 421
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 422
            self.identifier()
            self.state = 444
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==21:
                self.state = 423
                self.match(SolidityParser.T__20)
                self.state = 427
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 424
                    self.match(SolidityParser.NL)
                    self.state = 429
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 430
                self.inheritanceSpecifier()
                self.state = 441
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==15:
                    self.state = 431
                    self.match(SolidityParser.T__14)
                    self.state = 435
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==131:
                        self.state = 432
                        self.match(SolidityParser.NL)
                        self.state = 437
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 438
                    self.inheritanceSpecifier()
                    self.state = 443
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 446
            self.match(SolidityParser.T__13)
            self.state = 450
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 447
                self.match(SolidityParser.NL)
                self.state = 452
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 456
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 558448732048203776) != 0) or ((((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & 8057520253) != 0):
                self.state = 453
                self.contractPart()
                self.state = 458
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 459
            self.match(SolidityParser.T__15)
            self.state = 463
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 460
                self.match(SolidityParser.NL)
                self.state = 465
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InheritanceSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def userDefinedTypeName(self):
            return self.getTypedRuleContext(SolidityParser.UserDefinedTypeNameContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.NL)
            else:
                return self.getToken(SolidityParser.NL, i)

        def expressionList(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_inheritanceSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInheritanceSpecifier" ):
                listener.enterInheritanceSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInheritanceSpecifier" ):
                listener.exitInheritanceSpecifier(self)




    def inheritanceSpecifier(self):

        localctx = SolidityParser.InheritanceSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_inheritanceSpecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 466
            self.userDefinedTypeName()
            self.state = 484
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==22:
                self.state = 467
                self.match(SolidityParser.T__21)
                self.state = 471
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 468
                    self.match(SolidityParser.NL)
                    self.state = 473
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 475
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 4)) & ~0x3f) == 0 and ((1 << (_la - 4)) & -289356135933935103) != 0) or ((((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & 15707933693) != 0):
                    self.state = 474
                    self.expressionList()


                self.state = 477
                self.match(SolidityParser.T__22)
                self.state = 481
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 478
                    self.match(SolidityParser.NL)
                    self.state = 483
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContractPartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stateVariableDeclaration(self):
            return self.getTypedRuleContext(SolidityParser.StateVariableDeclarationContext,0)


        def usingForDeclaration(self):
            return self.getTypedRuleContext(SolidityParser.UsingForDeclarationContext,0)


        def structDefinition(self):
            return self.getTypedRuleContext(SolidityParser.StructDefinitionContext,0)


        def modifierDefinition(self):
            return self.getTypedRuleContext(SolidityParser.ModifierDefinitionContext,0)


        def functionDefinition(self):
            return self.getTypedRuleContext(SolidityParser.FunctionDefinitionContext,0)


        def eventDefinition(self):
            return self.getTypedRuleContext(SolidityParser.EventDefinitionContext,0)


        def enumDefinition(self):
            return self.getTypedRuleContext(SolidityParser.EnumDefinitionContext,0)


        def customErrorDefinition(self):
            return self.getTypedRuleContext(SolidityParser.CustomErrorDefinitionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_contractPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContractPart" ):
                listener.enterContractPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContractPart" ):
                listener.exitContractPart(self)




    def contractPart(self):

        localctx = SolidityParser.ContractPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_contractPart)
        try:
            self.state = 494
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 486
                self.stateVariableDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 487
                self.usingForDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 488
                self.structDefinition()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 489
                self.modifierDefinition()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 490
                self.functionDefinition()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 491
                self.eventDefinition()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 492
                self.enumDefinition()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 493
                self.customErrorDefinition()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StateVariableDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def eos(self):
            return self.getTypedRuleContext(SolidityParser.EosContext,0)


        def PublicKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.PublicKeyword)
            else:
                return self.getToken(SolidityParser.PublicKeyword, i)

        def InternalKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.InternalKeyword)
            else:
                return self.getToken(SolidityParser.InternalKeyword, i)

        def PrivateKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.PrivateKeyword)
            else:
                return self.getToken(SolidityParser.PrivateKeyword, i)

        def ConstantKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.ConstantKeyword)
            else:
                return self.getToken(SolidityParser.ConstantKeyword, i)

        def ImmutableKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.ImmutableKeyword)
            else:
                return self.getToken(SolidityParser.ImmutableKeyword, i)

        def overrideSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.OverrideSpecifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.OverrideSpecifierContext,i)


        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.NL)
            else:
                return self.getToken(SolidityParser.NL, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_stateVariableDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStateVariableDeclaration" ):
                listener.enterStateVariableDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStateVariableDeclaration" ):
                listener.exitStateVariableDeclaration(self)




    def stateVariableDeclaration(self):

        localctx = SolidityParser.StateVariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_stateVariableDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 496
            self.typeName(0)
            self.state = 535
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & 13680641) != 0):
                self.state = 533
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [120]:
                    self.state = 497
                    self.match(SolidityParser.PublicKeyword)
                    self.state = 501
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==131:
                        self.state = 498
                        self.match(SolidityParser.NL)
                        self.state = 503
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [117]:
                    self.state = 504
                    self.match(SolidityParser.InternalKeyword)
                    self.state = 508
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==131:
                        self.state = 505
                        self.match(SolidityParser.NL)
                        self.state = 510
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [119]:
                    self.state = 511
                    self.match(SolidityParser.PrivateKeyword)
                    self.state = 515
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==131:
                        self.state = 512
                        self.match(SolidityParser.NL)
                        self.state = 517
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [111]:
                    self.state = 518
                    self.match(SolidityParser.ConstantKeyword)
                    self.state = 522
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==131:
                        self.state = 519
                        self.match(SolidityParser.NL)
                        self.state = 524
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [112]:
                    self.state = 525
                    self.match(SolidityParser.ImmutableKeyword)
                    self.state = 529
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==131:
                        self.state = 526
                        self.match(SolidityParser.NL)
                        self.state = 531
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [97]:
                    self.state = 532
                    self.overrideSpecifier()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 537
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 538
            self.identifier()
            self.state = 547
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9:
                self.state = 539
                self.match(SolidityParser.T__8)
                self.state = 543
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 540
                    self.match(SolidityParser.NL)
                    self.state = 545
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 546
                self.expression(0)


            self.state = 549
            self.eos()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FileLevelConstantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def ConstantKeyword(self):
            return self.getToken(SolidityParser.ConstantKeyword, 0)

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def eos(self):
            return self.getTypedRuleContext(SolidityParser.EosContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.NL)
            else:
                return self.getToken(SolidityParser.NL, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_fileLevelConstant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFileLevelConstant" ):
                listener.enterFileLevelConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFileLevelConstant" ):
                listener.exitFileLevelConstant(self)




    def fileLevelConstant(self):

        localctx = SolidityParser.FileLevelConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_fileLevelConstant)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 551
            self.typeName(0)
            self.state = 552
            self.match(SolidityParser.ConstantKeyword)
            self.state = 556
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 553
                self.match(SolidityParser.NL)
                self.state = 558
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 559
            self.identifier()
            self.state = 560
            self.match(SolidityParser.T__8)
            self.state = 564
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 561
                self.match(SolidityParser.NL)
                self.state = 566
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 567
            self.expression(0)
            self.state = 568
            self.eos()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CustomErrorDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def parameterList(self):
            return self.getTypedRuleContext(SolidityParser.ParameterListContext,0)


        def eos(self):
            return self.getTypedRuleContext(SolidityParser.EosContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.NL)
            else:
                return self.getToken(SolidityParser.NL, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_customErrorDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCustomErrorDefinition" ):
                listener.enterCustomErrorDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCustomErrorDefinition" ):
                listener.exitCustomErrorDefinition(self)




    def customErrorDefinition(self):

        localctx = SolidityParser.CustomErrorDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_customErrorDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 570
            self.match(SolidityParser.T__23)
            self.state = 574
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 571
                self.match(SolidityParser.NL)
                self.state = 576
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 577
            self.identifier()
            self.state = 578
            self.parameterList()
            self.state = 579
            self.eos()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UsingForDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def eos(self):
            return self.getTypedRuleContext(SolidityParser.EosContext,0)


        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.NL)
            else:
                return self.getToken(SolidityParser.NL, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_usingForDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsingForDeclaration" ):
                listener.enterUsingForDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsingForDeclaration" ):
                listener.exitUsingForDeclaration(self)




    def usingForDeclaration(self):

        localctx = SolidityParser.UsingForDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_usingForDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 581
            self.match(SolidityParser.T__24)
            self.state = 585
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 582
                self.match(SolidityParser.NL)
                self.state = 587
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 588
            self.identifier()
            self.state = 589
            self.match(SolidityParser.T__25)
            self.state = 593
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 590
                self.match(SolidityParser.NL)
                self.state = 595
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 604
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [12]:
                self.state = 596
                self.match(SolidityParser.T__11)
                self.state = 600
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,63,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 597
                        self.match(SolidityParser.NL) 
                    self.state = 602
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,63,self._ctx)

                pass
            elif token in [13, 24, 29, 35, 37, 41, 54, 55, 56, 57, 58, 96, 98, 99, 100, 101, 102, 114, 118, 125, 127, 128]:
                self.state = 603
                self.typeName(0)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 606
            self.eos()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.NL)
            else:
                return self.getToken(SolidityParser.NL, i)

        def variableDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.VariableDeclarationContext)
            else:
                return self.getTypedRuleContext(SolidityParser.VariableDeclarationContext,i)


        def eos(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.EosContext)
            else:
                return self.getTypedRuleContext(SolidityParser.EosContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_structDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDefinition" ):
                listener.enterStructDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDefinition" ):
                listener.exitStructDefinition(self)




    def structDefinition(self):

        localctx = SolidityParser.StructDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_structDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 608
            self.match(SolidityParser.T__26)
            self.state = 612
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 609
                self.match(SolidityParser.NL)
                self.state = 614
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 615
            self.identifier()
            self.state = 616
            self.match(SolidityParser.T__13)
            self.state = 620
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 617
                self.match(SolidityParser.NL)
                self.state = 622
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 633
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 558448725169545216) != 0) or ((((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & 6983778429) != 0):
                self.state = 623
                self.variableDeclaration()
                self.state = 624
                self.eos()
                self.state = 630
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & 558448725169545216) != 0) or ((((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & 6983778429) != 0):
                    self.state = 625
                    self.variableDeclaration()
                    self.state = 626
                    self.eos()
                    self.state = 632
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 635
            self.match(SolidityParser.T__15)
            self.state = 639
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 636
                self.match(SolidityParser.NL)
                self.state = 641
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModifierDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def eos(self):
            return self.getTypedRuleContext(SolidityParser.EosContext,0)


        def block(self):
            return self.getTypedRuleContext(SolidityParser.BlockContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.NL)
            else:
                return self.getToken(SolidityParser.NL, i)

        def parameterList(self):
            return self.getTypedRuleContext(SolidityParser.ParameterListContext,0)


        def VirtualKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.VirtualKeyword)
            else:
                return self.getToken(SolidityParser.VirtualKeyword, i)

        def overrideSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.OverrideSpecifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.OverrideSpecifierContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_modifierDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifierDefinition" ):
                listener.enterModifierDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifierDefinition" ):
                listener.exitModifierDefinition(self)




    def modifierDefinition(self):

        localctx = SolidityParser.ModifierDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_modifierDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 642
            self.match(SolidityParser.T__27)
            self.state = 646
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 643
                self.match(SolidityParser.NL)
                self.state = 648
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 649
            self.identifier()
            self.state = 651
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==22:
                self.state = 650
                self.parameterList()


            self.state = 663
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==97 or _la==121:
                self.state = 661
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [121]:
                    self.state = 653
                    self.match(SolidityParser.VirtualKeyword)
                    self.state = 657
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,72,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 654
                            self.match(SolidityParser.NL) 
                        self.state = 659
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,72,self._ctx)

                    pass
                elif token in [97]:
                    self.state = 660
                    self.overrideSpecifier()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 665
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 668
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [48, 131]:
                self.state = 666
                self.eos()
                pass
            elif token in [14]:
                self.state = 667
                self.block()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModifierInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.NL)
            else:
                return self.getToken(SolidityParser.NL, i)

        def expressionList(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_modifierInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifierInvocation" ):
                listener.enterModifierInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifierInvocation" ):
                listener.exitModifierInvocation(self)




    def modifierInvocation(self):

        localctx = SolidityParser.ModifierInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_modifierInvocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 670
            self.identifier()
            self.state = 688
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==22:
                self.state = 671
                self.match(SolidityParser.T__21)
                self.state = 675
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 672
                    self.match(SolidityParser.NL)
                    self.state = 677
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 679
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 4)) & ~0x3f) == 0 and ((1 << (_la - 4)) & -289356135933935103) != 0) or ((((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & 15707933693) != 0):
                    self.state = 678
                    self.expressionList()


                self.state = 681
                self.match(SolidityParser.T__22)
                self.state = 685
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,78,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 682
                        self.match(SolidityParser.NL) 
                    self.state = 687
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,78,self._ctx)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionDescriptor(self):
            return self.getTypedRuleContext(SolidityParser.FunctionDescriptorContext,0)


        def parameterList(self):
            return self.getTypedRuleContext(SolidityParser.ParameterListContext,0)


        def modifierList(self):
            return self.getTypedRuleContext(SolidityParser.ModifierListContext,0)


        def eos(self):
            return self.getTypedRuleContext(SolidityParser.EosContext,0)


        def block(self):
            return self.getTypedRuleContext(SolidityParser.BlockContext,0)


        def returnParameters(self):
            return self.getTypedRuleContext(SolidityParser.ReturnParametersContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_functionDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionDefinition" ):
                listener.enterFunctionDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionDefinition" ):
                listener.exitFunctionDefinition(self)




    def functionDefinition(self):

        localctx = SolidityParser.FunctionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_functionDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 690
            self.functionDescriptor()
            self.state = 691
            self.parameterList()
            self.state = 692
            self.modifierList()
            self.state = 694
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==30:
                self.state = 693
                self.returnParameters()


            self.state = 698
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [48, 131]:
                self.state = 696
                self.eos()
                pass
            elif token in [14]:
                self.state = 697
                self.block()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionDescriptorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.NL)
            else:
                return self.getToken(SolidityParser.NL, i)

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def ConstructorKeyword(self):
            return self.getToken(SolidityParser.ConstructorKeyword, 0)

        def FallbackKeyword(self):
            return self.getToken(SolidityParser.FallbackKeyword, 0)

        def ReceiveKeyword(self):
            return self.getToken(SolidityParser.ReceiveKeyword, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_functionDescriptor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionDescriptor" ):
                listener.enterFunctionDescriptor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionDescriptor" ):
                listener.exitFunctionDescriptor(self)




    def functionDescriptor(self):

        localctx = SolidityParser.FunctionDescriptorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_functionDescriptor)
        self._la = 0 # Token type
        try:
            self.state = 731
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [29]:
                self.enterOuterAlt(localctx, 1)
                self.state = 700
                self.match(SolidityParser.T__28)
                self.state = 704
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 701
                    self.match(SolidityParser.NL)
                    self.state = 706
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 708
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 18016597549522944) != 0) or ((((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & 6983778305) != 0):
                    self.state = 707
                    self.identifier()


                pass
            elif token in [125]:
                self.enterOuterAlt(localctx, 2)
                self.state = 710
                self.match(SolidityParser.ConstructorKeyword)
                self.state = 714
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 711
                    self.match(SolidityParser.NL)
                    self.state = 716
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [126]:
                self.enterOuterAlt(localctx, 3)
                self.state = 717
                self.match(SolidityParser.FallbackKeyword)
                self.state = 721
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 718
                    self.match(SolidityParser.NL)
                    self.state = 723
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [127]:
                self.enterOuterAlt(localctx, 4)
                self.state = 724
                self.match(SolidityParser.ReceiveKeyword)
                self.state = 728
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 725
                    self.match(SolidityParser.NL)
                    self.state = 730
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterList(self):
            return self.getTypedRuleContext(SolidityParser.ParameterListContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.NL)
            else:
                return self.getToken(SolidityParser.NL, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_returnParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnParameters" ):
                listener.enterReturnParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnParameters" ):
                listener.exitReturnParameters(self)




    def returnParameters(self):

        localctx = SolidityParser.ReturnParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_returnParameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 733
            self.match(SolidityParser.T__29)
            self.state = 737
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 734
                self.match(SolidityParser.NL)
                self.state = 739
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 740
            self.parameterList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ExternalKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.ExternalKeyword)
            else:
                return self.getToken(SolidityParser.ExternalKeyword, i)

        def PublicKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.PublicKeyword)
            else:
                return self.getToken(SolidityParser.PublicKeyword, i)

        def InternalKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.InternalKeyword)
            else:
                return self.getToken(SolidityParser.InternalKeyword, i)

        def PrivateKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.PrivateKeyword)
            else:
                return self.getToken(SolidityParser.PrivateKeyword, i)

        def VirtualKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.VirtualKeyword)
            else:
                return self.getToken(SolidityParser.VirtualKeyword, i)

        def stateMutability(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.StateMutabilityContext)
            else:
                return self.getTypedRuleContext(SolidityParser.StateMutabilityContext,i)


        def modifierInvocation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ModifierInvocationContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ModifierInvocationContext,i)


        def overrideSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.OverrideSpecifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.OverrideSpecifierContext,i)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.NL)
            else:
                return self.getToken(SolidityParser.NL, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_modifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifierList" ):
                listener.enterModifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifierList" ):
                listener.exitModifierList(self)




    def modifierList(self):

        localctx = SolidityParser.ModifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_modifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 782
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 18016597549522944) != 0) or ((((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & 7380697091) != 0):
                self.state = 780
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
                if la_ == 1:
                    self.state = 742
                    self.match(SolidityParser.ExternalKeyword)
                    self.state = 746
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,89,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 743
                            self.match(SolidityParser.NL) 
                        self.state = 748
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,89,self._ctx)

                    pass

                elif la_ == 2:
                    self.state = 749
                    self.match(SolidityParser.PublicKeyword)
                    self.state = 753
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,90,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 750
                            self.match(SolidityParser.NL) 
                        self.state = 755
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,90,self._ctx)

                    pass

                elif la_ == 3:
                    self.state = 756
                    self.match(SolidityParser.InternalKeyword)
                    self.state = 760
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,91,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 757
                            self.match(SolidityParser.NL) 
                        self.state = 762
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,91,self._ctx)

                    pass

                elif la_ == 4:
                    self.state = 763
                    self.match(SolidityParser.PrivateKeyword)
                    self.state = 767
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,92,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 764
                            self.match(SolidityParser.NL) 
                        self.state = 769
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,92,self._ctx)

                    pass

                elif la_ == 5:
                    self.state = 770
                    self.match(SolidityParser.VirtualKeyword)
                    self.state = 774
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,93,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 771
                            self.match(SolidityParser.NL) 
                        self.state = 776
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,93,self._ctx)

                    pass

                elif la_ == 6:
                    self.state = 777
                    self.stateMutability()
                    pass

                elif la_ == 7:
                    self.state = 778
                    self.modifierInvocation()
                    pass

                elif la_ == 8:
                    self.state = 779
                    self.overrideSpecifier()
                    pass


                self.state = 784
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EventDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def eventParameterList(self):
            return self.getTypedRuleContext(SolidityParser.EventParameterListContext,0)


        def eos(self):
            return self.getTypedRuleContext(SolidityParser.EosContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.NL)
            else:
                return self.getToken(SolidityParser.NL, i)

        def AnonymousKeyword(self):
            return self.getToken(SolidityParser.AnonymousKeyword, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_eventDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEventDefinition" ):
                listener.enterEventDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEventDefinition" ):
                listener.exitEventDefinition(self)




    def eventDefinition(self):

        localctx = SolidityParser.EventDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_eventDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 785
            self.match(SolidityParser.T__30)
            self.state = 789
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 786
                self.match(SolidityParser.NL)
                self.state = 791
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 792
            self.identifier()
            self.state = 793
            self.eventParameterList()
            self.state = 801
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==109:
                self.state = 794
                self.match(SolidityParser.AnonymousKeyword)
                self.state = 798
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,97,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 795
                        self.match(SolidityParser.NL) 
                    self.state = 800
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,97,self._ctx)



            self.state = 803
            self.eos()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_enumValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumValue" ):
                listener.enterEnumValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumValue" ):
                listener.exitEnumValue(self)




    def enumValue(self):

        localctx = SolidityParser.EnumValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_enumValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 805
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.NL)
            else:
                return self.getToken(SolidityParser.NL, i)

        def enumValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.EnumValueContext)
            else:
                return self.getTypedRuleContext(SolidityParser.EnumValueContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_enumDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumDefinition" ):
                listener.enterEnumDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumDefinition" ):
                listener.exitEnumDefinition(self)




    def enumDefinition(self):

        localctx = SolidityParser.EnumDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_enumDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 807
            self.match(SolidityParser.T__31)
            self.state = 811
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 808
                self.match(SolidityParser.NL)
                self.state = 813
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 814
            self.identifier()
            self.state = 815
            self.match(SolidityParser.T__13)
            self.state = 819
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 816
                self.match(SolidityParser.NL)
                self.state = 821
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 823
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 18016597549522944) != 0) or ((((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & 6983778305) != 0):
                self.state = 822
                self.enumValue()


            self.state = 835
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==15:
                self.state = 825
                self.match(SolidityParser.T__14)
                self.state = 829
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 826
                    self.match(SolidityParser.NL)
                    self.state = 831
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 832
                self.enumValue()
                self.state = 837
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 838
            self.match(SolidityParser.T__15)
            self.state = 842
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 839
                self.match(SolidityParser.NL)
                self.state = 844
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.NL)
            else:
                return self.getToken(SolidityParser.NL, i)

        def parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ParameterContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ParameterContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_parameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterList" ):
                listener.enterParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterList" ):
                listener.exitParameterList(self)




    def parameterList(self):

        localctx = SolidityParser.ParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_parameterList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 845
            self.match(SolidityParser.T__21)
            self.state = 849
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 846
                self.match(SolidityParser.NL)
                self.state = 851
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 866
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 558448725169545216) != 0) or ((((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & 6983778429) != 0):
                self.state = 852
                self.parameter()
                self.state = 863
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==15:
                    self.state = 853
                    self.match(SolidityParser.T__14)
                    self.state = 857
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==131:
                        self.state = 854
                        self.match(SolidityParser.NL)
                        self.state = 859
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 860
                    self.parameter()
                    self.state = 865
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 868
            self.match(SolidityParser.T__22)
            self.state = 872
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,109,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 869
                    self.match(SolidityParser.NL) 
                self.state = 874
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,109,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def storageLocation(self):
            return self.getTypedRuleContext(SolidityParser.StorageLocationContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter" ):
                listener.enterParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter" ):
                listener.exitParameter(self)




    def parameter(self):

        localctx = SolidityParser.ParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_parameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 875
            self.typeName(0)
            self.state = 877
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,110,self._ctx)
            if la_ == 1:
                self.state = 876
                self.storageLocation()


            self.state = 880
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 18016597549522944) != 0) or ((((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & 6983778305) != 0):
                self.state = 879
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EventParameterListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.NL)
            else:
                return self.getToken(SolidityParser.NL, i)

        def eventParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.EventParameterContext)
            else:
                return self.getTypedRuleContext(SolidityParser.EventParameterContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_eventParameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEventParameterList" ):
                listener.enterEventParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEventParameterList" ):
                listener.exitEventParameterList(self)




    def eventParameterList(self):

        localctx = SolidityParser.EventParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_eventParameterList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 882
            self.match(SolidityParser.T__21)
            self.state = 886
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 883
                self.match(SolidityParser.NL)
                self.state = 888
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 903
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 558448725169545216) != 0) or ((((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & 6983778429) != 0):
                self.state = 889
                self.eventParameter()
                self.state = 900
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==15:
                    self.state = 890
                    self.match(SolidityParser.T__14)
                    self.state = 894
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==131:
                        self.state = 891
                        self.match(SolidityParser.NL)
                        self.state = 896
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 897
                    self.eventParameter()
                    self.state = 902
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 905
            self.match(SolidityParser.T__22)
            self.state = 909
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,116,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 906
                    self.match(SolidityParser.NL) 
                self.state = 911
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,116,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EventParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def IndexedKeyword(self):
            return self.getToken(SolidityParser.IndexedKeyword, 0)

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.NL)
            else:
                return self.getToken(SolidityParser.NL, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_eventParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEventParameter" ):
                listener.enterEventParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEventParameter" ):
                listener.exitEventParameter(self)




    def eventParameter(self):

        localctx = SolidityParser.EventParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_eventParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 912
            self.typeName(0)
            self.state = 920
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==116:
                self.state = 913
                self.match(SolidityParser.IndexedKeyword)
                self.state = 917
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 914
                    self.match(SolidityParser.NL)
                    self.state = 919
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 923
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 18016597549522944) != 0) or ((((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & 6983778305) != 0):
                self.state = 922
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionTypeParameterListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.NL)
            else:
                return self.getToken(SolidityParser.NL, i)

        def functionTypeParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.FunctionTypeParameterContext)
            else:
                return self.getTypedRuleContext(SolidityParser.FunctionTypeParameterContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_functionTypeParameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionTypeParameterList" ):
                listener.enterFunctionTypeParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionTypeParameterList" ):
                listener.exitFunctionTypeParameterList(self)




    def functionTypeParameterList(self):

        localctx = SolidityParser.FunctionTypeParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_functionTypeParameterList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 925
            self.match(SolidityParser.T__21)
            self.state = 929
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 926
                self.match(SolidityParser.NL)
                self.state = 931
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 946
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 558448725169545216) != 0) or ((((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & 6983778429) != 0):
                self.state = 932
                self.functionTypeParameter()
                self.state = 943
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==15:
                    self.state = 933
                    self.match(SolidityParser.T__14)
                    self.state = 937
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==131:
                        self.state = 934
                        self.match(SolidityParser.NL)
                        self.state = 939
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 940
                    self.functionTypeParameter()
                    self.state = 945
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 948
            self.match(SolidityParser.T__22)
            self.state = 952
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,124,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 949
                    self.match(SolidityParser.NL) 
                self.state = 954
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,124,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionTypeParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def storageLocation(self):
            return self.getTypedRuleContext(SolidityParser.StorageLocationContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_functionTypeParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionTypeParameter" ):
                listener.enterFunctionTypeParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionTypeParameter" ):
                listener.exitFunctionTypeParameter(self)




    def functionTypeParameter(self):

        localctx = SolidityParser.FunctionTypeParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_functionTypeParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 955
            self.typeName(0)
            self.state = 957
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 3848290697216) != 0):
                self.state = 956
                self.storageLocation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def storageLocation(self):
            return self.getTypedRuleContext(SolidityParser.StorageLocationContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_variableDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclaration" ):
                listener.enterVariableDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclaration" ):
                listener.exitVariableDeclaration(self)




    def variableDeclaration(self):

        localctx = SolidityParser.VariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_variableDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 959
            self.typeName(0)
            self.state = 961
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,126,self._ctx)
            if la_ == 1:
                self.state = 960
                self.storageLocation()


            self.state = 963
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elementaryTypeName(self):
            return self.getTypedRuleContext(SolidityParser.ElementaryTypeNameContext,0)


        def userDefinedTypeName(self):
            return self.getTypedRuleContext(SolidityParser.UserDefinedTypeNameContext,0)


        def mapping(self):
            return self.getTypedRuleContext(SolidityParser.MappingContext,0)


        def functionTypeName(self):
            return self.getTypedRuleContext(SolidityParser.FunctionTypeNameContext,0)


        def PayableKeyword(self):
            return self.getToken(SolidityParser.PayableKeyword, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.NL)
            else:
                return self.getToken(SolidityParser.NL, i)

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_typeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeName" ):
                listener.enterTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeName" ):
                listener.exitTypeName(self)



    def typeName(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SolidityParser.TypeNameContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 68
        self.enterRecursionRule(localctx, 68, self.RULE_typeName, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 984
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,129,self._ctx)
            if la_ == 1:
                self.state = 966
                self.elementaryTypeName()
                pass

            elif la_ == 2:
                self.state = 967
                self.userDefinedTypeName()
                pass

            elif la_ == 3:
                self.state = 968
                self.mapping()
                pass

            elif la_ == 4:
                self.state = 969
                self.functionTypeName()
                pass

            elif la_ == 5:
                self.state = 970
                self.match(SolidityParser.T__34)
                self.state = 974
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 971
                    self.match(SolidityParser.NL)
                    self.state = 976
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 977
                self.match(SolidityParser.PayableKeyword)
                self.state = 981
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,128,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 978
                        self.match(SolidityParser.NL) 
                    self.state = 983
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,128,self._ctx)

                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1006
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,133,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SolidityParser.TypeNameContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_typeName)
                    self.state = 986
                    if not self.precpred(self._ctx, 3):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                    self.state = 987
                    self.match(SolidityParser.T__32)
                    self.state = 991
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==131:
                        self.state = 988
                        self.match(SolidityParser.NL)
                        self.state = 993
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 995
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 4)) & ~0x3f) == 0 and ((1 << (_la - 4)) & -289356135933935103) != 0) or ((((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & 15707933693) != 0):
                        self.state = 994
                        self.expression(0)


                    self.state = 997
                    self.match(SolidityParser.T__33)
                    self.state = 1001
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,132,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 998
                            self.match(SolidityParser.NL) 
                        self.state = 1003
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,132,self._ctx)
             
                self.state = 1008
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,133,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class UserDefinedTypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.IdentifierContext,i)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.NL)
            else:
                return self.getToken(SolidityParser.NL, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_userDefinedTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserDefinedTypeName" ):
                listener.enterUserDefinedTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserDefinedTypeName" ):
                listener.exitUserDefinedTypeName(self)




    def userDefinedTypeName(self):

        localctx = SolidityParser.UserDefinedTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_userDefinedTypeName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1009
            self.identifier()
            self.state = 1020
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,135,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1010
                    self.match(SolidityParser.T__35)
                    self.state = 1014
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==131:
                        self.state = 1011
                        self.match(SolidityParser.NL)
                        self.state = 1016
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1017
                    self.identifier() 
                self.state = 1022
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,135,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MappingKeyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elementaryTypeName(self):
            return self.getTypedRuleContext(SolidityParser.ElementaryTypeNameContext,0)


        def userDefinedTypeName(self):
            return self.getTypedRuleContext(SolidityParser.UserDefinedTypeNameContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_mappingKey

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMappingKey" ):
                listener.enterMappingKey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMappingKey" ):
                listener.exitMappingKey(self)




    def mappingKey(self):

        localctx = SolidityParser.MappingKeyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_mappingKey)
        try:
            self.state = 1025
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [35, 55, 56, 57, 58, 98, 99, 100, 101, 102]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1023
                self.elementaryTypeName()
                pass
            elif token in [13, 24, 41, 54, 96, 114, 118, 125, 127, 128]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1024
                self.userDefinedTypeName()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MappingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mappingKey(self):
            return self.getTypedRuleContext(SolidityParser.MappingKeyContext,0)


        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.NL)
            else:
                return self.getToken(SolidityParser.NL, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_mapping

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMapping" ):
                listener.enterMapping(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMapping" ):
                listener.exitMapping(self)




    def mapping(self):

        localctx = SolidityParser.MappingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_mapping)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1027
            self.match(SolidityParser.T__36)
            self.state = 1031
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 1028
                self.match(SolidityParser.NL)
                self.state = 1033
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1034
            self.match(SolidityParser.T__21)
            self.state = 1038
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 1035
                self.match(SolidityParser.NL)
                self.state = 1040
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1041
            self.mappingKey()
            self.state = 1042
            self.match(SolidityParser.T__37)
            self.state = 1046
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 1043
                self.match(SolidityParser.NL)
                self.state = 1048
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1049
            self.typeName(0)
            self.state = 1050
            self.match(SolidityParser.T__22)
            self.state = 1054
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,140,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1051
                    self.match(SolidityParser.NL) 
                self.state = 1056
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,140,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionTypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionTypeParameterList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.FunctionTypeParameterListContext)
            else:
                return self.getTypedRuleContext(SolidityParser.FunctionTypeParameterListContext,i)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.NL)
            else:
                return self.getToken(SolidityParser.NL, i)

        def InternalKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.InternalKeyword)
            else:
                return self.getToken(SolidityParser.InternalKeyword, i)

        def ExternalKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.ExternalKeyword)
            else:
                return self.getToken(SolidityParser.ExternalKeyword, i)

        def stateMutability(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.StateMutabilityContext)
            else:
                return self.getTypedRuleContext(SolidityParser.StateMutabilityContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_functionTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionTypeName" ):
                listener.enterFunctionTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionTypeName" ):
                listener.exitFunctionTypeName(self)




    def functionTypeName(self):

        localctx = SolidityParser.FunctionTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_functionTypeName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1057
            self.match(SolidityParser.T__28)
            self.state = 1061
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 1058
                self.match(SolidityParser.NL)
                self.state = 1063
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1064
            self.functionTypeParameterList()
            self.state = 1082
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,145,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1080
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [117]:
                        self.state = 1065
                        self.match(SolidityParser.InternalKeyword)
                        self.state = 1069
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,142,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 1066
                                self.match(SolidityParser.NL) 
                            self.state = 1071
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,142,self._ctx)

                        pass
                    elif token in [115]:
                        self.state = 1072
                        self.match(SolidityParser.ExternalKeyword)
                        self.state = 1076
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,143,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 1073
                                self.match(SolidityParser.NL) 
                            self.state = 1078
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,143,self._ctx)

                        pass
                    elif token in [111, 118, 122, 124]:
                        self.state = 1079
                        self.stateMutability()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 1084
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,145,self._ctx)

            self.state = 1093
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,147,self._ctx)
            if la_ == 1:
                self.state = 1085
                self.match(SolidityParser.T__29)
                self.state = 1089
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 1086
                    self.match(SolidityParser.NL)
                    self.state = 1091
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1092
                self.functionTypeParameterList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StorageLocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.NL)
            else:
                return self.getToken(SolidityParser.NL, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_storageLocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStorageLocation" ):
                listener.enterStorageLocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStorageLocation" ):
                listener.exitStorageLocation(self)




    def storageLocation(self):

        localctx = SolidityParser.StorageLocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_storageLocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1095
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 3848290697216) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1099
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 1096
                self.match(SolidityParser.NL)
                self.state = 1101
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StateMutabilityContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PureKeyword(self):
            return self.getToken(SolidityParser.PureKeyword, 0)

        def ConstantKeyword(self):
            return self.getToken(SolidityParser.ConstantKeyword, 0)

        def ViewKeyword(self):
            return self.getToken(SolidityParser.ViewKeyword, 0)

        def PayableKeyword(self):
            return self.getToken(SolidityParser.PayableKeyword, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.NL)
            else:
                return self.getToken(SolidityParser.NL, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_stateMutability

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStateMutability" ):
                listener.enterStateMutability(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStateMutability" ):
                listener.exitStateMutability(self)




    def stateMutability(self):

        localctx = SolidityParser.StateMutabilityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_stateMutability)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1102
            _la = self._input.LA(1)
            if not(((((_la - 111)) & ~0x3f) == 0 and ((1 << (_la - 111)) & 10369) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1106
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,149,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1103
                    self.match(SolidityParser.NL) 
                self.state = 1108
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,149,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.NL)
            else:
                return self.getToken(SolidityParser.NL, i)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.StatementContext)
            else:
                return self.getTypedRuleContext(SolidityParser.StatementContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)




    def block(self):

        localctx = SolidityParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1109
            self.match(SolidityParser.T__13)
            self.state = 1113
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 1110
                self.match(SolidityParser.NL)
                self.state = 1115
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1119
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 4)) & ~0x3f) == 0 and ((1 << (_la - 4)) & -288250843242428927) != 0) or ((((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & 15708081149) != 0):
                self.state = 1116
                self.statement()
                self.state = 1121
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1122
            self.match(SolidityParser.T__15)
            self.state = 1126
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 1123
                self.match(SolidityParser.NL)
                self.state = 1128
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ifStatement(self):
            return self.getTypedRuleContext(SolidityParser.IfStatementContext,0)


        def tryStatement(self):
            return self.getTypedRuleContext(SolidityParser.TryStatementContext,0)


        def whileStatement(self):
            return self.getTypedRuleContext(SolidityParser.WhileStatementContext,0)


        def forStatement(self):
            return self.getTypedRuleContext(SolidityParser.ForStatementContext,0)


        def block(self):
            return self.getTypedRuleContext(SolidityParser.BlockContext,0)


        def inlineAssemblyStatement(self):
            return self.getTypedRuleContext(SolidityParser.InlineAssemblyStatementContext,0)


        def doWhileStatement(self):
            return self.getTypedRuleContext(SolidityParser.DoWhileStatementContext,0)


        def continueStatement(self):
            return self.getTypedRuleContext(SolidityParser.ContinueStatementContext,0)


        def breakStatement(self):
            return self.getTypedRuleContext(SolidityParser.BreakStatementContext,0)


        def returnStatement(self):
            return self.getTypedRuleContext(SolidityParser.ReturnStatementContext,0)


        def throwStatement(self):
            return self.getTypedRuleContext(SolidityParser.ThrowStatementContext,0)


        def emitStatement(self):
            return self.getTypedRuleContext(SolidityParser.EmitStatementContext,0)


        def simpleStatement(self):
            return self.getTypedRuleContext(SolidityParser.SimpleStatementContext,0)


        def uncheckedStatement(self):
            return self.getTypedRuleContext(SolidityParser.UncheckedStatementContext,0)


        def revertStatement(self):
            return self.getTypedRuleContext(SolidityParser.RevertStatementContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)




    def statement(self):

        localctx = SolidityParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_statement)
        try:
            self.state = 1144
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,153,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1129
                self.ifStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1130
                self.tryStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1131
                self.whileStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1132
                self.forStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1133
                self.block()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1134
                self.inlineAssemblyStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1135
                self.doWhileStatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1136
                self.continueStatement()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1137
                self.breakStatement()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1138
                self.returnStatement()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1139
                self.throwStatement()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1140
                self.emitStatement()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1141
                self.simpleStatement()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1142
                self.uncheckedStatement()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1143
                self.revertStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def eos(self):
            return self.getTypedRuleContext(SolidityParser.EosContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_expressionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionStatement" ):
                listener.enterExpressionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionStatement" ):
                listener.exitExpressionStatement(self)




    def expressionStatement(self):

        localctx = SolidityParser.ExpressionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_expressionStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1146
            self.expression(0)
            self.state = 1147
            self.eos()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.StatementContext)
            else:
                return self.getTypedRuleContext(SolidityParser.StatementContext,i)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.NL)
            else:
                return self.getToken(SolidityParser.NL, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_ifStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfStatement" ):
                listener.enterIfStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfStatement" ):
                listener.exitIfStatement(self)




    def ifStatement(self):

        localctx = SolidityParser.IfStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_ifStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1149
            self.match(SolidityParser.T__41)
            self.state = 1153
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 1150
                self.match(SolidityParser.NL)
                self.state = 1155
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1156
            self.match(SolidityParser.T__21)
            self.state = 1160
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 1157
                self.match(SolidityParser.NL)
                self.state = 1162
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1163
            self.expression(0)
            self.state = 1164
            self.match(SolidityParser.T__22)
            self.state = 1168
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 1165
                self.match(SolidityParser.NL)
                self.state = 1170
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1171
            self.statement()
            self.state = 1180
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,158,self._ctx)
            if la_ == 1:
                self.state = 1172
                self.match(SolidityParser.T__42)
                self.state = 1176
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 1173
                    self.match(SolidityParser.NL)
                    self.state = 1178
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1179
                self.statement()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TryStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def block(self):
            return self.getTypedRuleContext(SolidityParser.BlockContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.NL)
            else:
                return self.getToken(SolidityParser.NL, i)

        def returnParameters(self):
            return self.getTypedRuleContext(SolidityParser.ReturnParametersContext,0)


        def catchClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.CatchClauseContext)
            else:
                return self.getTypedRuleContext(SolidityParser.CatchClauseContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_tryStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTryStatement" ):
                listener.enterTryStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTryStatement" ):
                listener.exitTryStatement(self)




    def tryStatement(self):

        localctx = SolidityParser.TryStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_tryStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1182
            self.match(SolidityParser.T__43)
            self.state = 1186
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 1183
                self.match(SolidityParser.NL)
                self.state = 1188
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1189
            self.expression(0)
            self.state = 1191
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==30:
                self.state = 1190
                self.returnParameters()


            self.state = 1193
            self.block()
            self.state = 1195 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1194
                self.catchClause()
                self.state = 1197 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==45):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CatchClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(SolidityParser.BlockContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.NL)
            else:
                return self.getToken(SolidityParser.NL, i)

        def parameterList(self):
            return self.getTypedRuleContext(SolidityParser.ParameterListContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_catchClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatchClause" ):
                listener.enterCatchClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatchClause" ):
                listener.exitCatchClause(self)




    def catchClause(self):

        localctx = SolidityParser.CatchClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_catchClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1199
            self.match(SolidityParser.T__44)
            self.state = 1203
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 1200
                self.match(SolidityParser.NL)
                self.state = 1205
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1210
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 18016597553717248) != 0) or ((((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & 6983778305) != 0):
                self.state = 1207
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 18016597549522944) != 0) or ((((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & 6983778305) != 0):
                    self.state = 1206
                    self.identifier()


                self.state = 1209
                self.parameterList()


            self.state = 1212
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def statement(self):
            return self.getTypedRuleContext(SolidityParser.StatementContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.NL)
            else:
                return self.getToken(SolidityParser.NL, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_whileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileStatement" ):
                listener.enterWhileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileStatement" ):
                listener.exitWhileStatement(self)




    def whileStatement(self):

        localctx = SolidityParser.WhileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_whileStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1214
            self.match(SolidityParser.T__45)
            self.state = 1218
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 1215
                self.match(SolidityParser.NL)
                self.state = 1220
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1221
            self.match(SolidityParser.T__21)
            self.state = 1225
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 1222
                self.match(SolidityParser.NL)
                self.state = 1227
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1228
            self.expression(0)
            self.state = 1229
            self.match(SolidityParser.T__22)
            self.state = 1233
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 1230
                self.match(SolidityParser.NL)
                self.state = 1235
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1236
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclarationStatement(self):
            return self.getTypedRuleContext(SolidityParser.VariableDeclarationStatementContext,0)


        def expressionStatement(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionStatementContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_simpleStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleStatement" ):
                listener.enterSimpleStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleStatement" ):
                listener.exitSimpleStatement(self)




    def simpleStatement(self):

        localctx = SolidityParser.SimpleStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_simpleStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1240
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,168,self._ctx)
            if la_ == 1:
                self.state = 1238
                self.variableDeclarationStatement()
                pass

            elif la_ == 2:
                self.state = 1239
                self.expressionStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UncheckedStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(SolidityParser.BlockContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.NL)
            else:
                return self.getToken(SolidityParser.NL, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_uncheckedStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUncheckedStatement" ):
                listener.enterUncheckedStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUncheckedStatement" ):
                listener.exitUncheckedStatement(self)




    def uncheckedStatement(self):

        localctx = SolidityParser.UncheckedStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_uncheckedStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1242
            self.match(SolidityParser.T__46)
            self.state = 1246
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 1243
                self.match(SolidityParser.NL)
                self.state = 1248
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1249
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(SolidityParser.StatementContext,0)


        def simpleStatement(self):
            return self.getTypedRuleContext(SolidityParser.SimpleStatementContext,0)


        def expressionStatement(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionStatementContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.NL)
            else:
                return self.getToken(SolidityParser.NL, i)

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_forStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForStatement" ):
                listener.enterForStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForStatement" ):
                listener.exitForStatement(self)




    def forStatement(self):

        localctx = SolidityParser.ForStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_forStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1251
            self.match(SolidityParser.T__25)
            self.state = 1255
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 1252
                self.match(SolidityParser.NL)
                self.state = 1257
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1258
            self.match(SolidityParser.T__21)
            self.state = 1262
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 1259
                self.match(SolidityParser.NL)
                self.state = 1264
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1273
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [4, 13, 22, 24, 29, 33, 35, 37, 41, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 96, 98, 99, 100, 101, 102, 103, 104, 105, 107, 114, 118, 123, 125, 127, 128, 129]:
                self.state = 1265
                self.simpleStatement()
                pass
            elif token in [48]:
                self.state = 1266
                self.match(SolidityParser.T__47)
                self.state = 1270
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 1267
                    self.match(SolidityParser.NL)
                    self.state = 1272
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

            self.state = 1283
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [4, 13, 22, 24, 33, 35, 41, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 96, 98, 99, 100, 101, 102, 103, 104, 105, 107, 114, 118, 123, 125, 127, 128, 129]:
                self.state = 1275
                self.expressionStatement()
                pass
            elif token in [48]:
                self.state = 1276
                self.match(SolidityParser.T__47)
                self.state = 1280
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 1277
                    self.match(SolidityParser.NL)
                    self.state = 1282
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

            self.state = 1286
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 4)) & ~0x3f) == 0 and ((1 << (_la - 4)) & -289356135933935103) != 0) or ((((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & 15707933693) != 0):
                self.state = 1285
                self.expression(0)


            self.state = 1288
            self.match(SolidityParser.T__22)
            self.state = 1292
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 1289
                self.match(SolidityParser.NL)
                self.state = 1294
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1295
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InlineAssemblyStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyBlock(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyBlockContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.NL)
            else:
                return self.getToken(SolidityParser.NL, i)

        def StringLiteralFragment(self):
            return self.getToken(SolidityParser.StringLiteralFragment, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_inlineAssemblyStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInlineAssemblyStatement" ):
                listener.enterInlineAssemblyStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInlineAssemblyStatement" ):
                listener.exitInlineAssemblyStatement(self)




    def inlineAssemblyStatement(self):

        localctx = SolidityParser.InlineAssemblyStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_inlineAssemblyStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1297
            self.match(SolidityParser.T__48)
            self.state = 1301
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 1298
                self.match(SolidityParser.NL)
                self.state = 1303
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1311
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==129:
                self.state = 1304
                self.match(SolidityParser.StringLiteralFragment)
                self.state = 1308
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 1305
                    self.match(SolidityParser.NL)
                    self.state = 1310
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1313
            self.assemblyBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DoWhileStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(SolidityParser.StatementContext,0)


        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def eos(self):
            return self.getTypedRuleContext(SolidityParser.EosContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.NL)
            else:
                return self.getToken(SolidityParser.NL, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_doWhileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoWhileStatement" ):
                listener.enterDoWhileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoWhileStatement" ):
                listener.exitDoWhileStatement(self)




    def doWhileStatement(self):

        localctx = SolidityParser.DoWhileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_doWhileStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1315
            self.match(SolidityParser.T__49)
            self.state = 1319
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 1316
                self.match(SolidityParser.NL)
                self.state = 1321
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1322
            self.statement()
            self.state = 1323
            self.match(SolidityParser.T__45)
            self.state = 1327
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 1324
                self.match(SolidityParser.NL)
                self.state = 1329
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1330
            self.match(SolidityParser.T__21)
            self.state = 1334
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 1331
                self.match(SolidityParser.NL)
                self.state = 1336
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1337
            self.expression(0)
            self.state = 1338
            self.match(SolidityParser.T__22)
            self.state = 1342
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,184,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1339
                    self.match(SolidityParser.NL) 
                self.state = 1344
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,184,self._ctx)

            self.state = 1345
            self.eos()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContinueStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ContinueKeyword(self):
            return self.getToken(SolidityParser.ContinueKeyword, 0)

        def eos(self):
            return self.getTypedRuleContext(SolidityParser.EosContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_continueStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContinueStatement" ):
                listener.enterContinueStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContinueStatement" ):
                listener.exitContinueStatement(self)




    def continueStatement(self):

        localctx = SolidityParser.ContinueStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_continueStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1347
            self.match(SolidityParser.ContinueKeyword)
            self.state = 1348
            self.eos()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BreakStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BreakKeyword(self):
            return self.getToken(SolidityParser.BreakKeyword, 0)

        def eos(self):
            return self.getTypedRuleContext(SolidityParser.EosContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_breakStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreakStatement" ):
                listener.enterBreakStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreakStatement" ):
                listener.exitBreakStatement(self)




    def breakStatement(self):

        localctx = SolidityParser.BreakStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_breakStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1350
            self.match(SolidityParser.BreakKeyword)
            self.state = 1351
            self.eos()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def eos(self):
            return self.getTypedRuleContext(SolidityParser.EosContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.NL)
            else:
                return self.getToken(SolidityParser.NL, i)

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_returnStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStatement" ):
                listener.enterReturnStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStatement" ):
                listener.exitReturnStatement(self)




    def returnStatement(self):

        localctx = SolidityParser.ReturnStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_returnStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1353
            self.match(SolidityParser.T__50)
            self.state = 1357
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,185,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1354
                    self.match(SolidityParser.NL) 
                self.state = 1359
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,185,self._ctx)

            self.state = 1361
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 4)) & ~0x3f) == 0 and ((1 << (_la - 4)) & -289356135933935103) != 0) or ((((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & 15707933693) != 0):
                self.state = 1360
                self.expression(0)


            self.state = 1363
            self.eos()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ThrowStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def eos(self):
            return self.getTypedRuleContext(SolidityParser.EosContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_throwStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThrowStatement" ):
                listener.enterThrowStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThrowStatement" ):
                listener.exitThrowStatement(self)




    def throwStatement(self):

        localctx = SolidityParser.ThrowStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_throwStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1365
            self.match(SolidityParser.T__51)
            self.state = 1366
            self.eos()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EmitStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionCall(self):
            return self.getTypedRuleContext(SolidityParser.FunctionCallContext,0)


        def eos(self):
            return self.getTypedRuleContext(SolidityParser.EosContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.NL)
            else:
                return self.getToken(SolidityParser.NL, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_emitStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmitStatement" ):
                listener.enterEmitStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmitStatement" ):
                listener.exitEmitStatement(self)




    def emitStatement(self):

        localctx = SolidityParser.EmitStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_emitStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1368
            self.match(SolidityParser.T__52)
            self.state = 1372
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 1369
                self.match(SolidityParser.NL)
                self.state = 1374
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1375
            self.functionCall()
            self.state = 1376
            self.eos()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RevertStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionCall(self):
            return self.getTypedRuleContext(SolidityParser.FunctionCallContext,0)


        def eos(self):
            return self.getTypedRuleContext(SolidityParser.EosContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.NL)
            else:
                return self.getToken(SolidityParser.NL, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_revertStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRevertStatement" ):
                listener.enterRevertStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRevertStatement" ):
                listener.exitRevertStatement(self)




    def revertStatement(self):

        localctx = SolidityParser.RevertStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_revertStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1378
            self.match(SolidityParser.T__53)
            self.state = 1382
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 1379
                self.match(SolidityParser.NL)
                self.state = 1384
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1385
            self.functionCall()
            self.state = 1386
            self.eos()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDeclarationStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def eos(self):
            return self.getTypedRuleContext(SolidityParser.EosContext,0)


        def identifierList(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierListContext,0)


        def variableDeclaration(self):
            return self.getTypedRuleContext(SolidityParser.VariableDeclarationContext,0)


        def variableDeclarationList(self):
            return self.getTypedRuleContext(SolidityParser.VariableDeclarationListContext,0)


        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.NL)
            else:
                return self.getToken(SolidityParser.NL, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_variableDeclarationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclarationStatement" ):
                listener.enterVariableDeclarationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclarationStatement" ):
                listener.exitVariableDeclarationStatement(self)




    def variableDeclarationStatement(self):

        localctx = SolidityParser.VariableDeclarationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_variableDeclarationStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1412
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,192,self._ctx)
            if la_ == 1:
                self.state = 1388
                self.match(SolidityParser.T__54)
                self.state = 1392
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 1389
                    self.match(SolidityParser.NL)
                    self.state = 1394
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1395
                self.identifierList()
                pass

            elif la_ == 2:
                self.state = 1396
                self.variableDeclaration()
                pass

            elif la_ == 3:
                self.state = 1397
                self.match(SolidityParser.T__21)
                self.state = 1401
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 1398
                    self.match(SolidityParser.NL)
                    self.state = 1403
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1404
                self.variableDeclarationList()
                self.state = 1405
                self.match(SolidityParser.T__22)
                self.state = 1409
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,191,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1406
                        self.match(SolidityParser.NL) 
                    self.state = 1411
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,191,self._ctx)

                pass


            self.state = 1422
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9:
                self.state = 1414
                self.match(SolidityParser.T__8)
                self.state = 1418
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 1415
                    self.match(SolidityParser.NL)
                    self.state = 1420
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1421
                self.expression(0)


            self.state = 1424
            self.eos()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDeclarationListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.VariableDeclarationContext)
            else:
                return self.getTypedRuleContext(SolidityParser.VariableDeclarationContext,i)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.NL)
            else:
                return self.getToken(SolidityParser.NL, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_variableDeclarationList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclarationList" ):
                listener.enterVariableDeclarationList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclarationList" ):
                listener.exitVariableDeclarationList(self)




    def variableDeclarationList(self):

        localctx = SolidityParser.VariableDeclarationListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_variableDeclarationList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1427
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 558448725169545216) != 0) or ((((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & 6983778429) != 0):
                self.state = 1426
                self.variableDeclaration()


            self.state = 1441
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==15:
                self.state = 1429
                self.match(SolidityParser.T__14)
                self.state = 1433
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 1430
                    self.match(SolidityParser.NL)
                    self.state = 1435
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1437
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 558448725169545216) != 0) or ((((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & 6983778429) != 0):
                    self.state = 1436
                    self.variableDeclaration()


                self.state = 1443
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.NL)
            else:
                return self.getToken(SolidityParser.NL, i)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.IdentifierContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_identifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierList" ):
                listener.enterIdentifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierList" ):
                listener.exitIdentifierList(self)




    def identifierList(self):

        localctx = SolidityParser.IdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_identifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1444
            self.match(SolidityParser.T__21)
            self.state = 1448
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 1445
                self.match(SolidityParser.NL)
                self.state = 1450
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1463
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,202,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1452
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 18016597549522944) != 0) or ((((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & 6983778305) != 0):
                        self.state = 1451
                        self.identifier()


                    self.state = 1454
                    self.match(SolidityParser.T__14)
                    self.state = 1458
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==131:
                        self.state = 1455
                        self.match(SolidityParser.NL)
                        self.state = 1460
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
             
                self.state = 1465
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,202,self._ctx)

            self.state = 1467
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 18016597549522944) != 0) or ((((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & 6983778305) != 0):
                self.state = 1466
                self.identifier()


            self.state = 1469
            self.match(SolidityParser.T__22)
            self.state = 1473
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,204,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1470
                    self.match(SolidityParser.NL) 
                self.state = 1475
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,204,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementaryTypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Int(self):
            return self.getToken(SolidityParser.Int, 0)

        def Uint(self):
            return self.getToken(SolidityParser.Uint, 0)

        def Byte(self):
            return self.getToken(SolidityParser.Byte, 0)

        def Fixed(self):
            return self.getToken(SolidityParser.Fixed, 0)

        def Ufixed(self):
            return self.getToken(SolidityParser.Ufixed, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.NL)
            else:
                return self.getToken(SolidityParser.NL, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_elementaryTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementaryTypeName" ):
                listener.enterElementaryTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementaryTypeName" ):
                listener.exitElementaryTypeName(self)




    def elementaryTypeName(self):

        localctx = SolidityParser.ElementaryTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_elementaryTypeName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1476
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 540431989644197888) != 0) or ((((_la - 98)) & ~0x3f) == 0 and ((1 << (_la - 98)) & 31) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1480
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,205,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1477
                    self.match(SolidityParser.NL) 
                self.state = 1482
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,205,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.NL)
            else:
                return self.getToken(SolidityParser.NL, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)


        def primaryExpression(self):
            return self.getTypedRuleContext(SolidityParser.PrimaryExpressionContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def nameValueList(self):
            return self.getTypedRuleContext(SolidityParser.NameValueListContext,0)


        def functionCallArguments(self):
            return self.getTypedRuleContext(SolidityParser.FunctionCallArgumentsContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SolidityParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 126
        self.enterRecursionRule(localctx, 126, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1548
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,214,self._ctx)
            if la_ == 1:
                self.state = 1484
                self.match(SolidityParser.T__60)
                self.state = 1488
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 1485
                    self.match(SolidityParser.NL)
                    self.state = 1490
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1491
                self.typeName(0)
                pass

            elif la_ == 2:
                self.state = 1492
                self.match(SolidityParser.T__21)
                self.state = 1496
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 1493
                    self.match(SolidityParser.NL)
                    self.state = 1498
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1499
                self.expression(0)
                self.state = 1500
                self.match(SolidityParser.T__22)
                self.state = 1504
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,208,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1501
                        self.match(SolidityParser.NL) 
                    self.state = 1506
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,208,self._ctx)

                pass

            elif la_ == 3:
                self.state = 1507
                _la = self._input.LA(1)
                if not(_la==59 or _la==60):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1511
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 1508
                    self.match(SolidityParser.NL)
                    self.state = 1513
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1514
                self.expression(19)
                pass

            elif la_ == 4:
                self.state = 1515
                _la = self._input.LA(1)
                if not(_la==63 or _la==64):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1519
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 1516
                    self.match(SolidityParser.NL)
                    self.state = 1521
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1522
                self.expression(18)
                pass

            elif la_ == 5:
                self.state = 1523
                _la = self._input.LA(1)
                if not(_la==65 or _la==66):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1527
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 1524
                    self.match(SolidityParser.NL)
                    self.state = 1529
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1530
                self.expression(17)
                pass

            elif la_ == 6:
                self.state = 1531
                self.match(SolidityParser.T__66)
                self.state = 1535
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 1532
                    self.match(SolidityParser.NL)
                    self.state = 1537
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1538
                self.expression(16)
                pass

            elif la_ == 7:
                self.state = 1539
                self.match(SolidityParser.T__3)
                self.state = 1543
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 1540
                    self.match(SolidityParser.NL)
                    self.state = 1545
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1546
                self.expression(15)
                pass

            elif la_ == 8:
                self.state = 1547
                self.primaryExpression()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1771
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,243,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1769
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,242,self._ctx)
                    if la_ == 1:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1550
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 1551
                        self.match(SolidityParser.T__67)
                        self.state = 1555
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==131:
                            self.state = 1552
                            self.match(SolidityParser.NL)
                            self.state = 1557
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1558
                        self.expression(15)
                        pass

                    elif la_ == 2:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1559
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 1560
                        _la = self._input.LA(1)
                        if not(((((_la - 12)) & ~0x3f) == 0 and ((1 << (_la - 12)) & 432345564227567617) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1564
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==131:
                            self.state = 1561
                            self.match(SolidityParser.NL)
                            self.state = 1566
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1567
                        self.expression(14)
                        pass

                    elif la_ == 3:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1568
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 1569
                        _la = self._input.LA(1)
                        if not(_la==63 or _la==64):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1573
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==131:
                            self.state = 1570
                            self.match(SolidityParser.NL)
                            self.state = 1575
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1576
                        self.expression(13)
                        pass

                    elif la_ == 4:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1577
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 1578
                        _la = self._input.LA(1)
                        if not(_la==71 or _la==72):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1582
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==131:
                            self.state = 1579
                            self.match(SolidityParser.NL)
                            self.state = 1584
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1585
                        self.expression(12)
                        pass

                    elif la_ == 5:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1586
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 1587
                        self.match(SolidityParser.T__72)
                        self.state = 1591
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==131:
                            self.state = 1588
                            self.match(SolidityParser.NL)
                            self.state = 1593
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1594
                        self.expression(11)
                        pass

                    elif la_ == 6:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1595
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 1596
                        self.match(SolidityParser.T__2)
                        self.state = 1600
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==131:
                            self.state = 1597
                            self.match(SolidityParser.NL)
                            self.state = 1602
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1603
                        self.expression(10)
                        pass

                    elif la_ == 7:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1604
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 1605
                        self.match(SolidityParser.T__73)
                        self.state = 1609
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==131:
                            self.state = 1606
                            self.match(SolidityParser.NL)
                            self.state = 1611
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1612
                        self.expression(9)
                        pass

                    elif la_ == 8:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1613
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 1614
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 480) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1618
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==131:
                            self.state = 1615
                            self.match(SolidityParser.NL)
                            self.state = 1620
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1621
                        self.expression(8)
                        pass

                    elif la_ == 9:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1622
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 1623
                        _la = self._input.LA(1)
                        if not(_la==75 or _la==76):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1627
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==131:
                            self.state = 1624
                            self.match(SolidityParser.NL)
                            self.state = 1629
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1630
                        self.expression(7)
                        pass

                    elif la_ == 10:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1631
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 1632
                        self.match(SolidityParser.T__76)
                        self.state = 1636
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==131:
                            self.state = 1633
                            self.match(SolidityParser.NL)
                            self.state = 1638
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1639
                        self.expression(6)
                        pass

                    elif la_ == 11:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1640
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 1641
                        self.match(SolidityParser.T__1)
                        self.state = 1645
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==131:
                            self.state = 1642
                            self.match(SolidityParser.NL)
                            self.state = 1647
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1648
                        self.expression(5)
                        pass

                    elif la_ == 12:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1649
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1650
                        self.match(SolidityParser.T__77)
                        self.state = 1654
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==131:
                            self.state = 1651
                            self.match(SolidityParser.NL)
                            self.state = 1656
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1657
                        self.expression(0)
                        self.state = 1658
                        self.match(SolidityParser.T__61)
                        self.state = 1662
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==131:
                            self.state = 1659
                            self.match(SolidityParser.NL)
                            self.state = 1664
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1665
                        self.expression(4)
                        pass

                    elif la_ == 13:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1667
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1668
                        _la = self._input.LA(1)
                        if not(_la==9 or ((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & 1023) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1672
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==131:
                            self.state = 1669
                            self.match(SolidityParser.NL)
                            self.state = 1674
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1675
                        self.expression(3)
                        pass

                    elif la_ == 14:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1676
                        if not self.precpred(self._ctx, 27):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 27)")
                        self.state = 1677
                        _la = self._input.LA(1)
                        if not(_la==59 or _la==60):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1681
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,229,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 1678
                                self.match(SolidityParser.NL) 
                            self.state = 1683
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,229,self._ctx)

                        pass

                    elif la_ == 15:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1684
                        if not self.precpred(self._ctx, 25):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 25)")
                        self.state = 1685
                        self.match(SolidityParser.T__32)
                        self.state = 1689
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==131:
                            self.state = 1686
                            self.match(SolidityParser.NL)
                            self.state = 1691
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1692
                        self.expression(0)
                        self.state = 1693
                        self.match(SolidityParser.T__33)
                        self.state = 1697
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,231,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 1694
                                self.match(SolidityParser.NL) 
                            self.state = 1699
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,231,self._ctx)

                        pass

                    elif la_ == 16:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1700
                        if not self.precpred(self._ctx, 24):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 24)")
                        self.state = 1701
                        self.match(SolidityParser.T__32)
                        self.state = 1705
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==131:
                            self.state = 1702
                            self.match(SolidityParser.NL)
                            self.state = 1707
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1709
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if ((((_la - 4)) & ~0x3f) == 0 and ((1 << (_la - 4)) & -289356135933935103) != 0) or ((((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & 15707933693) != 0):
                            self.state = 1708
                            self.expression(0)


                        self.state = 1711
                        self.match(SolidityParser.T__61)
                        self.state = 1715
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==131:
                            self.state = 1712
                            self.match(SolidityParser.NL)
                            self.state = 1717
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1719
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if ((((_la - 4)) & ~0x3f) == 0 and ((1 << (_la - 4)) & -289356135933935103) != 0) or ((((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & 15707933693) != 0):
                            self.state = 1718
                            self.expression(0)


                        self.state = 1721
                        self.match(SolidityParser.T__33)
                        self.state = 1725
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,236,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 1722
                                self.match(SolidityParser.NL) 
                            self.state = 1727
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,236,self._ctx)

                        pass

                    elif la_ == 17:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1728
                        if not self.precpred(self._ctx, 23):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 23)")
                        self.state = 1729
                        self.match(SolidityParser.T__35)
                        self.state = 1733
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==131:
                            self.state = 1730
                            self.match(SolidityParser.NL)
                            self.state = 1735
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1736
                        self.identifier()
                        pass

                    elif la_ == 18:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1737
                        if not self.precpred(self._ctx, 22):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 22)")
                        self.state = 1738
                        self.match(SolidityParser.T__13)
                        self.state = 1742
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==131:
                            self.state = 1739
                            self.match(SolidityParser.NL)
                            self.state = 1744
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1745
                        self.nameValueList()
                        self.state = 1746
                        self.match(SolidityParser.T__15)
                        self.state = 1750
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,239,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 1747
                                self.match(SolidityParser.NL) 
                            self.state = 1752
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,239,self._ctx)

                        pass

                    elif la_ == 19:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1753
                        if not self.precpred(self._ctx, 21):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 21)")
                        self.state = 1754
                        self.match(SolidityParser.T__21)
                        self.state = 1758
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==131:
                            self.state = 1755
                            self.match(SolidityParser.NL)
                            self.state = 1760
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1761
                        self.functionCallArguments()
                        self.state = 1762
                        self.match(SolidityParser.T__22)
                        self.state = 1766
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,241,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 1763
                                self.match(SolidityParser.NL) 
                            self.state = 1768
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,241,self._ctx)

                        pass

             
                self.state = 1773
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,243,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class PrimaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BooleanLiteral(self):
            return self.getToken(SolidityParser.BooleanLiteral, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.NL)
            else:
                return self.getToken(SolidityParser.NL, i)

        def numberLiteral(self):
            return self.getTypedRuleContext(SolidityParser.NumberLiteralContext,0)


        def hexLiteral(self):
            return self.getTypedRuleContext(SolidityParser.HexLiteralContext,0)


        def stringLiteral(self):
            return self.getTypedRuleContext(SolidityParser.StringLiteralContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def TypeKeyword(self):
            return self.getToken(SolidityParser.TypeKeyword, 0)

        def PayableKeyword(self):
            return self.getToken(SolidityParser.PayableKeyword, 0)

        def tupleExpression(self):
            return self.getTypedRuleContext(SolidityParser.TupleExpressionContext,0)


        def typeNameExpression(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_primaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryExpression" ):
                listener.enterPrimaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryExpression" ):
                listener.exitPrimaryExpression(self)




    def primaryExpression(self):

        localctx = SolidityParser.PrimaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_primaryExpression)
        self._la = 0 # Token type
        try:
            self.state = 1833
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,253,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1774
                self.match(SolidityParser.BooleanLiteral)
                self.state = 1778
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,244,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1775
                        self.match(SolidityParser.NL) 
                    self.state = 1780
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,244,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1781
                self.numberLiteral()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1782
                self.hexLiteral()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1783
                self.stringLiteral()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1784
                self.identifier()
                self.state = 1799
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,247,self._ctx)
                if la_ == 1:
                    self.state = 1785
                    self.match(SolidityParser.T__32)
                    self.state = 1789
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==131:
                        self.state = 1786
                        self.match(SolidityParser.NL)
                        self.state = 1791
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1792
                    self.match(SolidityParser.T__33)
                    self.state = 1796
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,246,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1793
                            self.match(SolidityParser.NL) 
                        self.state = 1798
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,246,self._ctx)



                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1801
                self.match(SolidityParser.TypeKeyword)
                self.state = 1805
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,248,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1802
                        self.match(SolidityParser.NL) 
                    self.state = 1807
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,248,self._ctx)

                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1808
                self.match(SolidityParser.PayableKeyword)
                self.state = 1812
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,249,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1809
                        self.match(SolidityParser.NL) 
                    self.state = 1814
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,249,self._ctx)

                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1815
                self.tupleExpression()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1816
                self.typeNameExpression()
                self.state = 1831
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,252,self._ctx)
                if la_ == 1:
                    self.state = 1817
                    self.match(SolidityParser.T__32)
                    self.state = 1821
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==131:
                        self.state = 1818
                        self.match(SolidityParser.NL)
                        self.state = 1823
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1824
                    self.match(SolidityParser.T__33)
                    self.state = 1828
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,251,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1825
                            self.match(SolidityParser.NL) 
                        self.state = 1830
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,251,self._ctx)



                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.NL)
            else:
                return self.getToken(SolidityParser.NL, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_expressionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionList" ):
                listener.enterExpressionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionList" ):
                listener.exitExpressionList(self)




    def expressionList(self):

        localctx = SolidityParser.ExpressionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_expressionList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1835
            self.expression(0)
            self.state = 1846
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==15:
                self.state = 1836
                self.match(SolidityParser.T__14)
                self.state = 1840
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 1837
                    self.match(SolidityParser.NL)
                    self.state = 1842
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1843
                self.expression(0)
                self.state = 1848
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NameValueListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nameValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.NameValueContext)
            else:
                return self.getTypedRuleContext(SolidityParser.NameValueContext,i)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.NL)
            else:
                return self.getToken(SolidityParser.NL, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_nameValueList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNameValueList" ):
                listener.enterNameValueList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNameValueList" ):
                listener.exitNameValueList(self)




    def nameValueList(self):

        localctx = SolidityParser.NameValueListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_nameValueList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1849
            self.nameValue()
            self.state = 1860
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,257,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1850
                    self.match(SolidityParser.T__14)
                    self.state = 1854
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==131:
                        self.state = 1851
                        self.match(SolidityParser.NL)
                        self.state = 1856
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1857
                    self.nameValue() 
                self.state = 1862
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,257,self._ctx)

            self.state = 1870
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==15:
                self.state = 1863
                self.match(SolidityParser.T__14)
                self.state = 1867
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 1864
                    self.match(SolidityParser.NL)
                    self.state = 1869
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NameValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.NL)
            else:
                return self.getToken(SolidityParser.NL, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_nameValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNameValue" ):
                listener.enterNameValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNameValue" ):
                listener.exitNameValue(self)




    def nameValue(self):

        localctx = SolidityParser.NameValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_nameValue)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1872
            self.identifier()
            self.state = 1873
            self.match(SolidityParser.T__61)
            self.state = 1877
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 1874
                self.match(SolidityParser.NL)
                self.state = 1879
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1880
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionCallArgumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.NL)
            else:
                return self.getToken(SolidityParser.NL, i)

        def nameValueList(self):
            return self.getTypedRuleContext(SolidityParser.NameValueListContext,0)


        def expressionList(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_functionCallArguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCallArguments" ):
                listener.enterFunctionCallArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCallArguments" ):
                listener.exitFunctionCallArguments(self)




    def functionCallArguments(self):

        localctx = SolidityParser.FunctionCallArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_functionCallArguments)
        self._la = 0 # Token type
        try:
            self.state = 1902
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [14]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1882
                self.match(SolidityParser.T__13)
                self.state = 1886
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 1883
                    self.match(SolidityParser.NL)
                    self.state = 1888
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1890
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 18016597549522944) != 0) or ((((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & 6983778305) != 0):
                    self.state = 1889
                    self.nameValueList()


                self.state = 1892
                self.match(SolidityParser.T__15)
                self.state = 1896
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 1893
                    self.match(SolidityParser.NL)
                    self.state = 1898
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [4, 13, 22, 23, 24, 33, 35, 41, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 96, 98, 99, 100, 101, 102, 103, 104, 105, 107, 114, 118, 123, 125, 127, 128, 129]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1900
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 4)) & ~0x3f) == 0 and ((1 << (_la - 4)) & -289356135933935103) != 0) or ((((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & 15707933693) != 0):
                    self.state = 1899
                    self.expressionList()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def functionCallArguments(self):
            return self.getTypedRuleContext(SolidityParser.FunctionCallArgumentsContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.NL)
            else:
                return self.getToken(SolidityParser.NL, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_functionCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCall" ):
                listener.enterFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCall" ):
                listener.exitFunctionCall(self)




    def functionCall(self):

        localctx = SolidityParser.FunctionCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_functionCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1904
            self.expression(0)
            self.state = 1905
            self.match(SolidityParser.T__21)
            self.state = 1909
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 1906
                self.match(SolidityParser.NL)
                self.state = 1911
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1912
            self.functionCallArguments()
            self.state = 1913
            self.match(SolidityParser.T__22)
            self.state = 1917
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,267,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1914
                    self.match(SolidityParser.NL) 
                self.state = 1919
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,267,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.NL)
            else:
                return self.getToken(SolidityParser.NL, i)

        def assemblyItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.AssemblyItemContext)
            else:
                return self.getTypedRuleContext(SolidityParser.AssemblyItemContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyBlock" ):
                listener.enterAssemblyBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyBlock" ):
                listener.exitAssemblyBlock(self)




    def assemblyBlock(self):

        localctx = SolidityParser.AssemblyBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_assemblyBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1920
            self.match(SolidityParser.T__13)
            self.state = 1924
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 1921
                self.match(SolidityParser.NL)
                self.state = 1926
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1930
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 309066156482781184) != 0) or ((((_la - 89)) & ~0x3f) == 0 and ((1 << (_la - 89)) & 1993454485645) != 0):
                self.state = 1927
                self.assemblyItem()
                self.state = 1932
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1933
            self.match(SolidityParser.T__15)
            self.state = 1937
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 1934
                self.match(SolidityParser.NL)
                self.state = 1939
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def assemblyBlock(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyBlockContext,0)


        def assemblyExpression(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyExpressionContext,0)


        def assemblyLocalDefinition(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyLocalDefinitionContext,0)


        def assemblyAssignment(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyAssignmentContext,0)


        def assemblyStackAssignment(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyStackAssignmentContext,0)


        def labelDefinition(self):
            return self.getTypedRuleContext(SolidityParser.LabelDefinitionContext,0)


        def assemblySwitch(self):
            return self.getTypedRuleContext(SolidityParser.AssemblySwitchContext,0)


        def assemblyFunctionDefinition(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyFunctionDefinitionContext,0)


        def assemblyFor(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyForContext,0)


        def assemblyIf(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyIfContext,0)


        def BreakKeyword(self):
            return self.getToken(SolidityParser.BreakKeyword, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.NL)
            else:
                return self.getToken(SolidityParser.NL, i)

        def ContinueKeyword(self):
            return self.getToken(SolidityParser.ContinueKeyword, 0)

        def LeaveKeyword(self):
            return self.getToken(SolidityParser.LeaveKeyword, 0)

        def subAssembly(self):
            return self.getTypedRuleContext(SolidityParser.SubAssemblyContext,0)


        def numberLiteral(self):
            return self.getTypedRuleContext(SolidityParser.NumberLiteralContext,0)


        def stringLiteral(self):
            return self.getTypedRuleContext(SolidityParser.StringLiteralContext,0)


        def hexLiteral(self):
            return self.getTypedRuleContext(SolidityParser.HexLiteralContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyItem" ):
                listener.enterAssemblyItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyItem" ):
                listener.exitAssemblyItem(self)




    def assemblyItem(self):

        localctx = SolidityParser.AssemblyItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_assemblyItem)
        self._la = 0 # Token type
        try:
            self.state = 1976
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,274,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1940
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1941
                self.assemblyBlock()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1942
                self.assemblyExpression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1943
                self.assemblyLocalDefinition()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1944
                self.assemblyAssignment()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1945
                self.assemblyStackAssignment()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1946
                self.labelDefinition()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1947
                self.assemblySwitch()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1948
                self.assemblyFunctionDefinition()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1949
                self.assemblyFor()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1950
                self.assemblyIf()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1951
                self.match(SolidityParser.BreakKeyword)
                self.state = 1955
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 1952
                    self.match(SolidityParser.NL)
                    self.state = 1957
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1958
                self.match(SolidityParser.ContinueKeyword)
                self.state = 1962
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 1959
                    self.match(SolidityParser.NL)
                    self.state = 1964
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1965
                self.match(SolidityParser.LeaveKeyword)
                self.state = 1969
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 1966
                    self.match(SolidityParser.NL)
                    self.state = 1971
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1972
                self.subAssembly()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1973
                self.numberLiteral()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 1974
                self.stringLiteral()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 1975
                self.hexLiteral()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyCall(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyCallContext,0)


        def assemblyLiteral(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyLiteralContext,0)


        def assemblyMember(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyMemberContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyExpression" ):
                listener.enterAssemblyExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyExpression" ):
                listener.exitAssemblyExpression(self)




    def assemblyExpression(self):

        localctx = SolidityParser.AssemblyExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_assemblyExpression)
        try:
            self.state = 1981
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,275,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1978
                self.assemblyCall()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1979
                self.assemblyLiteral()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1980
                self.assemblyMember()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.IdentifierContext,i)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.NL)
            else:
                return self.getToken(SolidityParser.NL, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyMember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyMember" ):
                listener.enterAssemblyMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyMember" ):
                listener.exitAssemblyMember(self)




    def assemblyMember(self):

        localctx = SolidityParser.AssemblyMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_assemblyMember)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1983
            self.identifier()
            self.state = 1984
            self.match(SolidityParser.T__35)
            self.state = 1988
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 1985
                self.match(SolidityParser.NL)
                self.state = 1990
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1991
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.NL)
            else:
                return self.getToken(SolidityParser.NL, i)

        def assemblyExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.AssemblyExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.AssemblyExpressionContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyCall" ):
                listener.enterAssemblyCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyCall" ):
                listener.exitAssemblyCall(self)




    def assemblyCall(self):

        localctx = SolidityParser.AssemblyCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_assemblyCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2015
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [51]:
                self.state = 1993
                self.match(SolidityParser.T__50)
                self.state = 1997
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 1994
                    self.match(SolidityParser.NL)
                    self.state = 1999
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [35]:
                self.state = 2000
                self.match(SolidityParser.T__34)
                self.state = 2004
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 2001
                    self.match(SolidityParser.NL)
                    self.state = 2006
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [58]:
                self.state = 2007
                self.match(SolidityParser.T__57)
                self.state = 2011
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 2008
                    self.match(SolidityParser.NL)
                    self.state = 2013
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [13, 24, 41, 54, 96, 114, 118, 125, 127, 128]:
                self.state = 2014
                self.identifier()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2047
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,286,self._ctx)
            if la_ == 1:
                self.state = 2017
                self.match(SolidityParser.T__21)
                self.state = 2021
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 2018
                    self.match(SolidityParser.NL)
                    self.state = 2023
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2025
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 308498807874658304) != 0) or ((((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & 15573715713) != 0):
                    self.state = 2024
                    self.assemblyExpression()


                self.state = 2037
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==15:
                    self.state = 2027
                    self.match(SolidityParser.T__14)
                    self.state = 2031
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==131:
                        self.state = 2028
                        self.match(SolidityParser.NL)
                        self.state = 2033
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2034
                    self.assemblyExpression()
                    self.state = 2039
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2040
                self.match(SolidityParser.T__22)
                self.state = 2044
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 2041
                    self.match(SolidityParser.NL)
                    self.state = 2046
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyLocalDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyIdentifierOrList(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyIdentifierOrListContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.NL)
            else:
                return self.getToken(SolidityParser.NL, i)

        def assemblyExpression(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyLocalDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyLocalDefinition" ):
                listener.enterAssemblyLocalDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyLocalDefinition" ):
                listener.exitAssemblyLocalDefinition(self)




    def assemblyLocalDefinition(self):

        localctx = SolidityParser.AssemblyLocalDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_assemblyLocalDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2049
            self.match(SolidityParser.T__88)
            self.state = 2053
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 2050
                self.match(SolidityParser.NL)
                self.state = 2055
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2056
            self.assemblyIdentifierOrList()
            self.state = 2065
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==90:
                self.state = 2057
                self.match(SolidityParser.T__89)
                self.state = 2061
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 2058
                    self.match(SolidityParser.NL)
                    self.state = 2063
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2064
                self.assemblyExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyAssignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyIdentifierOrList(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyIdentifierOrListContext,0)


        def assemblyExpression(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyExpressionContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.NL)
            else:
                return self.getToken(SolidityParser.NL, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyAssignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyAssignment" ):
                listener.enterAssemblyAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyAssignment" ):
                listener.exitAssemblyAssignment(self)




    def assemblyAssignment(self):

        localctx = SolidityParser.AssemblyAssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_assemblyAssignment)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2067
            self.assemblyIdentifierOrList()
            self.state = 2068
            self.match(SolidityParser.T__89)
            self.state = 2072
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 2069
                self.match(SolidityParser.NL)
                self.state = 2074
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2075
            self.assemblyExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyIdentifierOrListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def assemblyMember(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyMemberContext,0)


        def assemblyIdentifierList(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyIdentifierListContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.NL)
            else:
                return self.getToken(SolidityParser.NL, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyIdentifierOrList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyIdentifierOrList" ):
                listener.enterAssemblyIdentifierOrList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyIdentifierOrList" ):
                listener.exitAssemblyIdentifierOrList(self)




    def assemblyIdentifierOrList(self):

        localctx = SolidityParser.AssemblyIdentifierOrListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_assemblyIdentifierOrList)
        self._la = 0 # Token type
        try:
            self.state = 2094
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,293,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2077
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2078
                self.assemblyMember()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2079
                self.match(SolidityParser.T__21)
                self.state = 2083
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 2080
                    self.match(SolidityParser.NL)
                    self.state = 2085
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2086
                self.assemblyIdentifierList()
                self.state = 2087
                self.match(SolidityParser.T__22)
                self.state = 2091
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 2088
                    self.match(SolidityParser.NL)
                    self.state = 2093
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyIdentifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.IdentifierContext,i)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.NL)
            else:
                return self.getToken(SolidityParser.NL, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyIdentifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyIdentifierList" ):
                listener.enterAssemblyIdentifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyIdentifierList" ):
                listener.exitAssemblyIdentifierList(self)




    def assemblyIdentifierList(self):

        localctx = SolidityParser.AssemblyIdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_assemblyIdentifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2096
            self.identifier()
            self.state = 2107
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==15:
                self.state = 2097
                self.match(SolidityParser.T__14)
                self.state = 2101
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 2098
                    self.match(SolidityParser.NL)
                    self.state = 2103
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2104
                self.identifier()
                self.state = 2109
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyStackAssignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.NL)
            else:
                return self.getToken(SolidityParser.NL, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyStackAssignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyStackAssignment" ):
                listener.enterAssemblyStackAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyStackAssignment" ):
                listener.exitAssemblyStackAssignment(self)




    def assemblyStackAssignment(self):

        localctx = SolidityParser.AssemblyStackAssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_assemblyStackAssignment)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2110
            self.match(SolidityParser.T__90)
            self.state = 2114
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 2111
                self.match(SolidityParser.NL)
                self.state = 2116
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2117
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabelDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.NL)
            else:
                return self.getToken(SolidityParser.NL, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_labelDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabelDefinition" ):
                listener.enterLabelDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabelDefinition" ):
                listener.exitLabelDefinition(self)




    def labelDefinition(self):

        localctx = SolidityParser.LabelDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_labelDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2119
            self.identifier()
            self.state = 2120
            self.match(SolidityParser.T__61)
            self.state = 2124
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 2121
                self.match(SolidityParser.NL)
                self.state = 2126
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblySwitchContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyExpression(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyExpressionContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.NL)
            else:
                return self.getToken(SolidityParser.NL, i)

        def assemblyCase(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.AssemblyCaseContext)
            else:
                return self.getTypedRuleContext(SolidityParser.AssemblyCaseContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblySwitch

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblySwitch" ):
                listener.enterAssemblySwitch(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblySwitch" ):
                listener.exitAssemblySwitch(self)




    def assemblySwitch(self):

        localctx = SolidityParser.AssemblySwitchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_assemblySwitch)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2127
            self.match(SolidityParser.T__91)
            self.state = 2131
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 2128
                self.match(SolidityParser.NL)
                self.state = 2133
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2134
            self.assemblyExpression()
            self.state = 2138
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==93 or _la==94:
                self.state = 2135
                self.assemblyCase()
                self.state = 2140
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyCaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyLiteral(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyLiteralContext,0)


        def assemblyBlock(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyBlockContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.NL)
            else:
                return self.getToken(SolidityParser.NL, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyCase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyCase" ):
                listener.enterAssemblyCase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyCase" ):
                listener.exitAssemblyCase(self)




    def assemblyCase(self):

        localctx = SolidityParser.AssemblyCaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_assemblyCase)
        self._la = 0 # Token type
        try:
            self.state = 2159
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [93]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2141
                self.match(SolidityParser.T__92)
                self.state = 2145
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 2142
                    self.match(SolidityParser.NL)
                    self.state = 2147
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2148
                self.assemblyLiteral()
                self.state = 2149
                self.assemblyBlock()
                pass
            elif token in [94]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2151
                self.match(SolidityParser.T__93)
                self.state = 2155
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 2152
                    self.match(SolidityParser.NL)
                    self.state = 2157
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2158
                self.assemblyBlock()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyFunctionDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def assemblyBlock(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyBlockContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.NL)
            else:
                return self.getToken(SolidityParser.NL, i)

        def assemblyIdentifierList(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyIdentifierListContext,0)


        def assemblyFunctionReturns(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyFunctionReturnsContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyFunctionDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyFunctionDefinition" ):
                listener.enterAssemblyFunctionDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyFunctionDefinition" ):
                listener.exitAssemblyFunctionDefinition(self)




    def assemblyFunctionDefinition(self):

        localctx = SolidityParser.AssemblyFunctionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_assemblyFunctionDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2161
            self.match(SolidityParser.T__28)
            self.state = 2165
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 2162
                self.match(SolidityParser.NL)
                self.state = 2167
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2168
            self.identifier()
            self.state = 2169
            self.match(SolidityParser.T__21)
            self.state = 2173
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 2170
                self.match(SolidityParser.NL)
                self.state = 2175
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2177
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 18016597549522944) != 0) or ((((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & 6983778305) != 0):
                self.state = 2176
                self.assemblyIdentifierList()


            self.state = 2179
            self.match(SolidityParser.T__22)
            self.state = 2183
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 2180
                self.match(SolidityParser.NL)
                self.state = 2185
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2187
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==95:
                self.state = 2186
                self.assemblyFunctionReturns()


            self.state = 2189
            self.assemblyBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyFunctionReturnsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyIdentifierList(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyIdentifierListContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.NL)
            else:
                return self.getToken(SolidityParser.NL, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyFunctionReturns

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyFunctionReturns" ):
                listener.enterAssemblyFunctionReturns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyFunctionReturns" ):
                listener.exitAssemblyFunctionReturns(self)




    def assemblyFunctionReturns(self):

        localctx = SolidityParser.AssemblyFunctionReturnsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_assemblyFunctionReturns)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2191
            self.match(SolidityParser.T__94)
            self.state = 2195
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 2192
                self.match(SolidityParser.NL)
                self.state = 2197
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2198
            self.assemblyIdentifierList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyForContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.AssemblyExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.AssemblyExpressionContext,i)


        def assemblyBlock(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.AssemblyBlockContext)
            else:
                return self.getTypedRuleContext(SolidityParser.AssemblyBlockContext,i)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.NL)
            else:
                return self.getToken(SolidityParser.NL, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyFor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyFor" ):
                listener.enterAssemblyFor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyFor" ):
                listener.exitAssemblyFor(self)




    def assemblyFor(self):

        localctx = SolidityParser.AssemblyForContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_assemblyFor)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2200
            self.match(SolidityParser.T__25)
            self.state = 2204
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 2201
                self.match(SolidityParser.NL)
                self.state = 2206
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2209
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [14]:
                self.state = 2207
                self.assemblyBlock()
                pass
            elif token in [13, 24, 35, 41, 51, 54, 58, 96, 104, 105, 107, 114, 118, 125, 127, 128, 129]:
                self.state = 2208
                self.assemblyExpression()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2211
            self.assemblyExpression()
            self.state = 2214
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [14]:
                self.state = 2212
                self.assemblyBlock()
                pass
            elif token in [13, 24, 35, 41, 51, 54, 58, 96, 104, 105, 107, 114, 118, 125, 127, 128, 129]:
                self.state = 2213
                self.assemblyExpression()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2216
            self.assemblyBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyIfContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyExpression(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyExpressionContext,0)


        def assemblyBlock(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyBlockContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.NL)
            else:
                return self.getToken(SolidityParser.NL, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyIf

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyIf" ):
                listener.enterAssemblyIf(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyIf" ):
                listener.exitAssemblyIf(self)




    def assemblyIf(self):

        localctx = SolidityParser.AssemblyIfContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_assemblyIf)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2218
            self.match(SolidityParser.T__41)
            self.state = 2222
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 2219
                self.match(SolidityParser.NL)
                self.state = 2224
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2225
            self.assemblyExpression()
            self.state = 2226
            self.assemblyBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stringLiteral(self):
            return self.getTypedRuleContext(SolidityParser.StringLiteralContext,0)


        def DecimalNumber(self):
            return self.getToken(SolidityParser.DecimalNumber, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.NL)
            else:
                return self.getToken(SolidityParser.NL, i)

        def HexNumber(self):
            return self.getToken(SolidityParser.HexNumber, 0)

        def hexLiteral(self):
            return self.getTypedRuleContext(SolidityParser.HexLiteralContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyLiteral" ):
                listener.enterAssemblyLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyLiteral" ):
                listener.exitAssemblyLiteral(self)




    def assemblyLiteral(self):

        localctx = SolidityParser.AssemblyLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_assemblyLiteral)
        self._la = 0 # Token type
        try:
            self.state = 2244
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [129]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2228
                self.stringLiteral()
                pass
            elif token in [104]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2229
                self.match(SolidityParser.DecimalNumber)
                self.state = 2233
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 2230
                    self.match(SolidityParser.NL)
                    self.state = 2235
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [105]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2236
                self.match(SolidityParser.HexNumber)
                self.state = 2240
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 2237
                    self.match(SolidityParser.NL)
                    self.state = 2242
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [107]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2243
                self.hexLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubAssemblyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def assemblyBlock(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyBlockContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.NL)
            else:
                return self.getToken(SolidityParser.NL, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_subAssembly

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubAssembly" ):
                listener.enterSubAssembly(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubAssembly" ):
                listener.exitSubAssembly(self)




    def subAssembly(self):

        localctx = SolidityParser.SubAssemblyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_subAssembly)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2246
            self.match(SolidityParser.T__48)
            self.state = 2250
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 2247
                self.match(SolidityParser.NL)
                self.state = 2252
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2253
            self.identifier()
            self.state = 2254
            self.assemblyBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TupleExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.NL)
            else:
                return self.getToken(SolidityParser.NL, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_tupleExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTupleExpression" ):
                listener.enterTupleExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTupleExpression" ):
                listener.exitTupleExpression(self)




    def tupleExpression(self):

        localctx = SolidityParser.TupleExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_tupleExpression)
        self._la = 0 # Token type
        try:
            self.state = 2318
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [22]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2256
                self.match(SolidityParser.T__21)
                self.state = 2260
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 2257
                    self.match(SolidityParser.NL)
                    self.state = 2262
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2264
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 4)) & ~0x3f) == 0 and ((1 << (_la - 4)) & -289356135933935103) != 0) or ((((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & 15707933693) != 0):
                    self.state = 2263
                    self.expression(0)


                self.state = 2278
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==15:
                    self.state = 2266
                    self.match(SolidityParser.T__14)
                    self.state = 2270
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==131:
                        self.state = 2267
                        self.match(SolidityParser.NL)
                        self.state = 2272
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2274
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 4)) & ~0x3f) == 0 and ((1 << (_la - 4)) & -289356135933935103) != 0) or ((((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & 15707933693) != 0):
                        self.state = 2273
                        self.expression(0)


                    self.state = 2280
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2281
                self.match(SolidityParser.T__22)
                self.state = 2285
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,322,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2282
                        self.match(SolidityParser.NL) 
                    self.state = 2287
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,322,self._ctx)

                pass
            elif token in [33]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2288
                self.match(SolidityParser.T__32)
                self.state = 2292
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 2289
                    self.match(SolidityParser.NL)
                    self.state = 2294
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2309
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 4)) & ~0x3f) == 0 and ((1 << (_la - 4)) & -289356135933935103) != 0) or ((((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & 15707933693) != 0):
                    self.state = 2295
                    self.expression(0)
                    self.state = 2306
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==15:
                        self.state = 2296
                        self.match(SolidityParser.T__14)
                        self.state = 2300
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==131:
                            self.state = 2297
                            self.match(SolidityParser.NL)
                            self.state = 2302
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 2303
                        self.expression(0)
                        self.state = 2308
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 2311
                self.match(SolidityParser.T__33)
                self.state = 2315
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,327,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2312
                        self.match(SolidityParser.NL) 
                    self.state = 2317
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,327,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeNameExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elementaryTypeName(self):
            return self.getTypedRuleContext(SolidityParser.ElementaryTypeNameContext,0)


        def userDefinedTypeName(self):
            return self.getTypedRuleContext(SolidityParser.UserDefinedTypeNameContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_typeNameExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeNameExpression" ):
                listener.enterTypeNameExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeNameExpression" ):
                listener.exitTypeNameExpression(self)




    def typeNameExpression(self):

        localctx = SolidityParser.TypeNameExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_typeNameExpression)
        try:
            self.state = 2322
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [35, 55, 56, 57, 58, 98, 99, 100, 101, 102]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2320
                self.elementaryTypeName()
                pass
            elif token in [13, 24, 41, 54, 96, 114, 118, 125, 127, 128]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2321
                self.userDefinedTypeName()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumberLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DecimalNumber(self):
            return self.getToken(SolidityParser.DecimalNumber, 0)

        def HexNumber(self):
            return self.getToken(SolidityParser.HexNumber, 0)

        def NumberUnit(self):
            return self.getToken(SolidityParser.NumberUnit, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.NL)
            else:
                return self.getToken(SolidityParser.NL, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_numberLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumberLiteral" ):
                listener.enterNumberLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumberLiteral" ):
                listener.exitNumberLiteral(self)




    def numberLiteral(self):

        localctx = SolidityParser.NumberLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_numberLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2338
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [104]:
                self.state = 2324
                self.match(SolidityParser.DecimalNumber)
                self.state = 2328
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,330,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2325
                        self.match(SolidityParser.NL) 
                    self.state = 2330
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,330,self._ctx)

                pass
            elif token in [105]:
                self.state = 2331
                self.match(SolidityParser.HexNumber)
                self.state = 2335
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,331,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2332
                        self.match(SolidityParser.NL) 
                    self.state = 2337
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,331,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

            self.state = 2347
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,334,self._ctx)
            if la_ == 1:
                self.state = 2340
                self.match(SolidityParser.NumberUnit)
                self.state = 2344
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,333,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2341
                        self.match(SolidityParser.NL) 
                    self.state = 2346
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,333,self._ctx)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ReceiveKeyword(self):
            return self.getToken(SolidityParser.ReceiveKeyword, 0)

        def ConstructorKeyword(self):
            return self.getToken(SolidityParser.ConstructorKeyword, 0)

        def PayableKeyword(self):
            return self.getToken(SolidityParser.PayableKeyword, 0)

        def LeaveKeyword(self):
            return self.getToken(SolidityParser.LeaveKeyword, 0)

        def Identifier(self):
            return self.getToken(SolidityParser.Identifier, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.NL)
            else:
                return self.getToken(SolidityParser.NL, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)




    def identifier(self):

        localctx = SolidityParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_identifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2349
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 18016597549522944) != 0) or ((((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & 6983778305) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2353
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,335,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2350
                    self.match(SolidityParser.NL) 
                self.state = 2355
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,335,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HexLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HexLiteralFragment(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.HexLiteralFragment)
            else:
                return self.getToken(SolidityParser.HexLiteralFragment, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.NL)
            else:
                return self.getToken(SolidityParser.NL, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_hexLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHexLiteral" ):
                listener.enterHexLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHexLiteral" ):
                listener.exitHexLiteral(self)




    def hexLiteral(self):

        localctx = SolidityParser.HexLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_hexLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2363 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2356
                    self.match(SolidityParser.HexLiteralFragment)
                    self.state = 2360
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,336,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 2357
                            self.match(SolidityParser.NL) 
                        self.state = 2362
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,336,self._ctx)


                else:
                    raise NoViableAltException(self)
                self.state = 2365 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,337,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OverrideSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.NL)
            else:
                return self.getToken(SolidityParser.NL, i)

        def userDefinedTypeName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.UserDefinedTypeNameContext)
            else:
                return self.getTypedRuleContext(SolidityParser.UserDefinedTypeNameContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_overrideSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOverrideSpecifier" ):
                listener.enterOverrideSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOverrideSpecifier" ):
                listener.exitOverrideSpecifier(self)




    def overrideSpecifier(self):

        localctx = SolidityParser.OverrideSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_overrideSpecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2367
            self.match(SolidityParser.T__96)
            self.state = 2371
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,338,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2368
                    self.match(SolidityParser.NL) 
                self.state = 2373
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,338,self._ctx)

            self.state = 2402
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==22:
                self.state = 2374
                self.match(SolidityParser.T__21)
                self.state = 2378
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 2375
                    self.match(SolidityParser.NL)
                    self.state = 2380
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2381
                self.userDefinedTypeName()
                self.state = 2392
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==15:
                    self.state = 2382
                    self.match(SolidityParser.T__14)
                    self.state = 2386
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==131:
                        self.state = 2383
                        self.match(SolidityParser.NL)
                        self.state = 2388
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2389
                    self.userDefinedTypeName()
                    self.state = 2394
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2395
                self.match(SolidityParser.T__22)
                self.state = 2399
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,342,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2396
                        self.match(SolidityParser.NL) 
                    self.state = 2401
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,342,self._ctx)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLiteralFragment(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.StringLiteralFragment)
            else:
                return self.getToken(SolidityParser.StringLiteralFragment, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.NL)
            else:
                return self.getToken(SolidityParser.NL, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_stringLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringLiteral" ):
                listener.enterStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringLiteral" ):
                listener.exitStringLiteral(self)




    def stringLiteral(self):

        localctx = SolidityParser.StringLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_stringLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2411 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2404
                    self.match(SolidityParser.StringLiteralFragment)
                    self.state = 2408
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,344,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 2405
                            self.match(SolidityParser.NL) 
                        self.state = 2410
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,344,self._ctx)


                else:
                    raise NoViableAltException(self)
                self.state = 2413 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,345,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EosContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.NL)
            else:
                return self.getToken(SolidityParser.NL, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_eos

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEos" ):
                listener.enterEos(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEos" ):
                listener.exitEos(self)




    def eos(self):

        localctx = SolidityParser.EosContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_eos)
        self._la = 0 # Token type
        try:
            self.state = 2427
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [48]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2415
                self.match(SolidityParser.T__47)
                self.state = 2419
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 2416
                    self.match(SolidityParser.NL)
                    self.state = 2421
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [131]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2423 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2422
                    self.match(SolidityParser.NL)
                    self.state = 2425 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==131):
                        break

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[34] = self.typeName_sempred
        self._predicates[63] = self.expression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def typeName_sempred(self, localctx:TypeNameContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 3)
         

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 13)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 27)
         

            if predIndex == 15:
                return self.precpred(self._ctx, 25)
         

            if predIndex == 16:
                return self.precpred(self._ctx, 24)
         

            if predIndex == 17:
                return self.precpred(self._ctx, 23)
         

            if predIndex == 18:
                return self.precpred(self._ctx, 22)
         

            if predIndex == 19:
                return self.precpred(self._ctx, 21)
         




