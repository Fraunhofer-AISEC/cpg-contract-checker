# Generated from antlr/FuzzySolidity.g4 by ANTLR 4.11.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,134,2420,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,1,0,5,0,196,
        8,0,10,0,12,0,199,9,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,5,
        0,211,8,0,10,0,12,0,214,9,0,1,0,1,0,1,1,1,1,5,1,220,8,1,10,1,12,
        1,223,9,1,1,1,1,1,1,1,1,1,1,2,1,2,1,3,1,3,3,3,233,8,3,1,4,1,4,1,
        4,5,4,238,8,4,10,4,12,4,241,9,4,3,4,243,8,4,1,4,5,4,246,8,4,10,4,
        12,4,249,9,4,1,5,1,5,5,5,253,8,5,10,5,12,5,256,9,5,1,6,3,6,259,8,
        6,1,6,1,6,5,6,263,8,6,10,6,12,6,266,9,6,1,6,3,6,269,8,6,1,6,1,6,
        5,6,273,8,6,10,6,12,6,276,9,6,3,6,278,8,6,1,7,1,7,1,7,5,7,283,8,
        7,10,7,12,7,286,9,7,1,7,3,7,289,8,7,1,8,1,8,5,8,293,8,8,10,8,12,
        8,296,9,8,1,8,1,8,1,8,5,8,301,8,8,10,8,12,8,304,9,8,1,8,3,8,307,
        8,8,1,8,1,8,1,8,1,8,5,8,313,8,8,10,8,12,8,316,9,8,1,8,1,8,5,8,320,
        8,8,10,8,12,8,323,9,8,1,8,3,8,326,8,8,1,8,1,8,5,8,330,8,8,10,8,12,
        8,333,9,8,1,8,3,8,336,8,8,1,8,1,8,5,8,340,8,8,10,8,12,8,343,9,8,
        1,8,1,8,1,8,1,8,1,8,5,8,350,8,8,10,8,12,8,353,9,8,1,8,1,8,5,8,357,
        8,8,10,8,12,8,360,9,8,1,8,1,8,1,8,5,8,365,8,8,10,8,12,8,368,9,8,
        1,8,5,8,371,8,8,10,8,12,8,374,9,8,1,8,1,8,5,8,378,8,8,10,8,12,8,
        381,9,8,1,8,1,8,5,8,385,8,8,10,8,12,8,388,9,8,1,8,1,8,1,8,3,8,393,
        8,8,1,9,1,9,1,10,1,10,5,10,399,8,10,10,10,12,10,402,9,10,3,10,404,
        8,10,1,10,1,10,5,10,408,8,10,10,10,12,10,411,9,10,1,10,1,10,1,10,
        5,10,416,8,10,10,10,12,10,419,9,10,1,10,1,10,1,10,5,10,424,8,10,
        10,10,12,10,427,9,10,1,10,5,10,430,8,10,10,10,12,10,433,9,10,3,10,
        435,8,10,1,10,1,10,5,10,439,8,10,10,10,12,10,442,9,10,1,10,5,10,
        445,8,10,10,10,12,10,448,9,10,1,10,1,10,5,10,452,8,10,10,10,12,10,
        455,9,10,1,11,1,11,1,11,5,11,460,8,11,10,11,12,11,463,9,11,1,11,
        3,11,466,8,11,1,11,1,11,5,11,470,8,11,10,11,12,11,473,9,11,3,11,
        475,8,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,3,12,485,8,12,1,
        13,1,13,1,13,5,13,490,8,13,10,13,12,13,493,9,13,1,13,1,13,5,13,497,
        8,13,10,13,12,13,500,9,13,1,13,1,13,5,13,504,8,13,10,13,12,13,507,
        9,13,1,13,1,13,5,13,511,8,13,10,13,12,13,514,9,13,1,13,1,13,5,13,
        518,8,13,10,13,12,13,521,9,13,1,13,5,13,524,8,13,10,13,12,13,527,
        9,13,1,13,1,13,1,13,5,13,532,8,13,10,13,12,13,535,9,13,1,13,3,13,
        538,8,13,1,13,1,13,1,14,1,14,1,14,5,14,545,8,14,10,14,12,14,548,
        9,14,1,14,1,14,1,14,5,14,553,8,14,10,14,12,14,556,9,14,1,14,1,14,
        1,14,1,15,1,15,5,15,563,8,15,10,15,12,15,566,9,15,1,15,1,15,1,15,
        1,15,1,16,1,16,5,16,574,8,16,10,16,12,16,577,9,16,1,16,1,16,1,16,
        5,16,582,8,16,10,16,12,16,585,9,16,1,16,1,16,5,16,589,8,16,10,16,
        12,16,592,9,16,1,16,3,16,595,8,16,1,16,1,16,1,17,1,17,5,17,601,8,
        17,10,17,12,17,604,9,17,1,17,1,17,1,17,5,17,609,8,17,10,17,12,17,
        612,9,17,1,17,1,17,1,17,1,17,1,17,5,17,619,8,17,10,17,12,17,622,
        9,17,3,17,624,8,17,1,17,1,17,5,17,628,8,17,10,17,12,17,631,9,17,
        1,18,1,18,5,18,635,8,18,10,18,12,18,638,9,18,1,18,1,18,3,18,642,
        8,18,1,18,1,18,5,18,646,8,18,10,18,12,18,649,9,18,1,18,5,18,652,
        8,18,10,18,12,18,655,9,18,1,18,1,18,3,18,659,8,18,1,19,1,19,1,19,
        5,19,664,8,19,10,19,12,19,667,9,19,1,19,3,19,670,8,19,1,19,1,19,
        5,19,674,8,19,10,19,12,19,677,9,19,3,19,679,8,19,1,20,1,20,1,20,
        1,20,3,20,685,8,20,1,20,1,20,3,20,689,8,20,1,21,1,21,5,21,693,8,
        21,10,21,12,21,696,9,21,1,21,3,21,699,8,21,1,21,1,21,5,21,703,8,
        21,10,21,12,21,706,9,21,1,21,1,21,5,21,710,8,21,10,21,12,21,713,
        9,21,1,21,1,21,5,21,717,8,21,10,21,12,21,720,9,21,3,21,722,8,21,
        1,22,1,22,5,22,726,8,22,10,22,12,22,729,9,22,1,22,1,22,1,23,1,23,
        5,23,735,8,23,10,23,12,23,738,9,23,1,23,1,23,5,23,742,8,23,10,23,
        12,23,745,9,23,1,23,1,23,5,23,749,8,23,10,23,12,23,752,9,23,1,23,
        1,23,5,23,756,8,23,10,23,12,23,759,9,23,1,23,1,23,5,23,763,8,23,
        10,23,12,23,766,9,23,1,23,1,23,1,23,5,23,771,8,23,10,23,12,23,774,
        9,23,1,24,1,24,5,24,778,8,24,10,24,12,24,781,9,24,1,24,1,24,1,24,
        1,24,5,24,787,8,24,10,24,12,24,790,9,24,3,24,792,8,24,1,24,1,24,
        1,25,1,25,1,26,1,26,5,26,800,8,26,10,26,12,26,803,9,26,1,26,1,26,
        1,26,5,26,808,8,26,10,26,12,26,811,9,26,1,26,3,26,814,8,26,1,26,
        1,26,5,26,818,8,26,10,26,12,26,821,9,26,1,26,5,26,824,8,26,10,26,
        12,26,827,9,26,1,26,1,26,5,26,831,8,26,10,26,12,26,834,9,26,1,27,
        1,27,5,27,838,8,27,10,27,12,27,841,9,27,1,27,1,27,1,27,5,27,846,
        8,27,10,27,12,27,849,9,27,1,27,5,27,852,8,27,10,27,12,27,855,9,27,
        3,27,857,8,27,1,27,1,27,5,27,861,8,27,10,27,12,27,864,9,27,1,28,
        1,28,3,28,868,8,28,1,28,3,28,871,8,28,1,29,1,29,5,29,875,8,29,10,
        29,12,29,878,9,29,1,29,1,29,1,29,5,29,883,8,29,10,29,12,29,886,9,
        29,1,29,5,29,889,8,29,10,29,12,29,892,9,29,3,29,894,8,29,1,29,1,
        29,5,29,898,8,29,10,29,12,29,901,9,29,1,30,1,30,1,30,5,30,906,8,
        30,10,30,12,30,909,9,30,3,30,911,8,30,1,30,3,30,914,8,30,1,31,1,
        31,5,31,918,8,31,10,31,12,31,921,9,31,1,31,1,31,1,31,5,31,926,8,
        31,10,31,12,31,929,9,31,1,31,5,31,932,8,31,10,31,12,31,935,9,31,
        3,31,937,8,31,1,31,1,31,5,31,941,8,31,10,31,12,31,944,9,31,1,32,
        1,32,3,32,948,8,32,1,33,1,33,3,33,952,8,33,1,33,1,33,1,34,1,34,1,
        34,1,34,1,34,1,34,1,34,5,34,963,8,34,10,34,12,34,966,9,34,1,34,1,
        34,5,34,970,8,34,10,34,12,34,973,9,34,3,34,975,8,34,1,34,1,34,1,
        34,5,34,980,8,34,10,34,12,34,983,9,34,1,34,3,34,986,8,34,1,34,1,
        34,5,34,990,8,34,10,34,12,34,993,9,34,5,34,995,8,34,10,34,12,34,
        998,9,34,1,35,1,35,1,35,5,35,1003,8,35,10,35,12,35,1006,9,35,1,35,
        5,35,1009,8,35,10,35,12,35,1012,9,35,1,36,1,36,3,36,1016,8,36,1,
        37,1,37,5,37,1020,8,37,10,37,12,37,1023,9,37,1,37,1,37,5,37,1027,
        8,37,10,37,12,37,1030,9,37,1,37,1,37,1,37,5,37,1035,8,37,10,37,12,
        37,1038,9,37,1,37,1,37,1,37,5,37,1043,8,37,10,37,12,37,1046,9,37,
        1,38,1,38,5,38,1050,8,38,10,38,12,38,1053,9,38,1,38,1,38,1,38,5,
        38,1058,8,38,10,38,12,38,1061,9,38,1,38,1,38,5,38,1065,8,38,10,38,
        12,38,1068,9,38,1,38,5,38,1071,8,38,10,38,12,38,1074,9,38,1,38,1,
        38,5,38,1078,8,38,10,38,12,38,1081,9,38,1,38,3,38,1084,8,38,1,39,
        1,39,5,39,1088,8,39,10,39,12,39,1091,9,39,1,40,1,40,5,40,1095,8,
        40,10,40,12,40,1098,9,40,1,41,1,41,5,41,1102,8,41,10,41,12,41,1105,
        9,41,1,41,5,41,1108,8,41,10,41,12,41,1111,9,41,1,41,1,41,5,41,1115,
        8,41,10,41,12,41,1118,9,41,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,
        42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,3,42,1135,8,42,1,43,1,43,1,
        43,1,44,1,44,5,44,1142,8,44,10,44,12,44,1145,9,44,1,44,1,44,5,44,
        1149,8,44,10,44,12,44,1152,9,44,1,44,1,44,1,44,5,44,1157,8,44,10,
        44,12,44,1160,9,44,1,44,1,44,1,44,5,44,1165,8,44,10,44,12,44,1168,
        9,44,1,44,3,44,1171,8,44,1,45,1,45,5,45,1175,8,45,10,45,12,45,1178,
        9,45,1,45,1,45,3,45,1182,8,45,1,45,1,45,4,45,1186,8,45,11,45,12,
        45,1187,1,46,1,46,5,46,1192,8,46,10,46,12,46,1195,9,46,1,46,3,46,
        1198,8,46,1,46,3,46,1201,8,46,1,46,1,46,1,47,1,47,5,47,1207,8,47,
        10,47,12,47,1210,9,47,1,47,1,47,5,47,1214,8,47,10,47,12,47,1217,
        9,47,1,47,1,47,1,47,5,47,1222,8,47,10,47,12,47,1225,9,47,1,47,1,
        47,1,48,1,48,3,48,1231,8,48,1,49,1,49,5,49,1235,8,49,10,49,12,49,
        1238,9,49,1,49,1,49,1,50,1,50,5,50,1244,8,50,10,50,12,50,1247,9,
        50,1,50,1,50,5,50,1251,8,50,10,50,12,50,1254,9,50,1,50,1,50,1,50,
        5,50,1259,8,50,10,50,12,50,1262,9,50,3,50,1264,8,50,1,50,1,50,1,
        50,5,50,1269,8,50,10,50,12,50,1272,9,50,3,50,1274,8,50,1,50,3,50,
        1277,8,50,1,50,1,50,5,50,1281,8,50,10,50,12,50,1284,9,50,1,50,1,
        50,1,51,1,51,5,51,1290,8,51,10,51,12,51,1293,9,51,1,51,1,51,5,51,
        1297,8,51,10,51,12,51,1300,9,51,3,51,1302,8,51,1,51,1,51,1,52,1,
        52,5,52,1308,8,52,10,52,12,52,1311,9,52,1,52,1,52,1,52,5,52,1316,
        8,52,10,52,12,52,1319,9,52,1,52,1,52,5,52,1323,8,52,10,52,12,52,
        1326,9,52,1,52,1,52,1,52,5,52,1331,8,52,10,52,12,52,1334,9,52,1,
        52,1,52,1,53,1,53,1,53,1,54,1,54,1,54,1,55,1,55,5,55,1346,8,55,10,
        55,12,55,1349,9,55,1,55,3,55,1352,8,55,1,55,1,55,1,56,1,56,1,56,
        1,57,1,57,5,57,1361,8,57,10,57,12,57,1364,9,57,1,57,1,57,1,57,1,
        58,1,58,5,58,1371,8,58,10,58,12,58,1374,9,58,1,58,1,58,1,58,1,59,
        1,59,5,59,1381,8,59,10,59,12,59,1384,9,59,1,59,1,59,1,59,1,59,5,
        59,1390,8,59,10,59,12,59,1393,9,59,1,59,1,59,1,59,5,59,1398,8,59,
        10,59,12,59,1401,9,59,3,59,1403,8,59,1,59,1,59,5,59,1407,8,59,10,
        59,12,59,1410,9,59,1,59,3,59,1413,8,59,1,59,1,59,1,60,3,60,1418,
        8,60,1,60,1,60,5,60,1422,8,60,10,60,12,60,1425,9,60,1,60,3,60,1428,
        8,60,5,60,1430,8,60,10,60,12,60,1433,9,60,1,61,1,61,5,61,1437,8,
        61,10,61,12,61,1440,9,61,1,61,3,61,1443,8,61,1,61,1,61,5,61,1447,
        8,61,10,61,12,61,1450,9,61,5,61,1452,8,61,10,61,12,61,1455,9,61,
        1,61,3,61,1458,8,61,1,61,1,61,5,61,1462,8,61,10,61,12,61,1465,9,
        61,1,62,1,62,5,62,1469,8,62,10,62,12,62,1472,9,62,1,63,1,63,1,63,
        5,63,1477,8,63,10,63,12,63,1480,9,63,1,63,1,63,1,63,5,63,1485,8,
        63,10,63,12,63,1488,9,63,1,63,1,63,1,63,5,63,1493,8,63,10,63,12,
        63,1496,9,63,1,63,1,63,5,63,1500,8,63,10,63,12,63,1503,9,63,1,63,
        1,63,1,63,5,63,1508,8,63,10,63,12,63,1511,9,63,1,63,1,63,1,63,5,
        63,1516,8,63,10,63,12,63,1519,9,63,1,63,1,63,1,63,5,63,1524,8,63,
        10,63,12,63,1527,9,63,1,63,1,63,1,63,5,63,1532,8,63,10,63,12,63,
        1535,9,63,1,63,1,63,3,63,1539,8,63,1,63,1,63,1,63,5,63,1544,8,63,
        10,63,12,63,1547,9,63,1,63,1,63,1,63,1,63,5,63,1553,8,63,10,63,12,
        63,1556,9,63,1,63,1,63,1,63,1,63,5,63,1562,8,63,10,63,12,63,1565,
        9,63,1,63,1,63,1,63,1,63,5,63,1571,8,63,10,63,12,63,1574,9,63,1,
        63,1,63,1,63,1,63,5,63,1580,8,63,10,63,12,63,1583,9,63,1,63,1,63,
        1,63,1,63,5,63,1589,8,63,10,63,12,63,1592,9,63,1,63,1,63,1,63,1,
        63,5,63,1598,8,63,10,63,12,63,1601,9,63,1,63,1,63,1,63,1,63,5,63,
        1607,8,63,10,63,12,63,1610,9,63,1,63,1,63,1,63,1,63,5,63,1616,8,
        63,10,63,12,63,1619,9,63,1,63,1,63,1,63,1,63,5,63,1625,8,63,10,63,
        12,63,1628,9,63,1,63,1,63,1,63,1,63,5,63,1634,8,63,10,63,12,63,1637,
        9,63,1,63,1,63,1,63,1,63,5,63,1643,8,63,10,63,12,63,1646,9,63,1,
        63,1,63,1,63,5,63,1651,8,63,10,63,12,63,1654,9,63,1,63,1,63,1,63,
        1,63,1,63,5,63,1661,8,63,10,63,12,63,1664,9,63,1,63,1,63,1,63,1,
        63,5,63,1670,8,63,10,63,12,63,1673,9,63,1,63,1,63,1,63,5,63,1678,
        8,63,10,63,12,63,1681,9,63,1,63,1,63,1,63,5,63,1686,8,63,10,63,12,
        63,1689,9,63,1,63,1,63,1,63,5,63,1694,8,63,10,63,12,63,1697,9,63,
        1,63,3,63,1700,8,63,1,63,1,63,5,63,1704,8,63,10,63,12,63,1707,9,
        63,1,63,3,63,1710,8,63,1,63,1,63,5,63,1714,8,63,10,63,12,63,1717,
        9,63,1,63,1,63,1,63,5,63,1722,8,63,10,63,12,63,1725,9,63,1,63,1,
        63,1,63,1,63,5,63,1731,8,63,10,63,12,63,1734,9,63,1,63,1,63,1,63,
        5,63,1739,8,63,10,63,12,63,1742,9,63,1,63,1,63,1,63,5,63,1747,8,
        63,10,63,12,63,1750,9,63,1,63,1,63,1,63,5,63,1755,8,63,10,63,12,
        63,1758,9,63,5,63,1760,8,63,10,63,12,63,1763,9,63,1,64,1,64,5,64,
        1767,8,64,10,64,12,64,1770,9,64,1,64,1,64,1,64,1,64,1,64,1,64,5,
        64,1778,8,64,10,64,12,64,1781,9,64,1,64,1,64,5,64,1785,8,64,10,64,
        12,64,1788,9,64,3,64,1790,8,64,1,64,1,64,5,64,1794,8,64,10,64,12,
        64,1797,9,64,1,64,1,64,5,64,1801,8,64,10,64,12,64,1804,9,64,1,64,
        1,64,1,64,1,64,5,64,1810,8,64,10,64,12,64,1813,9,64,1,64,1,64,5,
        64,1817,8,64,10,64,12,64,1820,9,64,3,64,1822,8,64,3,64,1824,8,64,
        1,65,1,65,1,65,5,65,1829,8,65,10,65,12,65,1832,9,65,1,65,5,65,1835,
        8,65,10,65,12,65,1838,9,65,1,66,1,66,1,66,5,66,1843,8,66,10,66,12,
        66,1846,9,66,1,66,5,66,1849,8,66,10,66,12,66,1852,9,66,1,66,1,66,
        5,66,1856,8,66,10,66,12,66,1859,9,66,3,66,1861,8,66,1,67,1,67,1,
        67,5,67,1866,8,67,10,67,12,67,1869,9,67,1,67,1,67,1,68,1,68,5,68,
        1875,8,68,10,68,12,68,1878,9,68,1,68,3,68,1881,8,68,1,68,1,68,5,
        68,1885,8,68,10,68,12,68,1888,9,68,1,68,3,68,1891,8,68,3,68,1893,
        8,68,1,69,1,69,1,69,5,69,1898,8,69,10,69,12,69,1901,9,69,1,69,1,
        69,1,69,5,69,1906,8,69,10,69,12,69,1909,9,69,1,70,1,70,5,70,1913,
        8,70,10,70,12,70,1916,9,70,1,70,5,70,1919,8,70,10,70,12,70,1922,
        9,70,1,70,1,70,5,70,1926,8,70,10,70,12,70,1929,9,70,1,71,1,71,1,
        71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,5,71,1944,8,
        71,10,71,12,71,1947,9,71,1,71,1,71,5,71,1951,8,71,10,71,12,71,1954,
        9,71,1,71,1,71,5,71,1958,8,71,10,71,12,71,1961,9,71,1,71,1,71,1,
        71,1,71,3,71,1967,8,71,1,72,1,72,1,72,3,72,1972,8,72,1,73,1,73,1,
        73,5,73,1977,8,73,10,73,12,73,1980,9,73,1,73,1,73,1,74,1,74,5,74,
        1986,8,74,10,74,12,74,1989,9,74,1,74,1,74,5,74,1993,8,74,10,74,12,
        74,1996,9,74,1,74,1,74,5,74,2000,8,74,10,74,12,74,2003,9,74,1,74,
        3,74,2006,8,74,1,74,1,74,5,74,2010,8,74,10,74,12,74,2013,9,74,1,
        74,3,74,2016,8,74,1,74,1,74,5,74,2020,8,74,10,74,12,74,2023,9,74,
        1,74,5,74,2026,8,74,10,74,12,74,2029,9,74,1,74,1,74,5,74,2033,8,
        74,10,74,12,74,2036,9,74,3,74,2038,8,74,1,75,1,75,5,75,2042,8,75,
        10,75,12,75,2045,9,75,1,75,1,75,1,75,5,75,2050,8,75,10,75,12,75,
        2053,9,75,1,75,3,75,2056,8,75,1,76,1,76,1,76,5,76,2061,8,76,10,76,
        12,76,2064,9,76,1,76,1,76,1,77,1,77,1,77,1,77,5,77,2072,8,77,10,
        77,12,77,2075,9,77,1,77,1,77,1,77,5,77,2080,8,77,10,77,12,77,2083,
        9,77,3,77,2085,8,77,1,78,1,78,1,78,5,78,2090,8,78,10,78,12,78,2093,
        9,78,1,78,5,78,2096,8,78,10,78,12,78,2099,9,78,1,79,1,79,5,79,2103,
        8,79,10,79,12,79,2106,9,79,1,79,1,79,1,80,1,80,1,80,5,80,2113,8,
        80,10,80,12,80,2116,9,80,1,81,1,81,5,81,2120,8,81,10,81,12,81,2123,
        9,81,1,81,1,81,5,81,2127,8,81,10,81,12,81,2130,9,81,1,82,1,82,5,
        82,2134,8,82,10,82,12,82,2137,9,82,1,82,1,82,1,82,1,82,1,82,5,82,
        2144,8,82,10,82,12,82,2147,9,82,1,82,3,82,2150,8,82,1,83,1,83,5,
        83,2154,8,83,10,83,12,83,2157,9,83,1,83,1,83,1,83,5,83,2162,8,83,
        10,83,12,83,2165,9,83,1,83,3,83,2168,8,83,1,83,1,83,5,83,2172,8,
        83,10,83,12,83,2175,9,83,1,83,3,83,2178,8,83,1,83,1,83,1,84,1,84,
        5,84,2184,8,84,10,84,12,84,2187,9,84,1,84,1,84,1,85,1,85,5,85,2193,
        8,85,10,85,12,85,2196,9,85,1,85,1,85,3,85,2200,8,85,1,85,1,85,1,
        85,3,85,2205,8,85,1,85,1,85,1,86,1,86,5,86,2211,8,86,10,86,12,86,
        2214,9,86,1,86,1,86,1,86,1,87,1,87,1,87,5,87,2222,8,87,10,87,12,
        87,2225,9,87,1,87,1,87,5,87,2229,8,87,10,87,12,87,2232,9,87,1,87,
        3,87,2235,8,87,1,88,1,88,5,88,2239,8,88,10,88,12,88,2242,9,88,1,
        88,1,88,1,88,1,89,1,89,5,89,2249,8,89,10,89,12,89,2252,9,89,1,89,
        3,89,2255,8,89,1,89,1,89,5,89,2259,8,89,10,89,12,89,2262,9,89,1,
        89,3,89,2265,8,89,5,89,2267,8,89,10,89,12,89,2270,9,89,1,89,1,89,
        5,89,2274,8,89,10,89,12,89,2277,9,89,1,89,1,89,5,89,2281,8,89,10,
        89,12,89,2284,9,89,1,89,1,89,1,89,5,89,2289,8,89,10,89,12,89,2292,
        9,89,1,89,5,89,2295,8,89,10,89,12,89,2298,9,89,3,89,2300,8,89,1,
        89,1,89,5,89,2304,8,89,10,89,12,89,2307,9,89,3,89,2309,8,89,1,90,
        1,90,3,90,2313,8,90,1,91,1,91,5,91,2317,8,91,10,91,12,91,2320,9,
        91,1,91,1,91,5,91,2324,8,91,10,91,12,91,2327,9,91,3,91,2329,8,91,
        1,91,1,91,5,91,2333,8,91,10,91,12,91,2336,9,91,3,91,2338,8,91,1,
        92,1,92,5,92,2342,8,92,10,92,12,92,2345,9,92,1,93,1,93,5,93,2349,
        8,93,10,93,12,93,2352,9,93,4,93,2354,8,93,11,93,12,93,2355,1,94,
        1,94,5,94,2360,8,94,10,94,12,94,2363,9,94,1,94,1,94,5,94,2367,8,
        94,10,94,12,94,2370,9,94,1,94,1,94,1,94,5,94,2375,8,94,10,94,12,
        94,2378,9,94,1,94,5,94,2381,8,94,10,94,12,94,2384,9,94,1,94,1,94,
        5,94,2388,8,94,10,94,12,94,2391,9,94,3,94,2393,8,94,1,95,1,95,5,
        95,2397,8,95,10,95,12,95,2400,9,95,4,95,2402,8,95,11,95,12,95,2403,
        1,96,1,96,5,96,2408,8,96,10,96,12,96,2411,9,96,1,96,4,96,2414,8,
        96,11,96,12,96,2415,3,96,2418,8,96,1,96,0,2,68,126,97,0,2,4,6,8,
        10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,
        54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,
        98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,
        132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,
        164,166,168,170,172,174,176,178,180,182,184,186,188,190,192,0,14,
        1,0,3,9,1,0,18,20,1,0,39,41,4,0,111,111,118,118,122,122,124,124,
        3,0,35,35,55,58,98,102,1,0,59,60,1,0,63,64,1,0,65,66,2,0,12,12,69,
        70,1,0,71,72,1,0,5,8,1,0,75,76,2,0,9,9,79,88,9,0,13,13,24,24,41,
        41,54,54,96,96,114,114,118,118,125,125,127,128,2766,0,197,1,0,0,
        0,2,217,1,0,0,0,4,228,1,0,0,0,6,232,1,0,0,0,8,234,1,0,0,0,10,250,
        1,0,0,0,12,277,1,0,0,0,14,279,1,0,0,0,16,392,1,0,0,0,18,394,1,0,
        0,0,20,403,1,0,0,0,22,456,1,0,0,0,24,484,1,0,0,0,26,486,1,0,0,0,
        28,541,1,0,0,0,30,560,1,0,0,0,32,571,1,0,0,0,34,598,1,0,0,0,36,632,
        1,0,0,0,38,660,1,0,0,0,40,680,1,0,0,0,42,721,1,0,0,0,44,723,1,0,
        0,0,46,772,1,0,0,0,48,775,1,0,0,0,50,795,1,0,0,0,52,797,1,0,0,0,
        54,835,1,0,0,0,56,865,1,0,0,0,58,872,1,0,0,0,60,902,1,0,0,0,62,915,
        1,0,0,0,64,945,1,0,0,0,66,949,1,0,0,0,68,974,1,0,0,0,70,999,1,0,
        0,0,72,1015,1,0,0,0,74,1017,1,0,0,0,76,1047,1,0,0,0,78,1085,1,0,
        0,0,80,1092,1,0,0,0,82,1099,1,0,0,0,84,1134,1,0,0,0,86,1136,1,0,
        0,0,88,1139,1,0,0,0,90,1172,1,0,0,0,92,1189,1,0,0,0,94,1204,1,0,
        0,0,96,1230,1,0,0,0,98,1232,1,0,0,0,100,1241,1,0,0,0,102,1287,1,
        0,0,0,104,1305,1,0,0,0,106,1337,1,0,0,0,108,1340,1,0,0,0,110,1343,
        1,0,0,0,112,1355,1,0,0,0,114,1358,1,0,0,0,116,1368,1,0,0,0,118,1402,
        1,0,0,0,120,1417,1,0,0,0,122,1434,1,0,0,0,124,1466,1,0,0,0,126,1538,
        1,0,0,0,128,1823,1,0,0,0,130,1825,1,0,0,0,132,1839,1,0,0,0,134,1862,
        1,0,0,0,136,1892,1,0,0,0,138,1894,1,0,0,0,140,1910,1,0,0,0,142,1966,
        1,0,0,0,144,1971,1,0,0,0,146,1973,1,0,0,0,148,2005,1,0,0,0,150,2039,
        1,0,0,0,152,2057,1,0,0,0,154,2084,1,0,0,0,156,2086,1,0,0,0,158,2100,
        1,0,0,0,160,2109,1,0,0,0,162,2117,1,0,0,0,164,2149,1,0,0,0,166,2151,
        1,0,0,0,168,2181,1,0,0,0,170,2190,1,0,0,0,172,2208,1,0,0,0,174,2234,
        1,0,0,0,176,2236,1,0,0,0,178,2308,1,0,0,0,180,2312,1,0,0,0,182,2328,
        1,0,0,0,184,2339,1,0,0,0,186,2353,1,0,0,0,188,2357,1,0,0,0,190,2401,
        1,0,0,0,192,2417,1,0,0,0,194,196,5,131,0,0,195,194,1,0,0,0,196,199,
        1,0,0,0,197,195,1,0,0,0,197,198,1,0,0,0,198,212,1,0,0,0,199,197,
        1,0,0,0,200,211,3,2,1,0,201,211,3,16,8,0,202,211,3,20,10,0,203,211,
        3,52,26,0,204,211,3,34,17,0,205,211,3,40,20,0,206,211,3,28,14,0,
        207,211,3,30,15,0,208,211,3,86,43,0,209,211,3,26,13,0,210,200,1,
        0,0,0,210,201,1,0,0,0,210,202,1,0,0,0,210,203,1,0,0,0,210,204,1,
        0,0,0,210,205,1,0,0,0,210,206,1,0,0,0,210,207,1,0,0,0,210,208,1,
        0,0,0,210,209,1,0,0,0,211,214,1,0,0,0,212,210,1,0,0,0,212,213,1,
        0,0,0,213,215,1,0,0,0,214,212,1,0,0,0,215,216,5,0,0,1,216,1,1,0,
        0,0,217,221,5,1,0,0,218,220,5,131,0,0,219,218,1,0,0,0,220,223,1,
        0,0,0,221,219,1,0,0,0,221,222,1,0,0,0,222,224,1,0,0,0,223,221,1,
        0,0,0,224,225,3,4,2,0,225,226,3,6,3,0,226,227,3,192,96,0,227,3,1,
        0,0,0,228,229,3,184,92,0,229,5,1,0,0,0,230,233,3,8,4,0,231,233,3,
        126,63,0,232,230,1,0,0,0,232,231,1,0,0,0,233,7,1,0,0,0,234,247,3,
        12,6,0,235,239,5,2,0,0,236,238,5,131,0,0,237,236,1,0,0,0,238,241,
        1,0,0,0,239,237,1,0,0,0,239,240,1,0,0,0,240,243,1,0,0,0,241,239,
        1,0,0,0,242,235,1,0,0,0,242,243,1,0,0,0,243,244,1,0,0,0,244,246,
        3,12,6,0,245,242,1,0,0,0,246,249,1,0,0,0,247,245,1,0,0,0,247,248,
        1,0,0,0,248,9,1,0,0,0,249,247,1,0,0,0,250,254,7,0,0,0,251,253,5,
        131,0,0,252,251,1,0,0,0,253,256,1,0,0,0,254,252,1,0,0,0,254,255,
        1,0,0,0,255,11,1,0,0,0,256,254,1,0,0,0,257,259,3,10,5,0,258,257,
        1,0,0,0,258,259,1,0,0,0,259,260,1,0,0,0,260,264,5,130,0,0,261,263,
        5,131,0,0,262,261,1,0,0,0,263,266,1,0,0,0,264,262,1,0,0,0,264,265,
        1,0,0,0,265,278,1,0,0,0,266,264,1,0,0,0,267,269,3,10,5,0,268,267,
        1,0,0,0,268,269,1,0,0,0,269,270,1,0,0,0,270,274,5,104,0,0,271,273,
        5,131,0,0,272,271,1,0,0,0,273,276,1,0,0,0,274,272,1,0,0,0,274,275,
        1,0,0,0,275,278,1,0,0,0,276,274,1,0,0,0,277,258,1,0,0,0,277,268,
        1,0,0,0,278,13,1,0,0,0,279,288,3,184,92,0,280,284,5,10,0,0,281,283,
        5,131,0,0,282,281,1,0,0,0,283,286,1,0,0,0,284,282,1,0,0,0,284,285,
        1,0,0,0,285,287,1,0,0,0,286,284,1,0,0,0,287,289,3,184,92,0,288,280,
        1,0,0,0,288,289,1,0,0,0,289,15,1,0,0,0,290,294,5,11,0,0,291,293,
        5,131,0,0,292,291,1,0,0,0,293,296,1,0,0,0,294,292,1,0,0,0,294,295,
        1,0,0,0,295,297,1,0,0,0,296,294,1,0,0,0,297,306,3,18,9,0,298,302,
        5,10,0,0,299,301,5,131,0,0,300,299,1,0,0,0,301,304,1,0,0,0,302,300,
        1,0,0,0,302,303,1,0,0,0,303,305,1,0,0,0,304,302,1,0,0,0,305,307,
        3,184,92,0,306,298,1,0,0,0,306,307,1,0,0,0,307,308,1,0,0,0,308,309,
        3,192,96,0,309,393,1,0,0,0,310,314,5,11,0,0,311,313,5,131,0,0,312,
        311,1,0,0,0,313,316,1,0,0,0,314,312,1,0,0,0,314,315,1,0,0,0,315,
        325,1,0,0,0,316,314,1,0,0,0,317,321,5,12,0,0,318,320,5,131,0,0,319,
        318,1,0,0,0,320,323,1,0,0,0,321,319,1,0,0,0,321,322,1,0,0,0,322,
        326,1,0,0,0,323,321,1,0,0,0,324,326,3,184,92,0,325,317,1,0,0,0,325,
        324,1,0,0,0,326,335,1,0,0,0,327,331,5,10,0,0,328,330,5,131,0,0,329,
        328,1,0,0,0,330,333,1,0,0,0,331,329,1,0,0,0,331,332,1,0,0,0,332,
        334,1,0,0,0,333,331,1,0,0,0,334,336,3,184,92,0,335,327,1,0,0,0,335,
        336,1,0,0,0,336,337,1,0,0,0,337,341,5,13,0,0,338,340,5,131,0,0,339,
        338,1,0,0,0,340,343,1,0,0,0,341,339,1,0,0,0,341,342,1,0,0,0,342,
        344,1,0,0,0,343,341,1,0,0,0,344,345,3,18,9,0,345,346,3,192,96,0,
        346,393,1,0,0,0,347,351,5,11,0,0,348,350,5,131,0,0,349,348,1,0,0,
        0,350,353,1,0,0,0,351,349,1,0,0,0,351,352,1,0,0,0,352,354,1,0,0,
        0,353,351,1,0,0,0,354,358,5,14,0,0,355,357,5,131,0,0,356,355,1,0,
        0,0,357,360,1,0,0,0,358,356,1,0,0,0,358,359,1,0,0,0,359,361,1,0,
        0,0,360,358,1,0,0,0,361,372,3,14,7,0,362,366,5,15,0,0,363,365,5,
        131,0,0,364,363,1,0,0,0,365,368,1,0,0,0,366,364,1,0,0,0,366,367,
        1,0,0,0,367,369,1,0,0,0,368,366,1,0,0,0,369,371,3,14,7,0,370,362,
        1,0,0,0,371,374,1,0,0,0,372,370,1,0,0,0,372,373,1,0,0,0,373,375,
        1,0,0,0,374,372,1,0,0,0,375,379,5,16,0,0,376,378,5,131,0,0,377,376,
        1,0,0,0,378,381,1,0,0,0,379,377,1,0,0,0,379,380,1,0,0,0,380,382,
        1,0,0,0,381,379,1,0,0,0,382,386,5,13,0,0,383,385,5,131,0,0,384,383,
        1,0,0,0,385,388,1,0,0,0,386,384,1,0,0,0,386,387,1,0,0,0,387,389,
        1,0,0,0,388,386,1,0,0,0,389,390,3,18,9,0,390,391,3,192,96,0,391,
        393,1,0,0,0,392,290,1,0,0,0,392,310,1,0,0,0,392,347,1,0,0,0,393,
        17,1,0,0,0,394,395,5,129,0,0,395,19,1,0,0,0,396,400,5,17,0,0,397,
        399,5,131,0,0,398,397,1,0,0,0,399,402,1,0,0,0,400,398,1,0,0,0,400,
        401,1,0,0,0,401,404,1,0,0,0,402,400,1,0,0,0,403,396,1,0,0,0,403,
        404,1,0,0,0,404,405,1,0,0,0,405,409,7,1,0,0,406,408,5,131,0,0,407,
        406,1,0,0,0,408,411,1,0,0,0,409,407,1,0,0,0,409,410,1,0,0,0,410,
        412,1,0,0,0,411,409,1,0,0,0,412,434,3,184,92,0,413,417,5,21,0,0,
        414,416,5,131,0,0,415,414,1,0,0,0,416,419,1,0,0,0,417,415,1,0,0,
        0,417,418,1,0,0,0,418,420,1,0,0,0,419,417,1,0,0,0,420,431,3,22,11,
        0,421,425,5,15,0,0,422,424,5,131,0,0,423,422,1,0,0,0,424,427,1,0,
        0,0,425,423,1,0,0,0,425,426,1,0,0,0,426,428,1,0,0,0,427,425,1,0,
        0,0,428,430,3,22,11,0,429,421,1,0,0,0,430,433,1,0,0,0,431,429,1,
        0,0,0,431,432,1,0,0,0,432,435,1,0,0,0,433,431,1,0,0,0,434,413,1,
        0,0,0,434,435,1,0,0,0,435,436,1,0,0,0,436,440,5,14,0,0,437,439,5,
        131,0,0,438,437,1,0,0,0,439,442,1,0,0,0,440,438,1,0,0,0,440,441,
        1,0,0,0,441,446,1,0,0,0,442,440,1,0,0,0,443,445,3,24,12,0,444,443,
        1,0,0,0,445,448,1,0,0,0,446,444,1,0,0,0,446,447,1,0,0,0,447,449,
        1,0,0,0,448,446,1,0,0,0,449,453,5,16,0,0,450,452,5,131,0,0,451,450,
        1,0,0,0,452,455,1,0,0,0,453,451,1,0,0,0,453,454,1,0,0,0,454,21,1,
        0,0,0,455,453,1,0,0,0,456,474,3,70,35,0,457,461,5,22,0,0,458,460,
        5,131,0,0,459,458,1,0,0,0,460,463,1,0,0,0,461,459,1,0,0,0,461,462,
        1,0,0,0,462,465,1,0,0,0,463,461,1,0,0,0,464,466,3,130,65,0,465,464,
        1,0,0,0,465,466,1,0,0,0,466,467,1,0,0,0,467,471,5,23,0,0,468,470,
        5,131,0,0,469,468,1,0,0,0,470,473,1,0,0,0,471,469,1,0,0,0,471,472,
        1,0,0,0,472,475,1,0,0,0,473,471,1,0,0,0,474,457,1,0,0,0,474,475,
        1,0,0,0,475,23,1,0,0,0,476,485,3,26,13,0,477,485,3,32,16,0,478,485,
        3,34,17,0,479,485,3,36,18,0,480,485,3,40,20,0,481,485,3,48,24,0,
        482,485,3,52,26,0,483,485,3,30,15,0,484,476,1,0,0,0,484,477,1,0,
        0,0,484,478,1,0,0,0,484,479,1,0,0,0,484,480,1,0,0,0,484,481,1,0,
        0,0,484,482,1,0,0,0,484,483,1,0,0,0,485,25,1,0,0,0,486,525,3,68,
        34,0,487,491,5,120,0,0,488,490,5,131,0,0,489,488,1,0,0,0,490,493,
        1,0,0,0,491,489,1,0,0,0,491,492,1,0,0,0,492,524,1,0,0,0,493,491,
        1,0,0,0,494,498,5,117,0,0,495,497,5,131,0,0,496,495,1,0,0,0,497,
        500,1,0,0,0,498,496,1,0,0,0,498,499,1,0,0,0,499,524,1,0,0,0,500,
        498,1,0,0,0,501,505,5,119,0,0,502,504,5,131,0,0,503,502,1,0,0,0,
        504,507,1,0,0,0,505,503,1,0,0,0,505,506,1,0,0,0,506,524,1,0,0,0,
        507,505,1,0,0,0,508,512,5,111,0,0,509,511,5,131,0,0,510,509,1,0,
        0,0,511,514,1,0,0,0,512,510,1,0,0,0,512,513,1,0,0,0,513,524,1,0,
        0,0,514,512,1,0,0,0,515,519,5,112,0,0,516,518,5,131,0,0,517,516,
        1,0,0,0,518,521,1,0,0,0,519,517,1,0,0,0,519,520,1,0,0,0,520,524,
        1,0,0,0,521,519,1,0,0,0,522,524,3,188,94,0,523,487,1,0,0,0,523,494,
        1,0,0,0,523,501,1,0,0,0,523,508,1,0,0,0,523,515,1,0,0,0,523,522,
        1,0,0,0,524,527,1,0,0,0,525,523,1,0,0,0,525,526,1,0,0,0,526,528,
        1,0,0,0,527,525,1,0,0,0,528,537,3,184,92,0,529,533,5,9,0,0,530,532,
        5,131,0,0,531,530,1,0,0,0,532,535,1,0,0,0,533,531,1,0,0,0,533,534,
        1,0,0,0,534,536,1,0,0,0,535,533,1,0,0,0,536,538,3,126,63,0,537,529,
        1,0,0,0,537,538,1,0,0,0,538,539,1,0,0,0,539,540,3,192,96,0,540,27,
        1,0,0,0,541,542,3,68,34,0,542,546,5,111,0,0,543,545,5,131,0,0,544,
        543,1,0,0,0,545,548,1,0,0,0,546,544,1,0,0,0,546,547,1,0,0,0,547,
        549,1,0,0,0,548,546,1,0,0,0,549,550,3,184,92,0,550,554,5,9,0,0,551,
        553,5,131,0,0,552,551,1,0,0,0,553,556,1,0,0,0,554,552,1,0,0,0,554,
        555,1,0,0,0,555,557,1,0,0,0,556,554,1,0,0,0,557,558,3,126,63,0,558,
        559,3,192,96,0,559,29,1,0,0,0,560,564,5,24,0,0,561,563,5,131,0,0,
        562,561,1,0,0,0,563,566,1,0,0,0,564,562,1,0,0,0,564,565,1,0,0,0,
        565,567,1,0,0,0,566,564,1,0,0,0,567,568,3,184,92,0,568,569,3,54,
        27,0,569,570,3,192,96,0,570,31,1,0,0,0,571,575,5,25,0,0,572,574,
        5,131,0,0,573,572,1,0,0,0,574,577,1,0,0,0,575,573,1,0,0,0,575,576,
        1,0,0,0,576,578,1,0,0,0,577,575,1,0,0,0,578,579,3,184,92,0,579,583,
        5,26,0,0,580,582,5,131,0,0,581,580,1,0,0,0,582,585,1,0,0,0,583,581,
        1,0,0,0,583,584,1,0,0,0,584,594,1,0,0,0,585,583,1,0,0,0,586,590,
        5,12,0,0,587,589,5,131,0,0,588,587,1,0,0,0,589,592,1,0,0,0,590,588,
        1,0,0,0,590,591,1,0,0,0,591,595,1,0,0,0,592,590,1,0,0,0,593,595,
        3,68,34,0,594,586,1,0,0,0,594,593,1,0,0,0,595,596,1,0,0,0,596,597,
        3,192,96,0,597,33,1,0,0,0,598,602,5,27,0,0,599,601,5,131,0,0,600,
        599,1,0,0,0,601,604,1,0,0,0,602,600,1,0,0,0,602,603,1,0,0,0,603,
        605,1,0,0,0,604,602,1,0,0,0,605,606,3,184,92,0,606,610,5,14,0,0,
        607,609,5,131,0,0,608,607,1,0,0,0,609,612,1,0,0,0,610,608,1,0,0,
        0,610,611,1,0,0,0,611,623,1,0,0,0,612,610,1,0,0,0,613,614,3,66,33,
        0,614,620,3,192,96,0,615,616,3,66,33,0,616,617,3,192,96,0,617,619,
        1,0,0,0,618,615,1,0,0,0,619,622,1,0,0,0,620,618,1,0,0,0,620,621,
        1,0,0,0,621,624,1,0,0,0,622,620,1,0,0,0,623,613,1,0,0,0,623,624,
        1,0,0,0,624,625,1,0,0,0,625,629,5,16,0,0,626,628,5,131,0,0,627,626,
        1,0,0,0,628,631,1,0,0,0,629,627,1,0,0,0,629,630,1,0,0,0,630,35,1,
        0,0,0,631,629,1,0,0,0,632,636,5,28,0,0,633,635,5,131,0,0,634,633,
        1,0,0,0,635,638,1,0,0,0,636,634,1,0,0,0,636,637,1,0,0,0,637,639,
        1,0,0,0,638,636,1,0,0,0,639,641,3,184,92,0,640,642,3,54,27,0,641,
        640,1,0,0,0,641,642,1,0,0,0,642,653,1,0,0,0,643,647,5,121,0,0,644,
        646,5,131,0,0,645,644,1,0,0,0,646,649,1,0,0,0,647,645,1,0,0,0,647,
        648,1,0,0,0,648,652,1,0,0,0,649,647,1,0,0,0,650,652,3,188,94,0,651,
        643,1,0,0,0,651,650,1,0,0,0,652,655,1,0,0,0,653,651,1,0,0,0,653,
        654,1,0,0,0,654,658,1,0,0,0,655,653,1,0,0,0,656,659,3,192,96,0,657,
        659,3,82,41,0,658,656,1,0,0,0,658,657,1,0,0,0,659,37,1,0,0,0,660,
        678,3,184,92,0,661,665,5,22,0,0,662,664,5,131,0,0,663,662,1,0,0,
        0,664,667,1,0,0,0,665,663,1,0,0,0,665,666,1,0,0,0,666,669,1,0,0,
        0,667,665,1,0,0,0,668,670,3,130,65,0,669,668,1,0,0,0,669,670,1,0,
        0,0,670,671,1,0,0,0,671,675,5,23,0,0,672,674,5,131,0,0,673,672,1,
        0,0,0,674,677,1,0,0,0,675,673,1,0,0,0,675,676,1,0,0,0,676,679,1,
        0,0,0,677,675,1,0,0,0,678,661,1,0,0,0,678,679,1,0,0,0,679,39,1,0,
        0,0,680,681,3,42,21,0,681,682,3,54,27,0,682,684,3,46,23,0,683,685,
        3,44,22,0,684,683,1,0,0,0,684,685,1,0,0,0,685,688,1,0,0,0,686,689,
        3,192,96,0,687,689,3,82,41,0,688,686,1,0,0,0,688,687,1,0,0,0,689,
        41,1,0,0,0,690,694,5,29,0,0,691,693,5,131,0,0,692,691,1,0,0,0,693,
        696,1,0,0,0,694,692,1,0,0,0,694,695,1,0,0,0,695,698,1,0,0,0,696,
        694,1,0,0,0,697,699,3,184,92,0,698,697,1,0,0,0,698,699,1,0,0,0,699,
        722,1,0,0,0,700,704,5,125,0,0,701,703,5,131,0,0,702,701,1,0,0,0,
        703,706,1,0,0,0,704,702,1,0,0,0,704,705,1,0,0,0,705,722,1,0,0,0,
        706,704,1,0,0,0,707,711,5,126,0,0,708,710,5,131,0,0,709,708,1,0,
        0,0,710,713,1,0,0,0,711,709,1,0,0,0,711,712,1,0,0,0,712,722,1,0,
        0,0,713,711,1,0,0,0,714,718,5,127,0,0,715,717,5,131,0,0,716,715,
        1,0,0,0,717,720,1,0,0,0,718,716,1,0,0,0,718,719,1,0,0,0,719,722,
        1,0,0,0,720,718,1,0,0,0,721,690,1,0,0,0,721,700,1,0,0,0,721,707,
        1,0,0,0,721,714,1,0,0,0,722,43,1,0,0,0,723,727,5,30,0,0,724,726,
        5,131,0,0,725,724,1,0,0,0,726,729,1,0,0,0,727,725,1,0,0,0,727,728,
        1,0,0,0,728,730,1,0,0,0,729,727,1,0,0,0,730,731,3,54,27,0,731,45,
        1,0,0,0,732,736,5,115,0,0,733,735,5,131,0,0,734,733,1,0,0,0,735,
        738,1,0,0,0,736,734,1,0,0,0,736,737,1,0,0,0,737,771,1,0,0,0,738,
        736,1,0,0,0,739,743,5,120,0,0,740,742,5,131,0,0,741,740,1,0,0,0,
        742,745,1,0,0,0,743,741,1,0,0,0,743,744,1,0,0,0,744,771,1,0,0,0,
        745,743,1,0,0,0,746,750,5,117,0,0,747,749,5,131,0,0,748,747,1,0,
        0,0,749,752,1,0,0,0,750,748,1,0,0,0,750,751,1,0,0,0,751,771,1,0,
        0,0,752,750,1,0,0,0,753,757,5,119,0,0,754,756,5,131,0,0,755,754,
        1,0,0,0,756,759,1,0,0,0,757,755,1,0,0,0,757,758,1,0,0,0,758,771,
        1,0,0,0,759,757,1,0,0,0,760,764,5,121,0,0,761,763,5,131,0,0,762,
        761,1,0,0,0,763,766,1,0,0,0,764,762,1,0,0,0,764,765,1,0,0,0,765,
        771,1,0,0,0,766,764,1,0,0,0,767,771,3,80,40,0,768,771,3,38,19,0,
        769,771,3,188,94,0,770,732,1,0,0,0,770,739,1,0,0,0,770,746,1,0,0,
        0,770,753,1,0,0,0,770,760,1,0,0,0,770,767,1,0,0,0,770,768,1,0,0,
        0,770,769,1,0,0,0,771,774,1,0,0,0,772,770,1,0,0,0,772,773,1,0,0,
        0,773,47,1,0,0,0,774,772,1,0,0,0,775,779,5,31,0,0,776,778,5,131,
        0,0,777,776,1,0,0,0,778,781,1,0,0,0,779,777,1,0,0,0,779,780,1,0,
        0,0,780,782,1,0,0,0,781,779,1,0,0,0,782,783,3,184,92,0,783,791,3,
        58,29,0,784,788,5,109,0,0,785,787,5,131,0,0,786,785,1,0,0,0,787,
        790,1,0,0,0,788,786,1,0,0,0,788,789,1,0,0,0,789,792,1,0,0,0,790,
        788,1,0,0,0,791,784,1,0,0,0,791,792,1,0,0,0,792,793,1,0,0,0,793,
        794,3,192,96,0,794,49,1,0,0,0,795,796,3,184,92,0,796,51,1,0,0,0,
        797,801,5,32,0,0,798,800,5,131,0,0,799,798,1,0,0,0,800,803,1,0,0,
        0,801,799,1,0,0,0,801,802,1,0,0,0,802,804,1,0,0,0,803,801,1,0,0,
        0,804,805,3,184,92,0,805,809,5,14,0,0,806,808,5,131,0,0,807,806,
        1,0,0,0,808,811,1,0,0,0,809,807,1,0,0,0,809,810,1,0,0,0,810,813,
        1,0,0,0,811,809,1,0,0,0,812,814,3,50,25,0,813,812,1,0,0,0,813,814,
        1,0,0,0,814,825,1,0,0,0,815,819,5,15,0,0,816,818,5,131,0,0,817,816,
        1,0,0,0,818,821,1,0,0,0,819,817,1,0,0,0,819,820,1,0,0,0,820,822,
        1,0,0,0,821,819,1,0,0,0,822,824,3,50,25,0,823,815,1,0,0,0,824,827,
        1,0,0,0,825,823,1,0,0,0,825,826,1,0,0,0,826,828,1,0,0,0,827,825,
        1,0,0,0,828,832,5,16,0,0,829,831,5,131,0,0,830,829,1,0,0,0,831,834,
        1,0,0,0,832,830,1,0,0,0,832,833,1,0,0,0,833,53,1,0,0,0,834,832,1,
        0,0,0,835,839,5,22,0,0,836,838,5,131,0,0,837,836,1,0,0,0,838,841,
        1,0,0,0,839,837,1,0,0,0,839,840,1,0,0,0,840,856,1,0,0,0,841,839,
        1,0,0,0,842,853,3,56,28,0,843,847,5,15,0,0,844,846,5,131,0,0,845,
        844,1,0,0,0,846,849,1,0,0,0,847,845,1,0,0,0,847,848,1,0,0,0,848,
        850,1,0,0,0,849,847,1,0,0,0,850,852,3,56,28,0,851,843,1,0,0,0,852,
        855,1,0,0,0,853,851,1,0,0,0,853,854,1,0,0,0,854,857,1,0,0,0,855,
        853,1,0,0,0,856,842,1,0,0,0,856,857,1,0,0,0,857,858,1,0,0,0,858,
        862,5,23,0,0,859,861,5,131,0,0,860,859,1,0,0,0,861,864,1,0,0,0,862,
        860,1,0,0,0,862,863,1,0,0,0,863,55,1,0,0,0,864,862,1,0,0,0,865,867,
        3,68,34,0,866,868,3,78,39,0,867,866,1,0,0,0,867,868,1,0,0,0,868,
        870,1,0,0,0,869,871,3,184,92,0,870,869,1,0,0,0,870,871,1,0,0,0,871,
        57,1,0,0,0,872,876,5,22,0,0,873,875,5,131,0,0,874,873,1,0,0,0,875,
        878,1,0,0,0,876,874,1,0,0,0,876,877,1,0,0,0,877,893,1,0,0,0,878,
        876,1,0,0,0,879,890,3,60,30,0,880,884,5,15,0,0,881,883,5,131,0,0,
        882,881,1,0,0,0,883,886,1,0,0,0,884,882,1,0,0,0,884,885,1,0,0,0,
        885,887,1,0,0,0,886,884,1,0,0,0,887,889,3,60,30,0,888,880,1,0,0,
        0,889,892,1,0,0,0,890,888,1,0,0,0,890,891,1,0,0,0,891,894,1,0,0,
        0,892,890,1,0,0,0,893,879,1,0,0,0,893,894,1,0,0,0,894,895,1,0,0,
        0,895,899,5,23,0,0,896,898,5,131,0,0,897,896,1,0,0,0,898,901,1,0,
        0,0,899,897,1,0,0,0,899,900,1,0,0,0,900,59,1,0,0,0,901,899,1,0,0,
        0,902,910,3,68,34,0,903,907,5,116,0,0,904,906,5,131,0,0,905,904,
        1,0,0,0,906,909,1,0,0,0,907,905,1,0,0,0,907,908,1,0,0,0,908,911,
        1,0,0,0,909,907,1,0,0,0,910,903,1,0,0,0,910,911,1,0,0,0,911,913,
        1,0,0,0,912,914,3,184,92,0,913,912,1,0,0,0,913,914,1,0,0,0,914,61,
        1,0,0,0,915,919,5,22,0,0,916,918,5,131,0,0,917,916,1,0,0,0,918,921,
        1,0,0,0,919,917,1,0,0,0,919,920,1,0,0,0,920,936,1,0,0,0,921,919,
        1,0,0,0,922,933,3,64,32,0,923,927,5,15,0,0,924,926,5,131,0,0,925,
        924,1,0,0,0,926,929,1,0,0,0,927,925,1,0,0,0,927,928,1,0,0,0,928,
        930,1,0,0,0,929,927,1,0,0,0,930,932,3,64,32,0,931,923,1,0,0,0,932,
        935,1,0,0,0,933,931,1,0,0,0,933,934,1,0,0,0,934,937,1,0,0,0,935,
        933,1,0,0,0,936,922,1,0,0,0,936,937,1,0,0,0,937,938,1,0,0,0,938,
        942,5,23,0,0,939,941,5,131,0,0,940,939,1,0,0,0,941,944,1,0,0,0,942,
        940,1,0,0,0,942,943,1,0,0,0,943,63,1,0,0,0,944,942,1,0,0,0,945,947,
        3,68,34,0,946,948,3,78,39,0,947,946,1,0,0,0,947,948,1,0,0,0,948,
        65,1,0,0,0,949,951,3,68,34,0,950,952,3,78,39,0,951,950,1,0,0,0,951,
        952,1,0,0,0,952,953,1,0,0,0,953,954,3,184,92,0,954,67,1,0,0,0,955,
        956,6,34,-1,0,956,975,3,124,62,0,957,975,3,70,35,0,958,975,3,74,
        37,0,959,975,3,76,38,0,960,964,5,35,0,0,961,963,5,131,0,0,962,961,
        1,0,0,0,963,966,1,0,0,0,964,962,1,0,0,0,964,965,1,0,0,0,965,967,
        1,0,0,0,966,964,1,0,0,0,967,971,5,118,0,0,968,970,5,131,0,0,969,
        968,1,0,0,0,970,973,1,0,0,0,971,969,1,0,0,0,971,972,1,0,0,0,972,
        975,1,0,0,0,973,971,1,0,0,0,974,955,1,0,0,0,974,957,1,0,0,0,974,
        958,1,0,0,0,974,959,1,0,0,0,974,960,1,0,0,0,975,996,1,0,0,0,976,
        977,10,3,0,0,977,981,5,33,0,0,978,980,5,131,0,0,979,978,1,0,0,0,
        980,983,1,0,0,0,981,979,1,0,0,0,981,982,1,0,0,0,982,985,1,0,0,0,
        983,981,1,0,0,0,984,986,3,126,63,0,985,984,1,0,0,0,985,986,1,0,0,
        0,986,987,1,0,0,0,987,991,5,34,0,0,988,990,5,131,0,0,989,988,1,0,
        0,0,990,993,1,0,0,0,991,989,1,0,0,0,991,992,1,0,0,0,992,995,1,0,
        0,0,993,991,1,0,0,0,994,976,1,0,0,0,995,998,1,0,0,0,996,994,1,0,
        0,0,996,997,1,0,0,0,997,69,1,0,0,0,998,996,1,0,0,0,999,1010,3,184,
        92,0,1000,1004,5,36,0,0,1001,1003,5,131,0,0,1002,1001,1,0,0,0,1003,
        1006,1,0,0,0,1004,1002,1,0,0,0,1004,1005,1,0,0,0,1005,1007,1,0,0,
        0,1006,1004,1,0,0,0,1007,1009,3,184,92,0,1008,1000,1,0,0,0,1009,
        1012,1,0,0,0,1010,1008,1,0,0,0,1010,1011,1,0,0,0,1011,71,1,0,0,0,
        1012,1010,1,0,0,0,1013,1016,3,124,62,0,1014,1016,3,70,35,0,1015,
        1013,1,0,0,0,1015,1014,1,0,0,0,1016,73,1,0,0,0,1017,1021,5,37,0,
        0,1018,1020,5,131,0,0,1019,1018,1,0,0,0,1020,1023,1,0,0,0,1021,1019,
        1,0,0,0,1021,1022,1,0,0,0,1022,1024,1,0,0,0,1023,1021,1,0,0,0,1024,
        1028,5,22,0,0,1025,1027,5,131,0,0,1026,1025,1,0,0,0,1027,1030,1,
        0,0,0,1028,1026,1,0,0,0,1028,1029,1,0,0,0,1029,1031,1,0,0,0,1030,
        1028,1,0,0,0,1031,1032,3,72,36,0,1032,1036,5,38,0,0,1033,1035,5,
        131,0,0,1034,1033,1,0,0,0,1035,1038,1,0,0,0,1036,1034,1,0,0,0,1036,
        1037,1,0,0,0,1037,1039,1,0,0,0,1038,1036,1,0,0,0,1039,1040,3,68,
        34,0,1040,1044,5,23,0,0,1041,1043,5,131,0,0,1042,1041,1,0,0,0,1043,
        1046,1,0,0,0,1044,1042,1,0,0,0,1044,1045,1,0,0,0,1045,75,1,0,0,0,
        1046,1044,1,0,0,0,1047,1051,5,29,0,0,1048,1050,5,131,0,0,1049,1048,
        1,0,0,0,1050,1053,1,0,0,0,1051,1049,1,0,0,0,1051,1052,1,0,0,0,1052,
        1054,1,0,0,0,1053,1051,1,0,0,0,1054,1072,3,62,31,0,1055,1059,5,117,
        0,0,1056,1058,5,131,0,0,1057,1056,1,0,0,0,1058,1061,1,0,0,0,1059,
        1057,1,0,0,0,1059,1060,1,0,0,0,1060,1071,1,0,0,0,1061,1059,1,0,0,
        0,1062,1066,5,115,0,0,1063,1065,5,131,0,0,1064,1063,1,0,0,0,1065,
        1068,1,0,0,0,1066,1064,1,0,0,0,1066,1067,1,0,0,0,1067,1071,1,0,0,
        0,1068,1066,1,0,0,0,1069,1071,3,80,40,0,1070,1055,1,0,0,0,1070,1062,
        1,0,0,0,1070,1069,1,0,0,0,1071,1074,1,0,0,0,1072,1070,1,0,0,0,1072,
        1073,1,0,0,0,1073,1083,1,0,0,0,1074,1072,1,0,0,0,1075,1079,5,30,
        0,0,1076,1078,5,131,0,0,1077,1076,1,0,0,0,1078,1081,1,0,0,0,1079,
        1077,1,0,0,0,1079,1080,1,0,0,0,1080,1082,1,0,0,0,1081,1079,1,0,0,
        0,1082,1084,3,62,31,0,1083,1075,1,0,0,0,1083,1084,1,0,0,0,1084,77,
        1,0,0,0,1085,1089,7,2,0,0,1086,1088,5,131,0,0,1087,1086,1,0,0,0,
        1088,1091,1,0,0,0,1089,1087,1,0,0,0,1089,1090,1,0,0,0,1090,79,1,
        0,0,0,1091,1089,1,0,0,0,1092,1096,7,3,0,0,1093,1095,5,131,0,0,1094,
        1093,1,0,0,0,1095,1098,1,0,0,0,1096,1094,1,0,0,0,1096,1097,1,0,0,
        0,1097,81,1,0,0,0,1098,1096,1,0,0,0,1099,1103,5,14,0,0,1100,1102,
        5,131,0,0,1101,1100,1,0,0,0,1102,1105,1,0,0,0,1103,1101,1,0,0,0,
        1103,1104,1,0,0,0,1104,1109,1,0,0,0,1105,1103,1,0,0,0,1106,1108,
        3,84,42,0,1107,1106,1,0,0,0,1108,1111,1,0,0,0,1109,1107,1,0,0,0,
        1109,1110,1,0,0,0,1110,1112,1,0,0,0,1111,1109,1,0,0,0,1112,1116,
        5,16,0,0,1113,1115,5,131,0,0,1114,1113,1,0,0,0,1115,1118,1,0,0,0,
        1116,1114,1,0,0,0,1116,1117,1,0,0,0,1117,83,1,0,0,0,1118,1116,1,
        0,0,0,1119,1135,3,88,44,0,1120,1135,3,90,45,0,1121,1135,3,94,47,
        0,1122,1135,3,100,50,0,1123,1135,3,82,41,0,1124,1135,3,102,51,0,
        1125,1135,3,104,52,0,1126,1135,3,106,53,0,1127,1135,3,108,54,0,1128,
        1135,3,110,55,0,1129,1135,3,112,56,0,1130,1135,3,114,57,0,1131,1135,
        3,96,48,0,1132,1135,3,98,49,0,1133,1135,3,116,58,0,1134,1119,1,0,
        0,0,1134,1120,1,0,0,0,1134,1121,1,0,0,0,1134,1122,1,0,0,0,1134,1123,
        1,0,0,0,1134,1124,1,0,0,0,1134,1125,1,0,0,0,1134,1126,1,0,0,0,1134,
        1127,1,0,0,0,1134,1128,1,0,0,0,1134,1129,1,0,0,0,1134,1130,1,0,0,
        0,1134,1131,1,0,0,0,1134,1132,1,0,0,0,1134,1133,1,0,0,0,1135,85,
        1,0,0,0,1136,1137,3,126,63,0,1137,1138,3,192,96,0,1138,87,1,0,0,
        0,1139,1143,5,42,0,0,1140,1142,5,131,0,0,1141,1140,1,0,0,0,1142,
        1145,1,0,0,0,1143,1141,1,0,0,0,1143,1144,1,0,0,0,1144,1146,1,0,0,
        0,1145,1143,1,0,0,0,1146,1150,5,22,0,0,1147,1149,5,131,0,0,1148,
        1147,1,0,0,0,1149,1152,1,0,0,0,1150,1148,1,0,0,0,1150,1151,1,0,0,
        0,1151,1153,1,0,0,0,1152,1150,1,0,0,0,1153,1154,3,126,63,0,1154,
        1158,5,23,0,0,1155,1157,5,131,0,0,1156,1155,1,0,0,0,1157,1160,1,
        0,0,0,1158,1156,1,0,0,0,1158,1159,1,0,0,0,1159,1161,1,0,0,0,1160,
        1158,1,0,0,0,1161,1170,3,84,42,0,1162,1166,5,43,0,0,1163,1165,5,
        131,0,0,1164,1163,1,0,0,0,1165,1168,1,0,0,0,1166,1164,1,0,0,0,1166,
        1167,1,0,0,0,1167,1169,1,0,0,0,1168,1166,1,0,0,0,1169,1171,3,84,
        42,0,1170,1162,1,0,0,0,1170,1171,1,0,0,0,1171,89,1,0,0,0,1172,1176,
        5,44,0,0,1173,1175,5,131,0,0,1174,1173,1,0,0,0,1175,1178,1,0,0,0,
        1176,1174,1,0,0,0,1176,1177,1,0,0,0,1177,1179,1,0,0,0,1178,1176,
        1,0,0,0,1179,1181,3,126,63,0,1180,1182,3,44,22,0,1181,1180,1,0,0,
        0,1181,1182,1,0,0,0,1182,1183,1,0,0,0,1183,1185,3,82,41,0,1184,1186,
        3,92,46,0,1185,1184,1,0,0,0,1186,1187,1,0,0,0,1187,1185,1,0,0,0,
        1187,1188,1,0,0,0,1188,91,1,0,0,0,1189,1193,5,45,0,0,1190,1192,5,
        131,0,0,1191,1190,1,0,0,0,1192,1195,1,0,0,0,1193,1191,1,0,0,0,1193,
        1194,1,0,0,0,1194,1200,1,0,0,0,1195,1193,1,0,0,0,1196,1198,3,184,
        92,0,1197,1196,1,0,0,0,1197,1198,1,0,0,0,1198,1199,1,0,0,0,1199,
        1201,3,54,27,0,1200,1197,1,0,0,0,1200,1201,1,0,0,0,1201,1202,1,0,
        0,0,1202,1203,3,82,41,0,1203,93,1,0,0,0,1204,1208,5,46,0,0,1205,
        1207,5,131,0,0,1206,1205,1,0,0,0,1207,1210,1,0,0,0,1208,1206,1,0,
        0,0,1208,1209,1,0,0,0,1209,1211,1,0,0,0,1210,1208,1,0,0,0,1211,1215,
        5,22,0,0,1212,1214,5,131,0,0,1213,1212,1,0,0,0,1214,1217,1,0,0,0,
        1215,1213,1,0,0,0,1215,1216,1,0,0,0,1216,1218,1,0,0,0,1217,1215,
        1,0,0,0,1218,1219,3,126,63,0,1219,1223,5,23,0,0,1220,1222,5,131,
        0,0,1221,1220,1,0,0,0,1222,1225,1,0,0,0,1223,1221,1,0,0,0,1223,1224,
        1,0,0,0,1224,1226,1,0,0,0,1225,1223,1,0,0,0,1226,1227,3,84,42,0,
        1227,95,1,0,0,0,1228,1231,3,118,59,0,1229,1231,3,86,43,0,1230,1228,
        1,0,0,0,1230,1229,1,0,0,0,1231,97,1,0,0,0,1232,1236,5,47,0,0,1233,
        1235,5,131,0,0,1234,1233,1,0,0,0,1235,1238,1,0,0,0,1236,1234,1,0,
        0,0,1236,1237,1,0,0,0,1237,1239,1,0,0,0,1238,1236,1,0,0,0,1239,1240,
        3,82,41,0,1240,99,1,0,0,0,1241,1245,5,26,0,0,1242,1244,5,131,0,0,
        1243,1242,1,0,0,0,1244,1247,1,0,0,0,1245,1243,1,0,0,0,1245,1246,
        1,0,0,0,1246,1248,1,0,0,0,1247,1245,1,0,0,0,1248,1252,5,22,0,0,1249,
        1251,5,131,0,0,1250,1249,1,0,0,0,1251,1254,1,0,0,0,1252,1250,1,0,
        0,0,1252,1253,1,0,0,0,1253,1263,1,0,0,0,1254,1252,1,0,0,0,1255,1264,
        3,96,48,0,1256,1260,5,48,0,0,1257,1259,5,131,0,0,1258,1257,1,0,0,
        0,1259,1262,1,0,0,0,1260,1258,1,0,0,0,1260,1261,1,0,0,0,1261,1264,
        1,0,0,0,1262,1260,1,0,0,0,1263,1255,1,0,0,0,1263,1256,1,0,0,0,1264,
        1273,1,0,0,0,1265,1274,3,86,43,0,1266,1270,5,48,0,0,1267,1269,5,
        131,0,0,1268,1267,1,0,0,0,1269,1272,1,0,0,0,1270,1268,1,0,0,0,1270,
        1271,1,0,0,0,1271,1274,1,0,0,0,1272,1270,1,0,0,0,1273,1265,1,0,0,
        0,1273,1266,1,0,0,0,1274,1276,1,0,0,0,1275,1277,3,126,63,0,1276,
        1275,1,0,0,0,1276,1277,1,0,0,0,1277,1278,1,0,0,0,1278,1282,5,23,
        0,0,1279,1281,5,131,0,0,1280,1279,1,0,0,0,1281,1284,1,0,0,0,1282,
        1280,1,0,0,0,1282,1283,1,0,0,0,1283,1285,1,0,0,0,1284,1282,1,0,0,
        0,1285,1286,3,84,42,0,1286,101,1,0,0,0,1287,1291,5,49,0,0,1288,1290,
        5,131,0,0,1289,1288,1,0,0,0,1290,1293,1,0,0,0,1291,1289,1,0,0,0,
        1291,1292,1,0,0,0,1292,1301,1,0,0,0,1293,1291,1,0,0,0,1294,1298,
        5,129,0,0,1295,1297,5,131,0,0,1296,1295,1,0,0,0,1297,1300,1,0,0,
        0,1298,1296,1,0,0,0,1298,1299,1,0,0,0,1299,1302,1,0,0,0,1300,1298,
        1,0,0,0,1301,1294,1,0,0,0,1301,1302,1,0,0,0,1302,1303,1,0,0,0,1303,
        1304,3,140,70,0,1304,103,1,0,0,0,1305,1309,5,50,0,0,1306,1308,5,
        131,0,0,1307,1306,1,0,0,0,1308,1311,1,0,0,0,1309,1307,1,0,0,0,1309,
        1310,1,0,0,0,1310,1312,1,0,0,0,1311,1309,1,0,0,0,1312,1313,3,84,
        42,0,1313,1317,5,46,0,0,1314,1316,5,131,0,0,1315,1314,1,0,0,0,1316,
        1319,1,0,0,0,1317,1315,1,0,0,0,1317,1318,1,0,0,0,1318,1320,1,0,0,
        0,1319,1317,1,0,0,0,1320,1324,5,22,0,0,1321,1323,5,131,0,0,1322,
        1321,1,0,0,0,1323,1326,1,0,0,0,1324,1322,1,0,0,0,1324,1325,1,0,0,
        0,1325,1327,1,0,0,0,1326,1324,1,0,0,0,1327,1328,3,126,63,0,1328,
        1332,5,23,0,0,1329,1331,5,131,0,0,1330,1329,1,0,0,0,1331,1334,1,
        0,0,0,1332,1330,1,0,0,0,1332,1333,1,0,0,0,1333,1335,1,0,0,0,1334,
        1332,1,0,0,0,1335,1336,3,192,96,0,1336,105,1,0,0,0,1337,1338,5,113,
        0,0,1338,1339,3,192,96,0,1339,107,1,0,0,0,1340,1341,5,110,0,0,1341,
        1342,3,192,96,0,1342,109,1,0,0,0,1343,1347,5,51,0,0,1344,1346,5,
        131,0,0,1345,1344,1,0,0,0,1346,1349,1,0,0,0,1347,1345,1,0,0,0,1347,
        1348,1,0,0,0,1348,1351,1,0,0,0,1349,1347,1,0,0,0,1350,1352,3,126,
        63,0,1351,1350,1,0,0,0,1351,1352,1,0,0,0,1352,1353,1,0,0,0,1353,
        1354,3,192,96,0,1354,111,1,0,0,0,1355,1356,5,52,0,0,1356,1357,3,
        192,96,0,1357,113,1,0,0,0,1358,1362,5,53,0,0,1359,1361,5,131,0,0,
        1360,1359,1,0,0,0,1361,1364,1,0,0,0,1362,1360,1,0,0,0,1362,1363,
        1,0,0,0,1363,1365,1,0,0,0,1364,1362,1,0,0,0,1365,1366,3,138,69,0,
        1366,1367,3,192,96,0,1367,115,1,0,0,0,1368,1372,5,54,0,0,1369,1371,
        5,131,0,0,1370,1369,1,0,0,0,1371,1374,1,0,0,0,1372,1370,1,0,0,0,
        1372,1373,1,0,0,0,1373,1375,1,0,0,0,1374,1372,1,0,0,0,1375,1376,
        3,138,69,0,1376,1377,3,192,96,0,1377,117,1,0,0,0,1378,1382,5,55,
        0,0,1379,1381,5,131,0,0,1380,1379,1,0,0,0,1381,1384,1,0,0,0,1382,
        1380,1,0,0,0,1382,1383,1,0,0,0,1383,1385,1,0,0,0,1384,1382,1,0,0,
        0,1385,1403,3,122,61,0,1386,1403,3,66,33,0,1387,1391,5,22,0,0,1388,
        1390,5,131,0,0,1389,1388,1,0,0,0,1390,1393,1,0,0,0,1391,1389,1,0,
        0,0,1391,1392,1,0,0,0,1392,1394,1,0,0,0,1393,1391,1,0,0,0,1394,1395,
        3,120,60,0,1395,1399,5,23,0,0,1396,1398,5,131,0,0,1397,1396,1,0,
        0,0,1398,1401,1,0,0,0,1399,1397,1,0,0,0,1399,1400,1,0,0,0,1400,1403,
        1,0,0,0,1401,1399,1,0,0,0,1402,1378,1,0,0,0,1402,1386,1,0,0,0,1402,
        1387,1,0,0,0,1403,1412,1,0,0,0,1404,1408,5,9,0,0,1405,1407,5,131,
        0,0,1406,1405,1,0,0,0,1407,1410,1,0,0,0,1408,1406,1,0,0,0,1408,1409,
        1,0,0,0,1409,1411,1,0,0,0,1410,1408,1,0,0,0,1411,1413,3,126,63,0,
        1412,1404,1,0,0,0,1412,1413,1,0,0,0,1413,1414,1,0,0,0,1414,1415,
        3,192,96,0,1415,119,1,0,0,0,1416,1418,3,66,33,0,1417,1416,1,0,0,
        0,1417,1418,1,0,0,0,1418,1431,1,0,0,0,1419,1423,5,15,0,0,1420,1422,
        5,131,0,0,1421,1420,1,0,0,0,1422,1425,1,0,0,0,1423,1421,1,0,0,0,
        1423,1424,1,0,0,0,1424,1427,1,0,0,0,1425,1423,1,0,0,0,1426,1428,
        3,66,33,0,1427,1426,1,0,0,0,1427,1428,1,0,0,0,1428,1430,1,0,0,0,
        1429,1419,1,0,0,0,1430,1433,1,0,0,0,1431,1429,1,0,0,0,1431,1432,
        1,0,0,0,1432,121,1,0,0,0,1433,1431,1,0,0,0,1434,1438,5,22,0,0,1435,
        1437,5,131,0,0,1436,1435,1,0,0,0,1437,1440,1,0,0,0,1438,1436,1,0,
        0,0,1438,1439,1,0,0,0,1439,1453,1,0,0,0,1440,1438,1,0,0,0,1441,1443,
        3,184,92,0,1442,1441,1,0,0,0,1442,1443,1,0,0,0,1443,1444,1,0,0,0,
        1444,1448,5,15,0,0,1445,1447,5,131,0,0,1446,1445,1,0,0,0,1447,1450,
        1,0,0,0,1448,1446,1,0,0,0,1448,1449,1,0,0,0,1449,1452,1,0,0,0,1450,
        1448,1,0,0,0,1451,1442,1,0,0,0,1452,1455,1,0,0,0,1453,1451,1,0,0,
        0,1453,1454,1,0,0,0,1454,1457,1,0,0,0,1455,1453,1,0,0,0,1456,1458,
        3,184,92,0,1457,1456,1,0,0,0,1457,1458,1,0,0,0,1458,1459,1,0,0,0,
        1459,1463,5,23,0,0,1460,1462,5,131,0,0,1461,1460,1,0,0,0,1462,1465,
        1,0,0,0,1463,1461,1,0,0,0,1463,1464,1,0,0,0,1464,123,1,0,0,0,1465,
        1463,1,0,0,0,1466,1470,7,4,0,0,1467,1469,5,131,0,0,1468,1467,1,0,
        0,0,1469,1472,1,0,0,0,1470,1468,1,0,0,0,1470,1471,1,0,0,0,1471,125,
        1,0,0,0,1472,1470,1,0,0,0,1473,1474,6,63,-1,0,1474,1478,5,61,0,0,
        1475,1477,5,131,0,0,1476,1475,1,0,0,0,1477,1480,1,0,0,0,1478,1476,
        1,0,0,0,1478,1479,1,0,0,0,1479,1481,1,0,0,0,1480,1478,1,0,0,0,1481,
        1539,3,68,34,0,1482,1486,5,22,0,0,1483,1485,5,131,0,0,1484,1483,
        1,0,0,0,1485,1488,1,0,0,0,1486,1484,1,0,0,0,1486,1487,1,0,0,0,1487,
        1489,1,0,0,0,1488,1486,1,0,0,0,1489,1490,3,126,63,0,1490,1494,5,
        23,0,0,1491,1493,5,131,0,0,1492,1491,1,0,0,0,1493,1496,1,0,0,0,1494,
        1492,1,0,0,0,1494,1495,1,0,0,0,1495,1539,1,0,0,0,1496,1494,1,0,0,
        0,1497,1501,7,5,0,0,1498,1500,5,131,0,0,1499,1498,1,0,0,0,1500,1503,
        1,0,0,0,1501,1499,1,0,0,0,1501,1502,1,0,0,0,1502,1504,1,0,0,0,1503,
        1501,1,0,0,0,1504,1539,3,126,63,19,1505,1509,7,6,0,0,1506,1508,5,
        131,0,0,1507,1506,1,0,0,0,1508,1511,1,0,0,0,1509,1507,1,0,0,0,1509,
        1510,1,0,0,0,1510,1512,1,0,0,0,1511,1509,1,0,0,0,1512,1539,3,126,
        63,18,1513,1517,7,7,0,0,1514,1516,5,131,0,0,1515,1514,1,0,0,0,1516,
        1519,1,0,0,0,1517,1515,1,0,0,0,1517,1518,1,0,0,0,1518,1520,1,0,0,
        0,1519,1517,1,0,0,0,1520,1539,3,126,63,17,1521,1525,5,67,0,0,1522,
        1524,5,131,0,0,1523,1522,1,0,0,0,1524,1527,1,0,0,0,1525,1523,1,0,
        0,0,1525,1526,1,0,0,0,1526,1528,1,0,0,0,1527,1525,1,0,0,0,1528,1539,
        3,126,63,16,1529,1533,5,4,0,0,1530,1532,5,131,0,0,1531,1530,1,0,
        0,0,1532,1535,1,0,0,0,1533,1531,1,0,0,0,1533,1534,1,0,0,0,1534,1536,
        1,0,0,0,1535,1533,1,0,0,0,1536,1539,3,126,63,15,1537,1539,3,128,
        64,0,1538,1473,1,0,0,0,1538,1482,1,0,0,0,1538,1497,1,0,0,0,1538,
        1505,1,0,0,0,1538,1513,1,0,0,0,1538,1521,1,0,0,0,1538,1529,1,0,0,
        0,1538,1537,1,0,0,0,1539,1761,1,0,0,0,1540,1541,10,14,0,0,1541,1545,
        5,68,0,0,1542,1544,5,131,0,0,1543,1542,1,0,0,0,1544,1547,1,0,0,0,
        1545,1543,1,0,0,0,1545,1546,1,0,0,0,1546,1548,1,0,0,0,1547,1545,
        1,0,0,0,1548,1760,3,126,63,15,1549,1550,10,13,0,0,1550,1554,7,8,
        0,0,1551,1553,5,131,0,0,1552,1551,1,0,0,0,1553,1556,1,0,0,0,1554,
        1552,1,0,0,0,1554,1555,1,0,0,0,1555,1557,1,0,0,0,1556,1554,1,0,0,
        0,1557,1760,3,126,63,14,1558,1559,10,12,0,0,1559,1563,7,6,0,0,1560,
        1562,5,131,0,0,1561,1560,1,0,0,0,1562,1565,1,0,0,0,1563,1561,1,0,
        0,0,1563,1564,1,0,0,0,1564,1566,1,0,0,0,1565,1563,1,0,0,0,1566,1760,
        3,126,63,13,1567,1568,10,11,0,0,1568,1572,7,9,0,0,1569,1571,5,131,
        0,0,1570,1569,1,0,0,0,1571,1574,1,0,0,0,1572,1570,1,0,0,0,1572,1573,
        1,0,0,0,1573,1575,1,0,0,0,1574,1572,1,0,0,0,1575,1760,3,126,63,12,
        1576,1577,10,10,0,0,1577,1581,5,73,0,0,1578,1580,5,131,0,0,1579,
        1578,1,0,0,0,1580,1583,1,0,0,0,1581,1579,1,0,0,0,1581,1582,1,0,0,
        0,1582,1584,1,0,0,0,1583,1581,1,0,0,0,1584,1760,3,126,63,11,1585,
        1586,10,9,0,0,1586,1590,5,3,0,0,1587,1589,5,131,0,0,1588,1587,1,
        0,0,0,1589,1592,1,0,0,0,1590,1588,1,0,0,0,1590,1591,1,0,0,0,1591,
        1593,1,0,0,0,1592,1590,1,0,0,0,1593,1760,3,126,63,10,1594,1595,10,
        8,0,0,1595,1599,5,74,0,0,1596,1598,5,131,0,0,1597,1596,1,0,0,0,1598,
        1601,1,0,0,0,1599,1597,1,0,0,0,1599,1600,1,0,0,0,1600,1602,1,0,0,
        0,1601,1599,1,0,0,0,1602,1760,3,126,63,9,1603,1604,10,7,0,0,1604,
        1608,7,10,0,0,1605,1607,5,131,0,0,1606,1605,1,0,0,0,1607,1610,1,
        0,0,0,1608,1606,1,0,0,0,1608,1609,1,0,0,0,1609,1611,1,0,0,0,1610,
        1608,1,0,0,0,1611,1760,3,126,63,8,1612,1613,10,6,0,0,1613,1617,7,
        11,0,0,1614,1616,5,131,0,0,1615,1614,1,0,0,0,1616,1619,1,0,0,0,1617,
        1615,1,0,0,0,1617,1618,1,0,0,0,1618,1620,1,0,0,0,1619,1617,1,0,0,
        0,1620,1760,3,126,63,7,1621,1622,10,5,0,0,1622,1626,5,77,0,0,1623,
        1625,5,131,0,0,1624,1623,1,0,0,0,1625,1628,1,0,0,0,1626,1624,1,0,
        0,0,1626,1627,1,0,0,0,1627,1629,1,0,0,0,1628,1626,1,0,0,0,1629,1760,
        3,126,63,6,1630,1631,10,4,0,0,1631,1635,5,2,0,0,1632,1634,5,131,
        0,0,1633,1632,1,0,0,0,1634,1637,1,0,0,0,1635,1633,1,0,0,0,1635,1636,
        1,0,0,0,1636,1638,1,0,0,0,1637,1635,1,0,0,0,1638,1760,3,126,63,5,
        1639,1640,10,3,0,0,1640,1644,5,78,0,0,1641,1643,5,131,0,0,1642,1641,
        1,0,0,0,1643,1646,1,0,0,0,1644,1642,1,0,0,0,1644,1645,1,0,0,0,1645,
        1647,1,0,0,0,1646,1644,1,0,0,0,1647,1648,3,126,63,0,1648,1652,5,
        62,0,0,1649,1651,5,131,0,0,1650,1649,1,0,0,0,1651,1654,1,0,0,0,1652,
        1650,1,0,0,0,1652,1653,1,0,0,0,1653,1655,1,0,0,0,1654,1652,1,0,0,
        0,1655,1656,3,126,63,4,1656,1760,1,0,0,0,1657,1658,10,2,0,0,1658,
        1662,7,12,0,0,1659,1661,5,131,0,0,1660,1659,1,0,0,0,1661,1664,1,
        0,0,0,1662,1660,1,0,0,0,1662,1663,1,0,0,0,1663,1665,1,0,0,0,1664,
        1662,1,0,0,0,1665,1760,3,126,63,3,1666,1667,10,27,0,0,1667,1671,
        7,5,0,0,1668,1670,5,131,0,0,1669,1668,1,0,0,0,1670,1673,1,0,0,0,
        1671,1669,1,0,0,0,1671,1672,1,0,0,0,1672,1760,1,0,0,0,1673,1671,
        1,0,0,0,1674,1675,10,25,0,0,1675,1679,5,33,0,0,1676,1678,5,131,0,
        0,1677,1676,1,0,0,0,1678,1681,1,0,0,0,1679,1677,1,0,0,0,1679,1680,
        1,0,0,0,1680,1682,1,0,0,0,1681,1679,1,0,0,0,1682,1683,3,126,63,0,
        1683,1687,5,34,0,0,1684,1686,5,131,0,0,1685,1684,1,0,0,0,1686,1689,
        1,0,0,0,1687,1685,1,0,0,0,1687,1688,1,0,0,0,1688,1760,1,0,0,0,1689,
        1687,1,0,0,0,1690,1691,10,24,0,0,1691,1695,5,33,0,0,1692,1694,5,
        131,0,0,1693,1692,1,0,0,0,1694,1697,1,0,0,0,1695,1693,1,0,0,0,1695,
        1696,1,0,0,0,1696,1699,1,0,0,0,1697,1695,1,0,0,0,1698,1700,3,126,
        63,0,1699,1698,1,0,0,0,1699,1700,1,0,0,0,1700,1701,1,0,0,0,1701,
        1705,5,62,0,0,1702,1704,5,131,0,0,1703,1702,1,0,0,0,1704,1707,1,
        0,0,0,1705,1703,1,0,0,0,1705,1706,1,0,0,0,1706,1709,1,0,0,0,1707,
        1705,1,0,0,0,1708,1710,3,126,63,0,1709,1708,1,0,0,0,1709,1710,1,
        0,0,0,1710,1711,1,0,0,0,1711,1715,5,34,0,0,1712,1714,5,131,0,0,1713,
        1712,1,0,0,0,1714,1717,1,0,0,0,1715,1713,1,0,0,0,1715,1716,1,0,0,
        0,1716,1760,1,0,0,0,1717,1715,1,0,0,0,1718,1719,10,23,0,0,1719,1723,
        5,36,0,0,1720,1722,5,131,0,0,1721,1720,1,0,0,0,1722,1725,1,0,0,0,
        1723,1721,1,0,0,0,1723,1724,1,0,0,0,1724,1726,1,0,0,0,1725,1723,
        1,0,0,0,1726,1760,3,184,92,0,1727,1728,10,22,0,0,1728,1732,5,14,
        0,0,1729,1731,5,131,0,0,1730,1729,1,0,0,0,1731,1734,1,0,0,0,1732,
        1730,1,0,0,0,1732,1733,1,0,0,0,1733,1735,1,0,0,0,1734,1732,1,0,0,
        0,1735,1736,3,132,66,0,1736,1740,5,16,0,0,1737,1739,5,131,0,0,1738,
        1737,1,0,0,0,1739,1742,1,0,0,0,1740,1738,1,0,0,0,1740,1741,1,0,0,
        0,1741,1760,1,0,0,0,1742,1740,1,0,0,0,1743,1744,10,21,0,0,1744,1748,
        5,22,0,0,1745,1747,5,131,0,0,1746,1745,1,0,0,0,1747,1750,1,0,0,0,
        1748,1746,1,0,0,0,1748,1749,1,0,0,0,1749,1751,1,0,0,0,1750,1748,
        1,0,0,0,1751,1752,3,136,68,0,1752,1756,5,23,0,0,1753,1755,5,131,
        0,0,1754,1753,1,0,0,0,1755,1758,1,0,0,0,1756,1754,1,0,0,0,1756,1757,
        1,0,0,0,1757,1760,1,0,0,0,1758,1756,1,0,0,0,1759,1540,1,0,0,0,1759,
        1549,1,0,0,0,1759,1558,1,0,0,0,1759,1567,1,0,0,0,1759,1576,1,0,0,
        0,1759,1585,1,0,0,0,1759,1594,1,0,0,0,1759,1603,1,0,0,0,1759,1612,
        1,0,0,0,1759,1621,1,0,0,0,1759,1630,1,0,0,0,1759,1639,1,0,0,0,1759,
        1657,1,0,0,0,1759,1666,1,0,0,0,1759,1674,1,0,0,0,1759,1690,1,0,0,
        0,1759,1718,1,0,0,0,1759,1727,1,0,0,0,1759,1743,1,0,0,0,1760,1763,
        1,0,0,0,1761,1759,1,0,0,0,1761,1762,1,0,0,0,1762,127,1,0,0,0,1763,
        1761,1,0,0,0,1764,1768,5,103,0,0,1765,1767,5,131,0,0,1766,1765,1,
        0,0,0,1767,1770,1,0,0,0,1768,1766,1,0,0,0,1768,1769,1,0,0,0,1769,
        1824,1,0,0,0,1770,1768,1,0,0,0,1771,1824,3,182,91,0,1772,1824,3,
        186,93,0,1773,1824,3,190,95,0,1774,1789,3,184,92,0,1775,1779,5,33,
        0,0,1776,1778,5,131,0,0,1777,1776,1,0,0,0,1778,1781,1,0,0,0,1779,
        1777,1,0,0,0,1779,1780,1,0,0,0,1780,1782,1,0,0,0,1781,1779,1,0,0,
        0,1782,1786,5,34,0,0,1783,1785,5,131,0,0,1784,1783,1,0,0,0,1785,
        1788,1,0,0,0,1786,1784,1,0,0,0,1786,1787,1,0,0,0,1787,1790,1,0,0,
        0,1788,1786,1,0,0,0,1789,1775,1,0,0,0,1789,1790,1,0,0,0,1790,1824,
        1,0,0,0,1791,1795,5,123,0,0,1792,1794,5,131,0,0,1793,1792,1,0,0,
        0,1794,1797,1,0,0,0,1795,1793,1,0,0,0,1795,1796,1,0,0,0,1796,1824,
        1,0,0,0,1797,1795,1,0,0,0,1798,1802,5,118,0,0,1799,1801,5,131,0,
        0,1800,1799,1,0,0,0,1801,1804,1,0,0,0,1802,1800,1,0,0,0,1802,1803,
        1,0,0,0,1803,1824,1,0,0,0,1804,1802,1,0,0,0,1805,1824,3,178,89,0,
        1806,1821,3,180,90,0,1807,1811,5,33,0,0,1808,1810,5,131,0,0,1809,
        1808,1,0,0,0,1810,1813,1,0,0,0,1811,1809,1,0,0,0,1811,1812,1,0,0,
        0,1812,1814,1,0,0,0,1813,1811,1,0,0,0,1814,1818,5,34,0,0,1815,1817,
        5,131,0,0,1816,1815,1,0,0,0,1817,1820,1,0,0,0,1818,1816,1,0,0,0,
        1818,1819,1,0,0,0,1819,1822,1,0,0,0,1820,1818,1,0,0,0,1821,1807,
        1,0,0,0,1821,1822,1,0,0,0,1822,1824,1,0,0,0,1823,1764,1,0,0,0,1823,
        1771,1,0,0,0,1823,1772,1,0,0,0,1823,1773,1,0,0,0,1823,1774,1,0,0,
        0,1823,1791,1,0,0,0,1823,1798,1,0,0,0,1823,1805,1,0,0,0,1823,1806,
        1,0,0,0,1824,129,1,0,0,0,1825,1836,3,126,63,0,1826,1830,5,15,0,0,
        1827,1829,5,131,0,0,1828,1827,1,0,0,0,1829,1832,1,0,0,0,1830,1828,
        1,0,0,0,1830,1831,1,0,0,0,1831,1833,1,0,0,0,1832,1830,1,0,0,0,1833,
        1835,3,126,63,0,1834,1826,1,0,0,0,1835,1838,1,0,0,0,1836,1834,1,
        0,0,0,1836,1837,1,0,0,0,1837,131,1,0,0,0,1838,1836,1,0,0,0,1839,
        1850,3,134,67,0,1840,1844,5,15,0,0,1841,1843,5,131,0,0,1842,1841,
        1,0,0,0,1843,1846,1,0,0,0,1844,1842,1,0,0,0,1844,1845,1,0,0,0,1845,
        1847,1,0,0,0,1846,1844,1,0,0,0,1847,1849,3,134,67,0,1848,1840,1,
        0,0,0,1849,1852,1,0,0,0,1850,1848,1,0,0,0,1850,1851,1,0,0,0,1851,
        1860,1,0,0,0,1852,1850,1,0,0,0,1853,1857,5,15,0,0,1854,1856,5,131,
        0,0,1855,1854,1,0,0,0,1856,1859,1,0,0,0,1857,1855,1,0,0,0,1857,1858,
        1,0,0,0,1858,1861,1,0,0,0,1859,1857,1,0,0,0,1860,1853,1,0,0,0,1860,
        1861,1,0,0,0,1861,133,1,0,0,0,1862,1863,3,184,92,0,1863,1867,5,62,
        0,0,1864,1866,5,131,0,0,1865,1864,1,0,0,0,1866,1869,1,0,0,0,1867,
        1865,1,0,0,0,1867,1868,1,0,0,0,1868,1870,1,0,0,0,1869,1867,1,0,0,
        0,1870,1871,3,126,63,0,1871,135,1,0,0,0,1872,1876,5,14,0,0,1873,
        1875,5,131,0,0,1874,1873,1,0,0,0,1875,1878,1,0,0,0,1876,1874,1,0,
        0,0,1876,1877,1,0,0,0,1877,1880,1,0,0,0,1878,1876,1,0,0,0,1879,1881,
        3,132,66,0,1880,1879,1,0,0,0,1880,1881,1,0,0,0,1881,1882,1,0,0,0,
        1882,1886,5,16,0,0,1883,1885,5,131,0,0,1884,1883,1,0,0,0,1885,1888,
        1,0,0,0,1886,1884,1,0,0,0,1886,1887,1,0,0,0,1887,1893,1,0,0,0,1888,
        1886,1,0,0,0,1889,1891,3,130,65,0,1890,1889,1,0,0,0,1890,1891,1,
        0,0,0,1891,1893,1,0,0,0,1892,1872,1,0,0,0,1892,1890,1,0,0,0,1893,
        137,1,0,0,0,1894,1895,3,126,63,0,1895,1899,5,22,0,0,1896,1898,5,
        131,0,0,1897,1896,1,0,0,0,1898,1901,1,0,0,0,1899,1897,1,0,0,0,1899,
        1900,1,0,0,0,1900,1902,1,0,0,0,1901,1899,1,0,0,0,1902,1903,3,136,
        68,0,1903,1907,5,23,0,0,1904,1906,5,131,0,0,1905,1904,1,0,0,0,1906,
        1909,1,0,0,0,1907,1905,1,0,0,0,1907,1908,1,0,0,0,1908,139,1,0,0,
        0,1909,1907,1,0,0,0,1910,1914,5,14,0,0,1911,1913,5,131,0,0,1912,
        1911,1,0,0,0,1913,1916,1,0,0,0,1914,1912,1,0,0,0,1914,1915,1,0,0,
        0,1915,1920,1,0,0,0,1916,1914,1,0,0,0,1917,1919,3,142,71,0,1918,
        1917,1,0,0,0,1919,1922,1,0,0,0,1920,1918,1,0,0,0,1920,1921,1,0,0,
        0,1921,1923,1,0,0,0,1922,1920,1,0,0,0,1923,1927,5,16,0,0,1924,1926,
        5,131,0,0,1925,1924,1,0,0,0,1926,1929,1,0,0,0,1927,1925,1,0,0,0,
        1927,1928,1,0,0,0,1928,141,1,0,0,0,1929,1927,1,0,0,0,1930,1967,3,
        184,92,0,1931,1967,3,140,70,0,1932,1967,3,144,72,0,1933,1967,3,150,
        75,0,1934,1967,3,152,76,0,1935,1967,3,158,79,0,1936,1967,3,160,80,
        0,1937,1967,3,162,81,0,1938,1967,3,166,83,0,1939,1967,3,170,85,0,
        1940,1967,3,172,86,0,1941,1945,5,110,0,0,1942,1944,5,131,0,0,1943,
        1942,1,0,0,0,1944,1947,1,0,0,0,1945,1943,1,0,0,0,1945,1946,1,0,0,
        0,1946,1967,1,0,0,0,1947,1945,1,0,0,0,1948,1952,5,113,0,0,1949,1951,
        5,131,0,0,1950,1949,1,0,0,0,1951,1954,1,0,0,0,1952,1950,1,0,0,0,
        1952,1953,1,0,0,0,1953,1967,1,0,0,0,1954,1952,1,0,0,0,1955,1959,
        5,114,0,0,1956,1958,5,131,0,0,1957,1956,1,0,0,0,1958,1961,1,0,0,
        0,1959,1957,1,0,0,0,1959,1960,1,0,0,0,1960,1967,1,0,0,0,1961,1959,
        1,0,0,0,1962,1967,3,176,88,0,1963,1967,3,182,91,0,1964,1967,3,190,
        95,0,1965,1967,3,186,93,0,1966,1930,1,0,0,0,1966,1931,1,0,0,0,1966,
        1932,1,0,0,0,1966,1933,1,0,0,0,1966,1934,1,0,0,0,1966,1935,1,0,0,
        0,1966,1936,1,0,0,0,1966,1937,1,0,0,0,1966,1938,1,0,0,0,1966,1939,
        1,0,0,0,1966,1940,1,0,0,0,1966,1941,1,0,0,0,1966,1948,1,0,0,0,1966,
        1955,1,0,0,0,1966,1962,1,0,0,0,1966,1963,1,0,0,0,1966,1964,1,0,0,
        0,1966,1965,1,0,0,0,1967,143,1,0,0,0,1968,1972,3,148,74,0,1969,1972,
        3,174,87,0,1970,1972,3,146,73,0,1971,1968,1,0,0,0,1971,1969,1,0,
        0,0,1971,1970,1,0,0,0,1972,145,1,0,0,0,1973,1974,3,184,92,0,1974,
        1978,5,36,0,0,1975,1977,5,131,0,0,1976,1975,1,0,0,0,1977,1980,1,
        0,0,0,1978,1976,1,0,0,0,1978,1979,1,0,0,0,1979,1981,1,0,0,0,1980,
        1978,1,0,0,0,1981,1982,3,184,92,0,1982,147,1,0,0,0,1983,1987,5,51,
        0,0,1984,1986,5,131,0,0,1985,1984,1,0,0,0,1986,1989,1,0,0,0,1987,
        1985,1,0,0,0,1987,1988,1,0,0,0,1988,2006,1,0,0,0,1989,1987,1,0,0,
        0,1990,1994,5,35,0,0,1991,1993,5,131,0,0,1992,1991,1,0,0,0,1993,
        1996,1,0,0,0,1994,1992,1,0,0,0,1994,1995,1,0,0,0,1995,2006,1,0,0,
        0,1996,1994,1,0,0,0,1997,2001,5,58,0,0,1998,2000,5,131,0,0,1999,
        1998,1,0,0,0,2000,2003,1,0,0,0,2001,1999,1,0,0,0,2001,2002,1,0,0,
        0,2002,2006,1,0,0,0,2003,2001,1,0,0,0,2004,2006,3,184,92,0,2005,
        1983,1,0,0,0,2005,1990,1,0,0,0,2005,1997,1,0,0,0,2005,2004,1,0,0,
        0,2006,2037,1,0,0,0,2007,2011,5,22,0,0,2008,2010,5,131,0,0,2009,
        2008,1,0,0,0,2010,2013,1,0,0,0,2011,2009,1,0,0,0,2011,2012,1,0,0,
        0,2012,2015,1,0,0,0,2013,2011,1,0,0,0,2014,2016,3,144,72,0,2015,
        2014,1,0,0,0,2015,2016,1,0,0,0,2016,2027,1,0,0,0,2017,2021,5,15,
        0,0,2018,2020,5,131,0,0,2019,2018,1,0,0,0,2020,2023,1,0,0,0,2021,
        2019,1,0,0,0,2021,2022,1,0,0,0,2022,2024,1,0,0,0,2023,2021,1,0,0,
        0,2024,2026,3,144,72,0,2025,2017,1,0,0,0,2026,2029,1,0,0,0,2027,
        2025,1,0,0,0,2027,2028,1,0,0,0,2028,2030,1,0,0,0,2029,2027,1,0,0,
        0,2030,2034,5,23,0,0,2031,2033,5,131,0,0,2032,2031,1,0,0,0,2033,
        2036,1,0,0,0,2034,2032,1,0,0,0,2034,2035,1,0,0,0,2035,2038,1,0,0,
        0,2036,2034,1,0,0,0,2037,2007,1,0,0,0,2037,2038,1,0,0,0,2038,149,
        1,0,0,0,2039,2043,5,89,0,0,2040,2042,5,131,0,0,2041,2040,1,0,0,0,
        2042,2045,1,0,0,0,2043,2041,1,0,0,0,2043,2044,1,0,0,0,2044,2046,
        1,0,0,0,2045,2043,1,0,0,0,2046,2055,3,154,77,0,2047,2051,5,90,0,
        0,2048,2050,5,131,0,0,2049,2048,1,0,0,0,2050,2053,1,0,0,0,2051,2049,
        1,0,0,0,2051,2052,1,0,0,0,2052,2054,1,0,0,0,2053,2051,1,0,0,0,2054,
        2056,3,144,72,0,2055,2047,1,0,0,0,2055,2056,1,0,0,0,2056,151,1,0,
        0,0,2057,2058,3,154,77,0,2058,2062,5,90,0,0,2059,2061,5,131,0,0,
        2060,2059,1,0,0,0,2061,2064,1,0,0,0,2062,2060,1,0,0,0,2062,2063,
        1,0,0,0,2063,2065,1,0,0,0,2064,2062,1,0,0,0,2065,2066,3,144,72,0,
        2066,153,1,0,0,0,2067,2085,3,184,92,0,2068,2085,3,146,73,0,2069,
        2073,5,22,0,0,2070,2072,5,131,0,0,2071,2070,1,0,0,0,2072,2075,1,
        0,0,0,2073,2071,1,0,0,0,2073,2074,1,0,0,0,2074,2076,1,0,0,0,2075,
        2073,1,0,0,0,2076,2077,3,156,78,0,2077,2081,5,23,0,0,2078,2080,5,
        131,0,0,2079,2078,1,0,0,0,2080,2083,1,0,0,0,2081,2079,1,0,0,0,2081,
        2082,1,0,0,0,2082,2085,1,0,0,0,2083,2081,1,0,0,0,2084,2067,1,0,0,
        0,2084,2068,1,0,0,0,2084,2069,1,0,0,0,2085,155,1,0,0,0,2086,2097,
        3,184,92,0,2087,2091,5,15,0,0,2088,2090,5,131,0,0,2089,2088,1,0,
        0,0,2090,2093,1,0,0,0,2091,2089,1,0,0,0,2091,2092,1,0,0,0,2092,2094,
        1,0,0,0,2093,2091,1,0,0,0,2094,2096,3,184,92,0,2095,2087,1,0,0,0,
        2096,2099,1,0,0,0,2097,2095,1,0,0,0,2097,2098,1,0,0,0,2098,157,1,
        0,0,0,2099,2097,1,0,0,0,2100,2104,5,91,0,0,2101,2103,5,131,0,0,2102,
        2101,1,0,0,0,2103,2106,1,0,0,0,2104,2102,1,0,0,0,2104,2105,1,0,0,
        0,2105,2107,1,0,0,0,2106,2104,1,0,0,0,2107,2108,3,184,92,0,2108,
        159,1,0,0,0,2109,2110,3,184,92,0,2110,2114,5,62,0,0,2111,2113,5,
        131,0,0,2112,2111,1,0,0,0,2113,2116,1,0,0,0,2114,2112,1,0,0,0,2114,
        2115,1,0,0,0,2115,161,1,0,0,0,2116,2114,1,0,0,0,2117,2121,5,92,0,
        0,2118,2120,5,131,0,0,2119,2118,1,0,0,0,2120,2123,1,0,0,0,2121,2119,
        1,0,0,0,2121,2122,1,0,0,0,2122,2124,1,0,0,0,2123,2121,1,0,0,0,2124,
        2128,3,144,72,0,2125,2127,3,164,82,0,2126,2125,1,0,0,0,2127,2130,
        1,0,0,0,2128,2126,1,0,0,0,2128,2129,1,0,0,0,2129,163,1,0,0,0,2130,
        2128,1,0,0,0,2131,2135,5,93,0,0,2132,2134,5,131,0,0,2133,2132,1,
        0,0,0,2134,2137,1,0,0,0,2135,2133,1,0,0,0,2135,2136,1,0,0,0,2136,
        2138,1,0,0,0,2137,2135,1,0,0,0,2138,2139,3,174,87,0,2139,2140,3,
        140,70,0,2140,2150,1,0,0,0,2141,2145,5,94,0,0,2142,2144,5,131,0,
        0,2143,2142,1,0,0,0,2144,2147,1,0,0,0,2145,2143,1,0,0,0,2145,2146,
        1,0,0,0,2146,2148,1,0,0,0,2147,2145,1,0,0,0,2148,2150,3,140,70,0,
        2149,2131,1,0,0,0,2149,2141,1,0,0,0,2150,165,1,0,0,0,2151,2155,5,
        29,0,0,2152,2154,5,131,0,0,2153,2152,1,0,0,0,2154,2157,1,0,0,0,2155,
        2153,1,0,0,0,2155,2156,1,0,0,0,2156,2158,1,0,0,0,2157,2155,1,0,0,
        0,2158,2159,3,184,92,0,2159,2163,5,22,0,0,2160,2162,5,131,0,0,2161,
        2160,1,0,0,0,2162,2165,1,0,0,0,2163,2161,1,0,0,0,2163,2164,1,0,0,
        0,2164,2167,1,0,0,0,2165,2163,1,0,0,0,2166,2168,3,156,78,0,2167,
        2166,1,0,0,0,2167,2168,1,0,0,0,2168,2169,1,0,0,0,2169,2173,5,23,
        0,0,2170,2172,5,131,0,0,2171,2170,1,0,0,0,2172,2175,1,0,0,0,2173,
        2171,1,0,0,0,2173,2174,1,0,0,0,2174,2177,1,0,0,0,2175,2173,1,0,0,
        0,2176,2178,3,168,84,0,2177,2176,1,0,0,0,2177,2178,1,0,0,0,2178,
        2179,1,0,0,0,2179,2180,3,140,70,0,2180,167,1,0,0,0,2181,2185,5,95,
        0,0,2182,2184,5,131,0,0,2183,2182,1,0,0,0,2184,2187,1,0,0,0,2185,
        2183,1,0,0,0,2185,2186,1,0,0,0,2186,2188,1,0,0,0,2187,2185,1,0,0,
        0,2188,2189,3,156,78,0,2189,169,1,0,0,0,2190,2194,5,26,0,0,2191,
        2193,5,131,0,0,2192,2191,1,0,0,0,2193,2196,1,0,0,0,2194,2192,1,0,
        0,0,2194,2195,1,0,0,0,2195,2199,1,0,0,0,2196,2194,1,0,0,0,2197,2200,
        3,140,70,0,2198,2200,3,144,72,0,2199,2197,1,0,0,0,2199,2198,1,0,
        0,0,2200,2201,1,0,0,0,2201,2204,3,144,72,0,2202,2205,3,140,70,0,
        2203,2205,3,144,72,0,2204,2202,1,0,0,0,2204,2203,1,0,0,0,2205,2206,
        1,0,0,0,2206,2207,3,140,70,0,2207,171,1,0,0,0,2208,2212,5,42,0,0,
        2209,2211,5,131,0,0,2210,2209,1,0,0,0,2211,2214,1,0,0,0,2212,2210,
        1,0,0,0,2212,2213,1,0,0,0,2213,2215,1,0,0,0,2214,2212,1,0,0,0,2215,
        2216,3,144,72,0,2216,2217,3,140,70,0,2217,173,1,0,0,0,2218,2235,
        3,190,95,0,2219,2223,5,104,0,0,2220,2222,5,131,0,0,2221,2220,1,0,
        0,0,2222,2225,1,0,0,0,2223,2221,1,0,0,0,2223,2224,1,0,0,0,2224,2235,
        1,0,0,0,2225,2223,1,0,0,0,2226,2230,5,105,0,0,2227,2229,5,131,0,
        0,2228,2227,1,0,0,0,2229,2232,1,0,0,0,2230,2228,1,0,0,0,2230,2231,
        1,0,0,0,2231,2235,1,0,0,0,2232,2230,1,0,0,0,2233,2235,3,186,93,0,
        2234,2218,1,0,0,0,2234,2219,1,0,0,0,2234,2226,1,0,0,0,2234,2233,
        1,0,0,0,2235,175,1,0,0,0,2236,2240,5,49,0,0,2237,2239,5,131,0,0,
        2238,2237,1,0,0,0,2239,2242,1,0,0,0,2240,2238,1,0,0,0,2240,2241,
        1,0,0,0,2241,2243,1,0,0,0,2242,2240,1,0,0,0,2243,2244,3,184,92,0,
        2244,2245,3,140,70,0,2245,177,1,0,0,0,2246,2250,5,22,0,0,2247,2249,
        5,131,0,0,2248,2247,1,0,0,0,2249,2252,1,0,0,0,2250,2248,1,0,0,0,
        2250,2251,1,0,0,0,2251,2254,1,0,0,0,2252,2250,1,0,0,0,2253,2255,
        3,126,63,0,2254,2253,1,0,0,0,2254,2255,1,0,0,0,2255,2268,1,0,0,0,
        2256,2260,5,15,0,0,2257,2259,5,131,0,0,2258,2257,1,0,0,0,2259,2262,
        1,0,0,0,2260,2258,1,0,0,0,2260,2261,1,0,0,0,2261,2264,1,0,0,0,2262,
        2260,1,0,0,0,2263,2265,3,126,63,0,2264,2263,1,0,0,0,2264,2265,1,
        0,0,0,2265,2267,1,0,0,0,2266,2256,1,0,0,0,2267,2270,1,0,0,0,2268,
        2266,1,0,0,0,2268,2269,1,0,0,0,2269,2271,1,0,0,0,2270,2268,1,0,0,
        0,2271,2275,5,23,0,0,2272,2274,5,131,0,0,2273,2272,1,0,0,0,2274,
        2277,1,0,0,0,2275,2273,1,0,0,0,2275,2276,1,0,0,0,2276,2309,1,0,0,
        0,2277,2275,1,0,0,0,2278,2282,5,33,0,0,2279,2281,5,131,0,0,2280,
        2279,1,0,0,0,2281,2284,1,0,0,0,2282,2280,1,0,0,0,2282,2283,1,0,0,
        0,2283,2299,1,0,0,0,2284,2282,1,0,0,0,2285,2296,3,126,63,0,2286,
        2290,5,15,0,0,2287,2289,5,131,0,0,2288,2287,1,0,0,0,2289,2292,1,
        0,0,0,2290,2288,1,0,0,0,2290,2291,1,0,0,0,2291,2293,1,0,0,0,2292,
        2290,1,0,0,0,2293,2295,3,126,63,0,2294,2286,1,0,0,0,2295,2298,1,
        0,0,0,2296,2294,1,0,0,0,2296,2297,1,0,0,0,2297,2300,1,0,0,0,2298,
        2296,1,0,0,0,2299,2285,1,0,0,0,2299,2300,1,0,0,0,2300,2301,1,0,0,
        0,2301,2305,5,34,0,0,2302,2304,5,131,0,0,2303,2302,1,0,0,0,2304,
        2307,1,0,0,0,2305,2303,1,0,0,0,2305,2306,1,0,0,0,2306,2309,1,0,0,
        0,2307,2305,1,0,0,0,2308,2246,1,0,0,0,2308,2278,1,0,0,0,2309,179,
        1,0,0,0,2310,2313,3,124,62,0,2311,2313,3,70,35,0,2312,2310,1,0,0,
        0,2312,2311,1,0,0,0,2313,181,1,0,0,0,2314,2318,5,104,0,0,2315,2317,
        5,131,0,0,2316,2315,1,0,0,0,2317,2320,1,0,0,0,2318,2316,1,0,0,0,
        2318,2319,1,0,0,0,2319,2329,1,0,0,0,2320,2318,1,0,0,0,2321,2325,
        5,105,0,0,2322,2324,5,131,0,0,2323,2322,1,0,0,0,2324,2327,1,0,0,
        0,2325,2323,1,0,0,0,2325,2326,1,0,0,0,2326,2329,1,0,0,0,2327,2325,
        1,0,0,0,2328,2314,1,0,0,0,2328,2321,1,0,0,0,2329,2337,1,0,0,0,2330,
        2334,5,106,0,0,2331,2333,5,131,0,0,2332,2331,1,0,0,0,2333,2336,1,
        0,0,0,2334,2332,1,0,0,0,2334,2335,1,0,0,0,2335,2338,1,0,0,0,2336,
        2334,1,0,0,0,2337,2330,1,0,0,0,2337,2338,1,0,0,0,2338,183,1,0,0,
        0,2339,2343,7,13,0,0,2340,2342,5,131,0,0,2341,2340,1,0,0,0,2342,
        2345,1,0,0,0,2343,2341,1,0,0,0,2343,2344,1,0,0,0,2344,185,1,0,0,
        0,2345,2343,1,0,0,0,2346,2350,5,107,0,0,2347,2349,5,131,0,0,2348,
        2347,1,0,0,0,2349,2352,1,0,0,0,2350,2348,1,0,0,0,2350,2351,1,0,0,
        0,2351,2354,1,0,0,0,2352,2350,1,0,0,0,2353,2346,1,0,0,0,2354,2355,
        1,0,0,0,2355,2353,1,0,0,0,2355,2356,1,0,0,0,2356,187,1,0,0,0,2357,
        2361,5,97,0,0,2358,2360,5,131,0,0,2359,2358,1,0,0,0,2360,2363,1,
        0,0,0,2361,2359,1,0,0,0,2361,2362,1,0,0,0,2362,2392,1,0,0,0,2363,
        2361,1,0,0,0,2364,2368,5,22,0,0,2365,2367,5,131,0,0,2366,2365,1,
        0,0,0,2367,2370,1,0,0,0,2368,2366,1,0,0,0,2368,2369,1,0,0,0,2369,
        2371,1,0,0,0,2370,2368,1,0,0,0,2371,2382,3,70,35,0,2372,2376,5,15,
        0,0,2373,2375,5,131,0,0,2374,2373,1,0,0,0,2375,2378,1,0,0,0,2376,
        2374,1,0,0,0,2376,2377,1,0,0,0,2377,2379,1,0,0,0,2378,2376,1,0,0,
        0,2379,2381,3,70,35,0,2380,2372,1,0,0,0,2381,2384,1,0,0,0,2382,2380,
        1,0,0,0,2382,2383,1,0,0,0,2383,2385,1,0,0,0,2384,2382,1,0,0,0,2385,
        2389,5,23,0,0,2386,2388,5,131,0,0,2387,2386,1,0,0,0,2388,2391,1,
        0,0,0,2389,2387,1,0,0,0,2389,2390,1,0,0,0,2390,2393,1,0,0,0,2391,
        2389,1,0,0,0,2392,2364,1,0,0,0,2392,2393,1,0,0,0,2393,189,1,0,0,
        0,2394,2398,5,129,0,0,2395,2397,5,131,0,0,2396,2395,1,0,0,0,2397,
        2400,1,0,0,0,2398,2396,1,0,0,0,2398,2399,1,0,0,0,2399,2402,1,0,0,
        0,2400,2398,1,0,0,0,2401,2394,1,0,0,0,2402,2403,1,0,0,0,2403,2401,
        1,0,0,0,2403,2404,1,0,0,0,2404,191,1,0,0,0,2405,2409,5,48,0,0,2406,
        2408,5,131,0,0,2407,2406,1,0,0,0,2408,2411,1,0,0,0,2409,2407,1,0,
        0,0,2409,2410,1,0,0,0,2410,2418,1,0,0,0,2411,2409,1,0,0,0,2412,2414,
        5,131,0,0,2413,2412,1,0,0,0,2414,2415,1,0,0,0,2415,2413,1,0,0,0,
        2415,2416,1,0,0,0,2416,2418,1,0,0,0,2417,2405,1,0,0,0,2417,2413,
        1,0,0,0,2418,193,1,0,0,0,347,197,210,212,221,232,239,242,247,254,
        258,264,268,274,277,284,288,294,302,306,314,321,325,331,335,341,
        351,358,366,372,379,386,392,400,403,409,417,425,431,434,440,446,
        453,461,465,471,474,484,491,498,505,512,519,523,525,533,537,546,
        554,564,575,583,590,594,602,610,620,623,629,636,641,647,651,653,
        658,665,669,675,678,684,688,694,698,704,711,718,721,727,736,743,
        750,757,764,770,772,779,788,791,801,809,813,819,825,832,839,847,
        853,856,862,867,870,876,884,890,893,899,907,910,913,919,927,933,
        936,942,947,951,964,971,974,981,985,991,996,1004,1010,1015,1021,
        1028,1036,1044,1051,1059,1066,1070,1072,1079,1083,1089,1096,1103,
        1109,1116,1134,1143,1150,1158,1166,1170,1176,1181,1187,1193,1197,
        1200,1208,1215,1223,1230,1236,1245,1252,1260,1263,1270,1273,1276,
        1282,1291,1298,1301,1309,1317,1324,1332,1347,1351,1362,1372,1382,
        1391,1399,1402,1408,1412,1417,1423,1427,1431,1438,1442,1448,1453,
        1457,1463,1470,1478,1486,1494,1501,1509,1517,1525,1533,1538,1545,
        1554,1563,1572,1581,1590,1599,1608,1617,1626,1635,1644,1652,1662,
        1671,1679,1687,1695,1699,1705,1709,1715,1723,1732,1740,1748,1756,
        1759,1761,1768,1779,1786,1789,1795,1802,1811,1818,1821,1823,1830,
        1836,1844,1850,1857,1860,1867,1876,1880,1886,1890,1892,1899,1907,
        1914,1920,1927,1945,1952,1959,1966,1971,1978,1987,1994,2001,2005,
        2011,2015,2021,2027,2034,2037,2043,2051,2055,2062,2073,2081,2084,
        2091,2097,2104,2114,2121,2128,2135,2145,2149,2155,2163,2167,2173,
        2177,2185,2194,2199,2204,2212,2223,2230,2234,2240,2250,2254,2260,
        2264,2268,2275,2282,2290,2296,2299,2305,2308,2312,2318,2325,2328,
        2334,2337,2343,2350,2355,2361,2368,2376,2382,2389,2392,2398,2403,
        2409,2415,2417
    ]

class FuzzySolidityParser ( Parser ):

    grammarFileName = "FuzzySolidity.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'pragma'", "'||'", "'^'", "'~'", "'>='", 
                     "'>'", "'<'", "'<='", "'='", "'as'", "'import'", "'*'", 
                     "'from'", "'{'", "','", "'}'", "'abstract'", "'contract'", 
                     "'interface'", "'library'", "'is'", "'('", "')'", "'error'", 
                     "'using'", "'for'", "'struct'", "'modifier'", "'function'", 
                     "'returns'", "'event'", "'enum'", "'['", "']'", "'address'", 
                     "'.'", "'mapping'", "'=>'", "'memory'", "'storage'", 
                     "'calldata'", "'if'", "'else'", "'try'", "'catch'", 
                     "'while'", "'unchecked'", "';'", "'assembly'", "'do'", 
                     "'return'", "'throw'", "'emit'", "'revert'", "'var'", 
                     "'bool'", "'string'", "'byte'", "'++'", "'--'", "'new'", 
                     "':'", "'+'", "'-'", "'after'", "'delete'", "'!'", 
                     "'**'", "'/'", "'%'", "'<<'", "'>>'", "'&'", "'|'", 
                     "'=='", "'!='", "'&&'", "'?'", "'|='", "'^='", "'&='", 
                     "'<<='", "'>>='", "'+='", "'-='", "'*='", "'/='", "'%='", 
                     "'let'", "':='", "'=:'", "'switch'", "'case'", "'default'", 
                     "'->'", "'callback'", "'override'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'anonymous'", "'break'", "'constant'", 
                     "'immutable'", "'continue'", "'leave'", "'external'", 
                     "'indexed'", "'internal'", "'payable'", "'private'", 
                     "'public'", "'virtual'", "'pure'", "'type'", "'view'", 
                     "'constructor'", "'fallback'", "'receive'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "Int", "Uint", "Byte", "Fixed", 
                      "Ufixed", "BooleanLiteral", "DecimalNumber", "HexNumber", 
                      "NumberUnit", "HexLiteralFragment", "ReservedKeyword", 
                      "AnonymousKeyword", "BreakKeyword", "ConstantKeyword", 
                      "ImmutableKeyword", "ContinueKeyword", "LeaveKeyword", 
                      "ExternalKeyword", "IndexedKeyword", "InternalKeyword", 
                      "PayableKeyword", "PrivateKeyword", "PublicKeyword", 
                      "VirtualKeyword", "PureKeyword", "TypeKeyword", "ViewKeyword", 
                      "ConstructorKeyword", "FallbackKeyword", "ReceiveKeyword", 
                      "Identifier", "StringLiteralFragment", "VersionLiteral", 
                      "NL", "WS", "COMMENT", "LINE_COMMENT" ]

    RULE_sourceUnit = 0
    RULE_pragmaDirective = 1
    RULE_pragmaName = 2
    RULE_pragmaValue = 3
    RULE_version = 4
    RULE_versionOperator = 5
    RULE_versionConstraint = 6
    RULE_importDeclaration = 7
    RULE_importDirective = 8
    RULE_importPath = 9
    RULE_contractDefinition = 10
    RULE_inheritanceSpecifier = 11
    RULE_contractPart = 12
    RULE_stateVariableDeclaration = 13
    RULE_fileLevelConstant = 14
    RULE_customErrorDefinition = 15
    RULE_usingForDeclaration = 16
    RULE_structDefinition = 17
    RULE_modifierDefinition = 18
    RULE_modifierInvocation = 19
    RULE_functionDefinition = 20
    RULE_functionDescriptor = 21
    RULE_returnParameters = 22
    RULE_modifierList = 23
    RULE_eventDefinition = 24
    RULE_enumValue = 25
    RULE_enumDefinition = 26
    RULE_parameterList = 27
    RULE_parameter = 28
    RULE_eventParameterList = 29
    RULE_eventParameter = 30
    RULE_functionTypeParameterList = 31
    RULE_functionTypeParameter = 32
    RULE_variableDeclaration = 33
    RULE_typeName = 34
    RULE_userDefinedTypeName = 35
    RULE_mappingKey = 36
    RULE_mapping = 37
    RULE_functionTypeName = 38
    RULE_storageLocation = 39
    RULE_stateMutability = 40
    RULE_block = 41
    RULE_statement = 42
    RULE_expressionStatement = 43
    RULE_ifStatement = 44
    RULE_tryStatement = 45
    RULE_catchClause = 46
    RULE_whileStatement = 47
    RULE_simpleStatement = 48
    RULE_uncheckedStatement = 49
    RULE_forStatement = 50
    RULE_inlineAssemblyStatement = 51
    RULE_doWhileStatement = 52
    RULE_continueStatement = 53
    RULE_breakStatement = 54
    RULE_returnStatement = 55
    RULE_throwStatement = 56
    RULE_emitStatement = 57
    RULE_revertStatement = 58
    RULE_variableDeclarationStatement = 59
    RULE_variableDeclarationList = 60
    RULE_identifierList = 61
    RULE_elementaryTypeName = 62
    RULE_expression = 63
    RULE_primaryExpression = 64
    RULE_expressionList = 65
    RULE_nameValueList = 66
    RULE_nameValue = 67
    RULE_functionCallArguments = 68
    RULE_functionCall = 69
    RULE_assemblyBlock = 70
    RULE_assemblyItem = 71
    RULE_assemblyExpression = 72
    RULE_assemblyMember = 73
    RULE_assemblyCall = 74
    RULE_assemblyLocalDefinition = 75
    RULE_assemblyAssignment = 76
    RULE_assemblyIdentifierOrList = 77
    RULE_assemblyIdentifierList = 78
    RULE_assemblyStackAssignment = 79
    RULE_labelDefinition = 80
    RULE_assemblySwitch = 81
    RULE_assemblyCase = 82
    RULE_assemblyFunctionDefinition = 83
    RULE_assemblyFunctionReturns = 84
    RULE_assemblyFor = 85
    RULE_assemblyIf = 86
    RULE_assemblyLiteral = 87
    RULE_subAssembly = 88
    RULE_tupleExpression = 89
    RULE_typeNameExpression = 90
    RULE_numberLiteral = 91
    RULE_identifier = 92
    RULE_hexLiteral = 93
    RULE_overrideSpecifier = 94
    RULE_stringLiteral = 95
    RULE_eos = 96

    ruleNames =  [ "sourceUnit", "pragmaDirective", "pragmaName", "pragmaValue", 
                   "version", "versionOperator", "versionConstraint", "importDeclaration", 
                   "importDirective", "importPath", "contractDefinition", 
                   "inheritanceSpecifier", "contractPart", "stateVariableDeclaration", 
                   "fileLevelConstant", "customErrorDefinition", "usingForDeclaration", 
                   "structDefinition", "modifierDefinition", "modifierInvocation", 
                   "functionDefinition", "functionDescriptor", "returnParameters", 
                   "modifierList", "eventDefinition", "enumValue", "enumDefinition", 
                   "parameterList", "parameter", "eventParameterList", "eventParameter", 
                   "functionTypeParameterList", "functionTypeParameter", 
                   "variableDeclaration", "typeName", "userDefinedTypeName", 
                   "mappingKey", "mapping", "functionTypeName", "storageLocation", 
                   "stateMutability", "block", "statement", "expressionStatement", 
                   "ifStatement", "tryStatement", "catchClause", "whileStatement", 
                   "simpleStatement", "uncheckedStatement", "forStatement", 
                   "inlineAssemblyStatement", "doWhileStatement", "continueStatement", 
                   "breakStatement", "returnStatement", "throwStatement", 
                   "emitStatement", "revertStatement", "variableDeclarationStatement", 
                   "variableDeclarationList", "identifierList", "elementaryTypeName", 
                   "expression", "primaryExpression", "expressionList", 
                   "nameValueList", "nameValue", "functionCallArguments", 
                   "functionCall", "assemblyBlock", "assemblyItem", "assemblyExpression", 
                   "assemblyMember", "assemblyCall", "assemblyLocalDefinition", 
                   "assemblyAssignment", "assemblyIdentifierOrList", "assemblyIdentifierList", 
                   "assemblyStackAssignment", "labelDefinition", "assemblySwitch", 
                   "assemblyCase", "assemblyFunctionDefinition", "assemblyFunctionReturns", 
                   "assemblyFor", "assemblyIf", "assemblyLiteral", "subAssembly", 
                   "tupleExpression", "typeNameExpression", "numberLiteral", 
                   "identifier", "hexLiteral", "overrideSpecifier", "stringLiteral", 
                   "eos" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    T__45=46
    T__46=47
    T__47=48
    T__48=49
    T__49=50
    T__50=51
    T__51=52
    T__52=53
    T__53=54
    T__54=55
    T__55=56
    T__56=57
    T__57=58
    T__58=59
    T__59=60
    T__60=61
    T__61=62
    T__62=63
    T__63=64
    T__64=65
    T__65=66
    T__66=67
    T__67=68
    T__68=69
    T__69=70
    T__70=71
    T__71=72
    T__72=73
    T__73=74
    T__74=75
    T__75=76
    T__76=77
    T__77=78
    T__78=79
    T__79=80
    T__80=81
    T__81=82
    T__82=83
    T__83=84
    T__84=85
    T__85=86
    T__86=87
    T__87=88
    T__88=89
    T__89=90
    T__90=91
    T__91=92
    T__92=93
    T__93=94
    T__94=95
    T__95=96
    T__96=97
    Int=98
    Uint=99
    Byte=100
    Fixed=101
    Ufixed=102
    BooleanLiteral=103
    DecimalNumber=104
    HexNumber=105
    NumberUnit=106
    HexLiteralFragment=107
    ReservedKeyword=108
    AnonymousKeyword=109
    BreakKeyword=110
    ConstantKeyword=111
    ImmutableKeyword=112
    ContinueKeyword=113
    LeaveKeyword=114
    ExternalKeyword=115
    IndexedKeyword=116
    InternalKeyword=117
    PayableKeyword=118
    PrivateKeyword=119
    PublicKeyword=120
    VirtualKeyword=121
    PureKeyword=122
    TypeKeyword=123
    ViewKeyword=124
    ConstructorKeyword=125
    FallbackKeyword=126
    ReceiveKeyword=127
    Identifier=128
    StringLiteralFragment=129
    VersionLiteral=130
    NL=131
    WS=132
    COMMENT=133
    LINE_COMMENT=134

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class SourceUnitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(FuzzySolidityParser.EOF, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(FuzzySolidityParser.NL)
            else:
                return self.getToken(FuzzySolidityParser.NL, i)

        def pragmaDirective(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FuzzySolidityParser.PragmaDirectiveContext)
            else:
                return self.getTypedRuleContext(FuzzySolidityParser.PragmaDirectiveContext,i)


        def importDirective(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FuzzySolidityParser.ImportDirectiveContext)
            else:
                return self.getTypedRuleContext(FuzzySolidityParser.ImportDirectiveContext,i)


        def contractDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FuzzySolidityParser.ContractDefinitionContext)
            else:
                return self.getTypedRuleContext(FuzzySolidityParser.ContractDefinitionContext,i)


        def enumDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FuzzySolidityParser.EnumDefinitionContext)
            else:
                return self.getTypedRuleContext(FuzzySolidityParser.EnumDefinitionContext,i)


        def structDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FuzzySolidityParser.StructDefinitionContext)
            else:
                return self.getTypedRuleContext(FuzzySolidityParser.StructDefinitionContext,i)


        def functionDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FuzzySolidityParser.FunctionDefinitionContext)
            else:
                return self.getTypedRuleContext(FuzzySolidityParser.FunctionDefinitionContext,i)


        def fileLevelConstant(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FuzzySolidityParser.FileLevelConstantContext)
            else:
                return self.getTypedRuleContext(FuzzySolidityParser.FileLevelConstantContext,i)


        def customErrorDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FuzzySolidityParser.CustomErrorDefinitionContext)
            else:
                return self.getTypedRuleContext(FuzzySolidityParser.CustomErrorDefinitionContext,i)


        def expressionStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FuzzySolidityParser.ExpressionStatementContext)
            else:
                return self.getTypedRuleContext(FuzzySolidityParser.ExpressionStatementContext,i)


        def stateVariableDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FuzzySolidityParser.StateVariableDeclarationContext)
            else:
                return self.getTypedRuleContext(FuzzySolidityParser.StateVariableDeclarationContext,i)


        def getRuleIndex(self):
            return FuzzySolidityParser.RULE_sourceUnit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSourceUnit" ):
                listener.enterSourceUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSourceUnit" ):
                listener.exitSourceUnit(self)




    def sourceUnit(self):

        localctx = FuzzySolidityParser.SourceUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_sourceUnit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 197
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 194
                self.match(FuzzySolidityParser.NL)
                self.state = 199
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 212
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((_la) & ~0x3f) == 0 and ((1 << _la) & -4629698032535984110) != 0 or (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1710228777239314417) != 0 or _la==128 or _la==129:
                self.state = 210
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
                if la_ == 1:
                    self.state = 200
                    self.pragmaDirective()
                    pass

                elif la_ == 2:
                    self.state = 201
                    self.importDirective()
                    pass

                elif la_ == 3:
                    self.state = 202
                    self.contractDefinition()
                    pass

                elif la_ == 4:
                    self.state = 203
                    self.enumDefinition()
                    pass

                elif la_ == 5:
                    self.state = 204
                    self.structDefinition()
                    pass

                elif la_ == 6:
                    self.state = 205
                    self.functionDefinition()
                    pass

                elif la_ == 7:
                    self.state = 206
                    self.fileLevelConstant()
                    pass

                elif la_ == 8:
                    self.state = 207
                    self.customErrorDefinition()
                    pass

                elif la_ == 9:
                    self.state = 208
                    self.expressionStatement()
                    pass

                elif la_ == 10:
                    self.state = 209
                    self.stateVariableDeclaration()
                    pass


                self.state = 214
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 215
            self.match(FuzzySolidityParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PragmaDirectiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pragmaName(self):
            return self.getTypedRuleContext(FuzzySolidityParser.PragmaNameContext,0)


        def pragmaValue(self):
            return self.getTypedRuleContext(FuzzySolidityParser.PragmaValueContext,0)


        def eos(self):
            return self.getTypedRuleContext(FuzzySolidityParser.EosContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(FuzzySolidityParser.NL)
            else:
                return self.getToken(FuzzySolidityParser.NL, i)

        def getRuleIndex(self):
            return FuzzySolidityParser.RULE_pragmaDirective

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragmaDirective" ):
                listener.enterPragmaDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragmaDirective" ):
                listener.exitPragmaDirective(self)




    def pragmaDirective(self):

        localctx = FuzzySolidityParser.PragmaDirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_pragmaDirective)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 217
            self.match(FuzzySolidityParser.T__0)
            self.state = 221
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 218
                self.match(FuzzySolidityParser.NL)
                self.state = 223
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 224
            self.pragmaName()
            self.state = 225
            self.pragmaValue()
            self.state = 226
            self.eos()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PragmaNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(FuzzySolidityParser.IdentifierContext,0)


        def getRuleIndex(self):
            return FuzzySolidityParser.RULE_pragmaName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragmaName" ):
                listener.enterPragmaName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragmaName" ):
                listener.exitPragmaName(self)




    def pragmaName(self):

        localctx = FuzzySolidityParser.PragmaNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_pragmaName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 228
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PragmaValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def version(self):
            return self.getTypedRuleContext(FuzzySolidityParser.VersionContext,0)


        def expression(self):
            return self.getTypedRuleContext(FuzzySolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return FuzzySolidityParser.RULE_pragmaValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragmaValue" ):
                listener.enterPragmaValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragmaValue" ):
                listener.exitPragmaValue(self)




    def pragmaValue(self):

        localctx = FuzzySolidityParser.PragmaValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_pragmaValue)
        try:
            self.state = 232
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 230
                self.version()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 231
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VersionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def versionConstraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FuzzySolidityParser.VersionConstraintContext)
            else:
                return self.getTypedRuleContext(FuzzySolidityParser.VersionConstraintContext,i)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(FuzzySolidityParser.NL)
            else:
                return self.getToken(FuzzySolidityParser.NL, i)

        def getRuleIndex(self):
            return FuzzySolidityParser.RULE_version

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVersion" ):
                listener.enterVersion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVersion" ):
                listener.exitVersion(self)




    def version(self):

        localctx = FuzzySolidityParser.VersionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_version)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 234
            self.versionConstraint()
            self.state = 247
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((_la) & ~0x3f) == 0 and ((1 << _la) & 1020) != 0 or _la==104 or _la==130:
                self.state = 242
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==2:
                    self.state = 235
                    self.match(FuzzySolidityParser.T__1)
                    self.state = 239
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==131:
                        self.state = 236
                        self.match(FuzzySolidityParser.NL)
                        self.state = 241
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 244
                self.versionConstraint()
                self.state = 249
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VersionOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(FuzzySolidityParser.NL)
            else:
                return self.getToken(FuzzySolidityParser.NL, i)

        def getRuleIndex(self):
            return FuzzySolidityParser.RULE_versionOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVersionOperator" ):
                listener.enterVersionOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVersionOperator" ):
                listener.exitVersionOperator(self)




    def versionOperator(self):

        localctx = FuzzySolidityParser.VersionOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_versionOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 250
            _la = self._input.LA(1)
            if not(((_la) & ~0x3f) == 0 and ((1 << _la) & 1016) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 254
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 251
                self.match(FuzzySolidityParser.NL)
                self.state = 256
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VersionConstraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VersionLiteral(self):
            return self.getToken(FuzzySolidityParser.VersionLiteral, 0)

        def versionOperator(self):
            return self.getTypedRuleContext(FuzzySolidityParser.VersionOperatorContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(FuzzySolidityParser.NL)
            else:
                return self.getToken(FuzzySolidityParser.NL, i)

        def DecimalNumber(self):
            return self.getToken(FuzzySolidityParser.DecimalNumber, 0)

        def getRuleIndex(self):
            return FuzzySolidityParser.RULE_versionConstraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVersionConstraint" ):
                listener.enterVersionConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVersionConstraint" ):
                listener.exitVersionConstraint(self)




    def versionConstraint(self):

        localctx = FuzzySolidityParser.VersionConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_versionConstraint)
        self._la = 0 # Token type
        try:
            self.state = 277
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 258
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((_la) & ~0x3f) == 0 and ((1 << _la) & 1016) != 0:
                    self.state = 257
                    self.versionOperator()


                self.state = 260
                self.match(FuzzySolidityParser.VersionLiteral)
                self.state = 264
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,10,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 261
                        self.match(FuzzySolidityParser.NL) 
                    self.state = 266
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,10,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 268
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((_la) & ~0x3f) == 0 and ((1 << _la) & 1016) != 0:
                    self.state = 267
                    self.versionOperator()


                self.state = 270
                self.match(FuzzySolidityParser.DecimalNumber)
                self.state = 274
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,12,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 271
                        self.match(FuzzySolidityParser.NL) 
                    self.state = 276
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,12,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FuzzySolidityParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(FuzzySolidityParser.IdentifierContext,i)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(FuzzySolidityParser.NL)
            else:
                return self.getToken(FuzzySolidityParser.NL, i)

        def getRuleIndex(self):
            return FuzzySolidityParser.RULE_importDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportDeclaration" ):
                listener.enterImportDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportDeclaration" ):
                listener.exitImportDeclaration(self)




    def importDeclaration(self):

        localctx = FuzzySolidityParser.ImportDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_importDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 279
            self.identifier()
            self.state = 288
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 280
                self.match(FuzzySolidityParser.T__9)
                self.state = 284
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 281
                    self.match(FuzzySolidityParser.NL)
                    self.state = 286
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 287
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportDirectiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def importPath(self):
            return self.getTypedRuleContext(FuzzySolidityParser.ImportPathContext,0)


        def eos(self):
            return self.getTypedRuleContext(FuzzySolidityParser.EosContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(FuzzySolidityParser.NL)
            else:
                return self.getToken(FuzzySolidityParser.NL, i)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FuzzySolidityParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(FuzzySolidityParser.IdentifierContext,i)


        def importDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FuzzySolidityParser.ImportDeclarationContext)
            else:
                return self.getTypedRuleContext(FuzzySolidityParser.ImportDeclarationContext,i)


        def getRuleIndex(self):
            return FuzzySolidityParser.RULE_importDirective

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportDirective" ):
                listener.enterImportDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportDirective" ):
                listener.exitImportDirective(self)




    def importDirective(self):

        localctx = FuzzySolidityParser.ImportDirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_importDirective)
        self._la = 0 # Token type
        try:
            self.state = 392
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 290
                self.match(FuzzySolidityParser.T__10)
                self.state = 294
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 291
                    self.match(FuzzySolidityParser.NL)
                    self.state = 296
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 297
                self.importPath()
                self.state = 306
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==10:
                    self.state = 298
                    self.match(FuzzySolidityParser.T__9)
                    self.state = 302
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==131:
                        self.state = 299
                        self.match(FuzzySolidityParser.NL)
                        self.state = 304
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 305
                    self.identifier()


                self.state = 308
                self.eos()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 310
                self.match(FuzzySolidityParser.T__10)
                self.state = 314
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 311
                    self.match(FuzzySolidityParser.NL)
                    self.state = 316
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 325
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [12]:
                    self.state = 317
                    self.match(FuzzySolidityParser.T__11)
                    self.state = 321
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==131:
                        self.state = 318
                        self.match(FuzzySolidityParser.NL)
                        self.state = 323
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [13, 24, 41, 54, 96, 114, 118, 125, 127, 128]:
                    self.state = 324
                    self.identifier()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 335
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==10:
                    self.state = 327
                    self.match(FuzzySolidityParser.T__9)
                    self.state = 331
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==131:
                        self.state = 328
                        self.match(FuzzySolidityParser.NL)
                        self.state = 333
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 334
                    self.identifier()


                self.state = 337
                self.match(FuzzySolidityParser.T__12)
                self.state = 341
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 338
                    self.match(FuzzySolidityParser.NL)
                    self.state = 343
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 344
                self.importPath()
                self.state = 345
                self.eos()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 347
                self.match(FuzzySolidityParser.T__10)
                self.state = 351
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 348
                    self.match(FuzzySolidityParser.NL)
                    self.state = 353
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 354
                self.match(FuzzySolidityParser.T__13)
                self.state = 358
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 355
                    self.match(FuzzySolidityParser.NL)
                    self.state = 360
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 361
                self.importDeclaration()
                self.state = 372
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==15:
                    self.state = 362
                    self.match(FuzzySolidityParser.T__14)
                    self.state = 366
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==131:
                        self.state = 363
                        self.match(FuzzySolidityParser.NL)
                        self.state = 368
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 369
                    self.importDeclaration()
                    self.state = 374
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 375
                self.match(FuzzySolidityParser.T__15)
                self.state = 379
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 376
                    self.match(FuzzySolidityParser.NL)
                    self.state = 381
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 382
                self.match(FuzzySolidityParser.T__12)
                self.state = 386
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 383
                    self.match(FuzzySolidityParser.NL)
                    self.state = 388
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 389
                self.importPath()
                self.state = 390
                self.eos()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLiteralFragment(self):
            return self.getToken(FuzzySolidityParser.StringLiteralFragment, 0)

        def getRuleIndex(self):
            return FuzzySolidityParser.RULE_importPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportPath" ):
                listener.enterImportPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportPath" ):
                listener.exitImportPath(self)




    def importPath(self):

        localctx = FuzzySolidityParser.ImportPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_importPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 394
            self.match(FuzzySolidityParser.StringLiteralFragment)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContractDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(FuzzySolidityParser.IdentifierContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(FuzzySolidityParser.NL)
            else:
                return self.getToken(FuzzySolidityParser.NL, i)

        def inheritanceSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FuzzySolidityParser.InheritanceSpecifierContext)
            else:
                return self.getTypedRuleContext(FuzzySolidityParser.InheritanceSpecifierContext,i)


        def contractPart(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FuzzySolidityParser.ContractPartContext)
            else:
                return self.getTypedRuleContext(FuzzySolidityParser.ContractPartContext,i)


        def getRuleIndex(self):
            return FuzzySolidityParser.RULE_contractDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContractDefinition" ):
                listener.enterContractDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContractDefinition" ):
                listener.exitContractDefinition(self)




    def contractDefinition(self):

        localctx = FuzzySolidityParser.ContractDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_contractDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 403
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17:
                self.state = 396
                self.match(FuzzySolidityParser.T__16)
                self.state = 400
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 397
                    self.match(FuzzySolidityParser.NL)
                    self.state = 402
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 405
            _la = self._input.LA(1)
            if not(((_la) & ~0x3f) == 0 and ((1 << _la) & 1835008) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 409
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 406
                self.match(FuzzySolidityParser.NL)
                self.state = 411
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 412
            self.identifier()
            self.state = 434
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==21:
                self.state = 413
                self.match(FuzzySolidityParser.T__20)
                self.state = 417
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 414
                    self.match(FuzzySolidityParser.NL)
                    self.state = 419
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 420
                self.inheritanceSpecifier()
                self.state = 431
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==15:
                    self.state = 421
                    self.match(FuzzySolidityParser.T__14)
                    self.state = 425
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==131:
                        self.state = 422
                        self.match(FuzzySolidityParser.NL)
                        self.state = 427
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 428
                    self.inheritanceSpecifier()
                    self.state = 433
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 436
            self.match(FuzzySolidityParser.T__13)
            self.state = 440
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 437
                self.match(FuzzySolidityParser.NL)
                self.state = 442
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 446
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((_la) & ~0x3f) == 0 and ((1 << _la) & 558448732048203776) != 0 or (((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & 8057520253) != 0:
                self.state = 443
                self.contractPart()
                self.state = 448
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 449
            self.match(FuzzySolidityParser.T__15)
            self.state = 453
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 450
                self.match(FuzzySolidityParser.NL)
                self.state = 455
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InheritanceSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def userDefinedTypeName(self):
            return self.getTypedRuleContext(FuzzySolidityParser.UserDefinedTypeNameContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(FuzzySolidityParser.NL)
            else:
                return self.getToken(FuzzySolidityParser.NL, i)

        def expressionList(self):
            return self.getTypedRuleContext(FuzzySolidityParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return FuzzySolidityParser.RULE_inheritanceSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInheritanceSpecifier" ):
                listener.enterInheritanceSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInheritanceSpecifier" ):
                listener.exitInheritanceSpecifier(self)




    def inheritanceSpecifier(self):

        localctx = FuzzySolidityParser.InheritanceSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_inheritanceSpecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 456
            self.userDefinedTypeName()
            self.state = 474
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==22:
                self.state = 457
                self.match(FuzzySolidityParser.T__21)
                self.state = 461
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 458
                    self.match(FuzzySolidityParser.NL)
                    self.state = 463
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 465
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la - 4)) & ~0x3f) == 0 and ((1 << (_la - 4)) & -289356135933935103) != 0 or (((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & 15707933693) != 0:
                    self.state = 464
                    self.expressionList()


                self.state = 467
                self.match(FuzzySolidityParser.T__22)
                self.state = 471
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 468
                    self.match(FuzzySolidityParser.NL)
                    self.state = 473
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContractPartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stateVariableDeclaration(self):
            return self.getTypedRuleContext(FuzzySolidityParser.StateVariableDeclarationContext,0)


        def usingForDeclaration(self):
            return self.getTypedRuleContext(FuzzySolidityParser.UsingForDeclarationContext,0)


        def structDefinition(self):
            return self.getTypedRuleContext(FuzzySolidityParser.StructDefinitionContext,0)


        def modifierDefinition(self):
            return self.getTypedRuleContext(FuzzySolidityParser.ModifierDefinitionContext,0)


        def functionDefinition(self):
            return self.getTypedRuleContext(FuzzySolidityParser.FunctionDefinitionContext,0)


        def eventDefinition(self):
            return self.getTypedRuleContext(FuzzySolidityParser.EventDefinitionContext,0)


        def enumDefinition(self):
            return self.getTypedRuleContext(FuzzySolidityParser.EnumDefinitionContext,0)


        def customErrorDefinition(self):
            return self.getTypedRuleContext(FuzzySolidityParser.CustomErrorDefinitionContext,0)


        def getRuleIndex(self):
            return FuzzySolidityParser.RULE_contractPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContractPart" ):
                listener.enterContractPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContractPart" ):
                listener.exitContractPart(self)




    def contractPart(self):

        localctx = FuzzySolidityParser.ContractPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_contractPart)
        try:
            self.state = 484
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 476
                self.stateVariableDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 477
                self.usingForDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 478
                self.structDefinition()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 479
                self.modifierDefinition()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 480
                self.functionDefinition()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 481
                self.eventDefinition()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 482
                self.enumDefinition()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 483
                self.customErrorDefinition()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StateVariableDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(FuzzySolidityParser.TypeNameContext,0)


        def identifier(self):
            return self.getTypedRuleContext(FuzzySolidityParser.IdentifierContext,0)


        def eos(self):
            return self.getTypedRuleContext(FuzzySolidityParser.EosContext,0)


        def PublicKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(FuzzySolidityParser.PublicKeyword)
            else:
                return self.getToken(FuzzySolidityParser.PublicKeyword, i)

        def InternalKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(FuzzySolidityParser.InternalKeyword)
            else:
                return self.getToken(FuzzySolidityParser.InternalKeyword, i)

        def PrivateKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(FuzzySolidityParser.PrivateKeyword)
            else:
                return self.getToken(FuzzySolidityParser.PrivateKeyword, i)

        def ConstantKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(FuzzySolidityParser.ConstantKeyword)
            else:
                return self.getToken(FuzzySolidityParser.ConstantKeyword, i)

        def ImmutableKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(FuzzySolidityParser.ImmutableKeyword)
            else:
                return self.getToken(FuzzySolidityParser.ImmutableKeyword, i)

        def overrideSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FuzzySolidityParser.OverrideSpecifierContext)
            else:
                return self.getTypedRuleContext(FuzzySolidityParser.OverrideSpecifierContext,i)


        def expression(self):
            return self.getTypedRuleContext(FuzzySolidityParser.ExpressionContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(FuzzySolidityParser.NL)
            else:
                return self.getToken(FuzzySolidityParser.NL, i)

        def getRuleIndex(self):
            return FuzzySolidityParser.RULE_stateVariableDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStateVariableDeclaration" ):
                listener.enterStateVariableDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStateVariableDeclaration" ):
                listener.exitStateVariableDeclaration(self)




    def stateVariableDeclaration(self):

        localctx = FuzzySolidityParser.StateVariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_stateVariableDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 486
            self.typeName(0)
            self.state = 525
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & 13680641) != 0:
                self.state = 523
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [120]:
                    self.state = 487
                    self.match(FuzzySolidityParser.PublicKeyword)
                    self.state = 491
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==131:
                        self.state = 488
                        self.match(FuzzySolidityParser.NL)
                        self.state = 493
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [117]:
                    self.state = 494
                    self.match(FuzzySolidityParser.InternalKeyword)
                    self.state = 498
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==131:
                        self.state = 495
                        self.match(FuzzySolidityParser.NL)
                        self.state = 500
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [119]:
                    self.state = 501
                    self.match(FuzzySolidityParser.PrivateKeyword)
                    self.state = 505
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==131:
                        self.state = 502
                        self.match(FuzzySolidityParser.NL)
                        self.state = 507
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [111]:
                    self.state = 508
                    self.match(FuzzySolidityParser.ConstantKeyword)
                    self.state = 512
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==131:
                        self.state = 509
                        self.match(FuzzySolidityParser.NL)
                        self.state = 514
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [112]:
                    self.state = 515
                    self.match(FuzzySolidityParser.ImmutableKeyword)
                    self.state = 519
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==131:
                        self.state = 516
                        self.match(FuzzySolidityParser.NL)
                        self.state = 521
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [97]:
                    self.state = 522
                    self.overrideSpecifier()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 527
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 528
            self.identifier()
            self.state = 537
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9:
                self.state = 529
                self.match(FuzzySolidityParser.T__8)
                self.state = 533
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 530
                    self.match(FuzzySolidityParser.NL)
                    self.state = 535
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 536
                self.expression(0)


            self.state = 539
            self.eos()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FileLevelConstantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(FuzzySolidityParser.TypeNameContext,0)


        def ConstantKeyword(self):
            return self.getToken(FuzzySolidityParser.ConstantKeyword, 0)

        def identifier(self):
            return self.getTypedRuleContext(FuzzySolidityParser.IdentifierContext,0)


        def expression(self):
            return self.getTypedRuleContext(FuzzySolidityParser.ExpressionContext,0)


        def eos(self):
            return self.getTypedRuleContext(FuzzySolidityParser.EosContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(FuzzySolidityParser.NL)
            else:
                return self.getToken(FuzzySolidityParser.NL, i)

        def getRuleIndex(self):
            return FuzzySolidityParser.RULE_fileLevelConstant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFileLevelConstant" ):
                listener.enterFileLevelConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFileLevelConstant" ):
                listener.exitFileLevelConstant(self)




    def fileLevelConstant(self):

        localctx = FuzzySolidityParser.FileLevelConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_fileLevelConstant)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 541
            self.typeName(0)
            self.state = 542
            self.match(FuzzySolidityParser.ConstantKeyword)
            self.state = 546
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 543
                self.match(FuzzySolidityParser.NL)
                self.state = 548
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 549
            self.identifier()
            self.state = 550
            self.match(FuzzySolidityParser.T__8)
            self.state = 554
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 551
                self.match(FuzzySolidityParser.NL)
                self.state = 556
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 557
            self.expression(0)
            self.state = 558
            self.eos()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CustomErrorDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(FuzzySolidityParser.IdentifierContext,0)


        def parameterList(self):
            return self.getTypedRuleContext(FuzzySolidityParser.ParameterListContext,0)


        def eos(self):
            return self.getTypedRuleContext(FuzzySolidityParser.EosContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(FuzzySolidityParser.NL)
            else:
                return self.getToken(FuzzySolidityParser.NL, i)

        def getRuleIndex(self):
            return FuzzySolidityParser.RULE_customErrorDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCustomErrorDefinition" ):
                listener.enterCustomErrorDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCustomErrorDefinition" ):
                listener.exitCustomErrorDefinition(self)




    def customErrorDefinition(self):

        localctx = FuzzySolidityParser.CustomErrorDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_customErrorDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 560
            self.match(FuzzySolidityParser.T__23)
            self.state = 564
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 561
                self.match(FuzzySolidityParser.NL)
                self.state = 566
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 567
            self.identifier()
            self.state = 568
            self.parameterList()
            self.state = 569
            self.eos()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UsingForDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(FuzzySolidityParser.IdentifierContext,0)


        def eos(self):
            return self.getTypedRuleContext(FuzzySolidityParser.EosContext,0)


        def typeName(self):
            return self.getTypedRuleContext(FuzzySolidityParser.TypeNameContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(FuzzySolidityParser.NL)
            else:
                return self.getToken(FuzzySolidityParser.NL, i)

        def getRuleIndex(self):
            return FuzzySolidityParser.RULE_usingForDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsingForDeclaration" ):
                listener.enterUsingForDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsingForDeclaration" ):
                listener.exitUsingForDeclaration(self)




    def usingForDeclaration(self):

        localctx = FuzzySolidityParser.UsingForDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_usingForDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 571
            self.match(FuzzySolidityParser.T__24)
            self.state = 575
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 572
                self.match(FuzzySolidityParser.NL)
                self.state = 577
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 578
            self.identifier()
            self.state = 579
            self.match(FuzzySolidityParser.T__25)
            self.state = 583
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 580
                self.match(FuzzySolidityParser.NL)
                self.state = 585
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 594
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [12]:
                self.state = 586
                self.match(FuzzySolidityParser.T__11)
                self.state = 590
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,61,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 587
                        self.match(FuzzySolidityParser.NL) 
                    self.state = 592
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,61,self._ctx)

                pass
            elif token in [13, 24, 29, 35, 37, 41, 54, 55, 56, 57, 58, 96, 98, 99, 100, 101, 102, 114, 118, 125, 127, 128]:
                self.state = 593
                self.typeName(0)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 596
            self.eos()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(FuzzySolidityParser.IdentifierContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(FuzzySolidityParser.NL)
            else:
                return self.getToken(FuzzySolidityParser.NL, i)

        def variableDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FuzzySolidityParser.VariableDeclarationContext)
            else:
                return self.getTypedRuleContext(FuzzySolidityParser.VariableDeclarationContext,i)


        def eos(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FuzzySolidityParser.EosContext)
            else:
                return self.getTypedRuleContext(FuzzySolidityParser.EosContext,i)


        def getRuleIndex(self):
            return FuzzySolidityParser.RULE_structDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDefinition" ):
                listener.enterStructDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDefinition" ):
                listener.exitStructDefinition(self)




    def structDefinition(self):

        localctx = FuzzySolidityParser.StructDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_structDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 598
            self.match(FuzzySolidityParser.T__26)
            self.state = 602
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 599
                self.match(FuzzySolidityParser.NL)
                self.state = 604
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 605
            self.identifier()
            self.state = 606
            self.match(FuzzySolidityParser.T__13)
            self.state = 610
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 607
                self.match(FuzzySolidityParser.NL)
                self.state = 612
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 623
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 558448725169545216) != 0 or (((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & 6983778429) != 0:
                self.state = 613
                self.variableDeclaration()
                self.state = 614
                self.eos()
                self.state = 620
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((_la) & ~0x3f) == 0 and ((1 << _la) & 558448725169545216) != 0 or (((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & 6983778429) != 0:
                    self.state = 615
                    self.variableDeclaration()
                    self.state = 616
                    self.eos()
                    self.state = 622
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 625
            self.match(FuzzySolidityParser.T__15)
            self.state = 629
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 626
                self.match(FuzzySolidityParser.NL)
                self.state = 631
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModifierDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(FuzzySolidityParser.IdentifierContext,0)


        def eos(self):
            return self.getTypedRuleContext(FuzzySolidityParser.EosContext,0)


        def block(self):
            return self.getTypedRuleContext(FuzzySolidityParser.BlockContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(FuzzySolidityParser.NL)
            else:
                return self.getToken(FuzzySolidityParser.NL, i)

        def parameterList(self):
            return self.getTypedRuleContext(FuzzySolidityParser.ParameterListContext,0)


        def VirtualKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(FuzzySolidityParser.VirtualKeyword)
            else:
                return self.getToken(FuzzySolidityParser.VirtualKeyword, i)

        def overrideSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FuzzySolidityParser.OverrideSpecifierContext)
            else:
                return self.getTypedRuleContext(FuzzySolidityParser.OverrideSpecifierContext,i)


        def getRuleIndex(self):
            return FuzzySolidityParser.RULE_modifierDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifierDefinition" ):
                listener.enterModifierDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifierDefinition" ):
                listener.exitModifierDefinition(self)




    def modifierDefinition(self):

        localctx = FuzzySolidityParser.ModifierDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_modifierDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 632
            self.match(FuzzySolidityParser.T__27)
            self.state = 636
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 633
                self.match(FuzzySolidityParser.NL)
                self.state = 638
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 639
            self.identifier()
            self.state = 641
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==22:
                self.state = 640
                self.parameterList()


            self.state = 653
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==97 or _la==121:
                self.state = 651
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [121]:
                    self.state = 643
                    self.match(FuzzySolidityParser.VirtualKeyword)
                    self.state = 647
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,70,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 644
                            self.match(FuzzySolidityParser.NL) 
                        self.state = 649
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,70,self._ctx)

                    pass
                elif token in [97]:
                    self.state = 650
                    self.overrideSpecifier()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 655
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 658
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [48, 131]:
                self.state = 656
                self.eos()
                pass
            elif token in [14]:
                self.state = 657
                self.block()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModifierInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(FuzzySolidityParser.IdentifierContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(FuzzySolidityParser.NL)
            else:
                return self.getToken(FuzzySolidityParser.NL, i)

        def expressionList(self):
            return self.getTypedRuleContext(FuzzySolidityParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return FuzzySolidityParser.RULE_modifierInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifierInvocation" ):
                listener.enterModifierInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifierInvocation" ):
                listener.exitModifierInvocation(self)




    def modifierInvocation(self):

        localctx = FuzzySolidityParser.ModifierInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_modifierInvocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 660
            self.identifier()
            self.state = 678
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==22:
                self.state = 661
                self.match(FuzzySolidityParser.T__21)
                self.state = 665
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 662
                    self.match(FuzzySolidityParser.NL)
                    self.state = 667
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 669
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la - 4)) & ~0x3f) == 0 and ((1 << (_la - 4)) & -289356135933935103) != 0 or (((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & 15707933693) != 0:
                    self.state = 668
                    self.expressionList()


                self.state = 671
                self.match(FuzzySolidityParser.T__22)
                self.state = 675
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,76,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 672
                        self.match(FuzzySolidityParser.NL) 
                    self.state = 677
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,76,self._ctx)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionDescriptor(self):
            return self.getTypedRuleContext(FuzzySolidityParser.FunctionDescriptorContext,0)


        def parameterList(self):
            return self.getTypedRuleContext(FuzzySolidityParser.ParameterListContext,0)


        def modifierList(self):
            return self.getTypedRuleContext(FuzzySolidityParser.ModifierListContext,0)


        def eos(self):
            return self.getTypedRuleContext(FuzzySolidityParser.EosContext,0)


        def block(self):
            return self.getTypedRuleContext(FuzzySolidityParser.BlockContext,0)


        def returnParameters(self):
            return self.getTypedRuleContext(FuzzySolidityParser.ReturnParametersContext,0)


        def getRuleIndex(self):
            return FuzzySolidityParser.RULE_functionDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionDefinition" ):
                listener.enterFunctionDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionDefinition" ):
                listener.exitFunctionDefinition(self)




    def functionDefinition(self):

        localctx = FuzzySolidityParser.FunctionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_functionDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 680
            self.functionDescriptor()
            self.state = 681
            self.parameterList()
            self.state = 682
            self.modifierList()
            self.state = 684
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==30:
                self.state = 683
                self.returnParameters()


            self.state = 688
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [48, 131]:
                self.state = 686
                self.eos()
                pass
            elif token in [14]:
                self.state = 687
                self.block()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionDescriptorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(FuzzySolidityParser.NL)
            else:
                return self.getToken(FuzzySolidityParser.NL, i)

        def identifier(self):
            return self.getTypedRuleContext(FuzzySolidityParser.IdentifierContext,0)


        def ConstructorKeyword(self):
            return self.getToken(FuzzySolidityParser.ConstructorKeyword, 0)

        def FallbackKeyword(self):
            return self.getToken(FuzzySolidityParser.FallbackKeyword, 0)

        def ReceiveKeyword(self):
            return self.getToken(FuzzySolidityParser.ReceiveKeyword, 0)

        def getRuleIndex(self):
            return FuzzySolidityParser.RULE_functionDescriptor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionDescriptor" ):
                listener.enterFunctionDescriptor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionDescriptor" ):
                listener.exitFunctionDescriptor(self)




    def functionDescriptor(self):

        localctx = FuzzySolidityParser.FunctionDescriptorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_functionDescriptor)
        self._la = 0 # Token type
        try:
            self.state = 721
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [29]:
                self.enterOuterAlt(localctx, 1)
                self.state = 690
                self.match(FuzzySolidityParser.T__28)
                self.state = 694
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 691
                    self.match(FuzzySolidityParser.NL)
                    self.state = 696
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 698
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((_la) & ~0x3f) == 0 and ((1 << _la) & 18016597549522944) != 0 or (((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & 6983778305) != 0:
                    self.state = 697
                    self.identifier()


                pass
            elif token in [125]:
                self.enterOuterAlt(localctx, 2)
                self.state = 700
                self.match(FuzzySolidityParser.ConstructorKeyword)
                self.state = 704
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 701
                    self.match(FuzzySolidityParser.NL)
                    self.state = 706
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [126]:
                self.enterOuterAlt(localctx, 3)
                self.state = 707
                self.match(FuzzySolidityParser.FallbackKeyword)
                self.state = 711
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 708
                    self.match(FuzzySolidityParser.NL)
                    self.state = 713
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [127]:
                self.enterOuterAlt(localctx, 4)
                self.state = 714
                self.match(FuzzySolidityParser.ReceiveKeyword)
                self.state = 718
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 715
                    self.match(FuzzySolidityParser.NL)
                    self.state = 720
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterList(self):
            return self.getTypedRuleContext(FuzzySolidityParser.ParameterListContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(FuzzySolidityParser.NL)
            else:
                return self.getToken(FuzzySolidityParser.NL, i)

        def getRuleIndex(self):
            return FuzzySolidityParser.RULE_returnParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnParameters" ):
                listener.enterReturnParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnParameters" ):
                listener.exitReturnParameters(self)




    def returnParameters(self):

        localctx = FuzzySolidityParser.ReturnParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_returnParameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 723
            self.match(FuzzySolidityParser.T__29)
            self.state = 727
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 724
                self.match(FuzzySolidityParser.NL)
                self.state = 729
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 730
            self.parameterList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ExternalKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(FuzzySolidityParser.ExternalKeyword)
            else:
                return self.getToken(FuzzySolidityParser.ExternalKeyword, i)

        def PublicKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(FuzzySolidityParser.PublicKeyword)
            else:
                return self.getToken(FuzzySolidityParser.PublicKeyword, i)

        def InternalKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(FuzzySolidityParser.InternalKeyword)
            else:
                return self.getToken(FuzzySolidityParser.InternalKeyword, i)

        def PrivateKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(FuzzySolidityParser.PrivateKeyword)
            else:
                return self.getToken(FuzzySolidityParser.PrivateKeyword, i)

        def VirtualKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(FuzzySolidityParser.VirtualKeyword)
            else:
                return self.getToken(FuzzySolidityParser.VirtualKeyword, i)

        def stateMutability(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FuzzySolidityParser.StateMutabilityContext)
            else:
                return self.getTypedRuleContext(FuzzySolidityParser.StateMutabilityContext,i)


        def modifierInvocation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FuzzySolidityParser.ModifierInvocationContext)
            else:
                return self.getTypedRuleContext(FuzzySolidityParser.ModifierInvocationContext,i)


        def overrideSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FuzzySolidityParser.OverrideSpecifierContext)
            else:
                return self.getTypedRuleContext(FuzzySolidityParser.OverrideSpecifierContext,i)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(FuzzySolidityParser.NL)
            else:
                return self.getToken(FuzzySolidityParser.NL, i)

        def getRuleIndex(self):
            return FuzzySolidityParser.RULE_modifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifierList" ):
                listener.enterModifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifierList" ):
                listener.exitModifierList(self)




    def modifierList(self):

        localctx = FuzzySolidityParser.ModifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_modifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 772
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((_la) & ~0x3f) == 0 and ((1 << _la) & 18016597549522944) != 0 or (((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & 7380697091) != 0:
                self.state = 770
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
                if la_ == 1:
                    self.state = 732
                    self.match(FuzzySolidityParser.ExternalKeyword)
                    self.state = 736
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,87,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 733
                            self.match(FuzzySolidityParser.NL) 
                        self.state = 738
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,87,self._ctx)

                    pass

                elif la_ == 2:
                    self.state = 739
                    self.match(FuzzySolidityParser.PublicKeyword)
                    self.state = 743
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,88,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 740
                            self.match(FuzzySolidityParser.NL) 
                        self.state = 745
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,88,self._ctx)

                    pass

                elif la_ == 3:
                    self.state = 746
                    self.match(FuzzySolidityParser.InternalKeyword)
                    self.state = 750
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,89,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 747
                            self.match(FuzzySolidityParser.NL) 
                        self.state = 752
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,89,self._ctx)

                    pass

                elif la_ == 4:
                    self.state = 753
                    self.match(FuzzySolidityParser.PrivateKeyword)
                    self.state = 757
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,90,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 754
                            self.match(FuzzySolidityParser.NL) 
                        self.state = 759
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,90,self._ctx)

                    pass

                elif la_ == 5:
                    self.state = 760
                    self.match(FuzzySolidityParser.VirtualKeyword)
                    self.state = 764
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,91,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 761
                            self.match(FuzzySolidityParser.NL) 
                        self.state = 766
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,91,self._ctx)

                    pass

                elif la_ == 6:
                    self.state = 767
                    self.stateMutability()
                    pass

                elif la_ == 7:
                    self.state = 768
                    self.modifierInvocation()
                    pass

                elif la_ == 8:
                    self.state = 769
                    self.overrideSpecifier()
                    pass


                self.state = 774
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EventDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(FuzzySolidityParser.IdentifierContext,0)


        def eventParameterList(self):
            return self.getTypedRuleContext(FuzzySolidityParser.EventParameterListContext,0)


        def eos(self):
            return self.getTypedRuleContext(FuzzySolidityParser.EosContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(FuzzySolidityParser.NL)
            else:
                return self.getToken(FuzzySolidityParser.NL, i)

        def AnonymousKeyword(self):
            return self.getToken(FuzzySolidityParser.AnonymousKeyword, 0)

        def getRuleIndex(self):
            return FuzzySolidityParser.RULE_eventDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEventDefinition" ):
                listener.enterEventDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEventDefinition" ):
                listener.exitEventDefinition(self)




    def eventDefinition(self):

        localctx = FuzzySolidityParser.EventDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_eventDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 775
            self.match(FuzzySolidityParser.T__30)
            self.state = 779
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 776
                self.match(FuzzySolidityParser.NL)
                self.state = 781
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 782
            self.identifier()
            self.state = 783
            self.eventParameterList()
            self.state = 791
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==109:
                self.state = 784
                self.match(FuzzySolidityParser.AnonymousKeyword)
                self.state = 788
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,95,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 785
                        self.match(FuzzySolidityParser.NL) 
                    self.state = 790
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,95,self._ctx)



            self.state = 793
            self.eos()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(FuzzySolidityParser.IdentifierContext,0)


        def getRuleIndex(self):
            return FuzzySolidityParser.RULE_enumValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumValue" ):
                listener.enterEnumValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumValue" ):
                listener.exitEnumValue(self)




    def enumValue(self):

        localctx = FuzzySolidityParser.EnumValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_enumValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 795
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(FuzzySolidityParser.IdentifierContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(FuzzySolidityParser.NL)
            else:
                return self.getToken(FuzzySolidityParser.NL, i)

        def enumValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FuzzySolidityParser.EnumValueContext)
            else:
                return self.getTypedRuleContext(FuzzySolidityParser.EnumValueContext,i)


        def getRuleIndex(self):
            return FuzzySolidityParser.RULE_enumDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumDefinition" ):
                listener.enterEnumDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumDefinition" ):
                listener.exitEnumDefinition(self)




    def enumDefinition(self):

        localctx = FuzzySolidityParser.EnumDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_enumDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 797
            self.match(FuzzySolidityParser.T__31)
            self.state = 801
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 798
                self.match(FuzzySolidityParser.NL)
                self.state = 803
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 804
            self.identifier()
            self.state = 805
            self.match(FuzzySolidityParser.T__13)
            self.state = 809
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 806
                self.match(FuzzySolidityParser.NL)
                self.state = 811
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 813
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 18016597549522944) != 0 or (((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & 6983778305) != 0:
                self.state = 812
                self.enumValue()


            self.state = 825
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==15:
                self.state = 815
                self.match(FuzzySolidityParser.T__14)
                self.state = 819
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 816
                    self.match(FuzzySolidityParser.NL)
                    self.state = 821
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 822
                self.enumValue()
                self.state = 827
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 828
            self.match(FuzzySolidityParser.T__15)
            self.state = 832
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 829
                self.match(FuzzySolidityParser.NL)
                self.state = 834
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(FuzzySolidityParser.NL)
            else:
                return self.getToken(FuzzySolidityParser.NL, i)

        def parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FuzzySolidityParser.ParameterContext)
            else:
                return self.getTypedRuleContext(FuzzySolidityParser.ParameterContext,i)


        def getRuleIndex(self):
            return FuzzySolidityParser.RULE_parameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterList" ):
                listener.enterParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterList" ):
                listener.exitParameterList(self)




    def parameterList(self):

        localctx = FuzzySolidityParser.ParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_parameterList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 835
            self.match(FuzzySolidityParser.T__21)
            self.state = 839
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 836
                self.match(FuzzySolidityParser.NL)
                self.state = 841
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 856
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 558448725169545216) != 0 or (((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & 6983778429) != 0:
                self.state = 842
                self.parameter()
                self.state = 853
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==15:
                    self.state = 843
                    self.match(FuzzySolidityParser.T__14)
                    self.state = 847
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==131:
                        self.state = 844
                        self.match(FuzzySolidityParser.NL)
                        self.state = 849
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 850
                    self.parameter()
                    self.state = 855
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 858
            self.match(FuzzySolidityParser.T__22)
            self.state = 862
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,107,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 859
                    self.match(FuzzySolidityParser.NL) 
                self.state = 864
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,107,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(FuzzySolidityParser.TypeNameContext,0)


        def storageLocation(self):
            return self.getTypedRuleContext(FuzzySolidityParser.StorageLocationContext,0)


        def identifier(self):
            return self.getTypedRuleContext(FuzzySolidityParser.IdentifierContext,0)


        def getRuleIndex(self):
            return FuzzySolidityParser.RULE_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter" ):
                listener.enterParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter" ):
                listener.exitParameter(self)




    def parameter(self):

        localctx = FuzzySolidityParser.ParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_parameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 865
            self.typeName(0)
            self.state = 867
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
            if la_ == 1:
                self.state = 866
                self.storageLocation()


            self.state = 870
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 18016597549522944) != 0 or (((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & 6983778305) != 0:
                self.state = 869
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EventParameterListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(FuzzySolidityParser.NL)
            else:
                return self.getToken(FuzzySolidityParser.NL, i)

        def eventParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FuzzySolidityParser.EventParameterContext)
            else:
                return self.getTypedRuleContext(FuzzySolidityParser.EventParameterContext,i)


        def getRuleIndex(self):
            return FuzzySolidityParser.RULE_eventParameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEventParameterList" ):
                listener.enterEventParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEventParameterList" ):
                listener.exitEventParameterList(self)




    def eventParameterList(self):

        localctx = FuzzySolidityParser.EventParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_eventParameterList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 872
            self.match(FuzzySolidityParser.T__21)
            self.state = 876
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 873
                self.match(FuzzySolidityParser.NL)
                self.state = 878
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 893
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 558448725169545216) != 0 or (((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & 6983778429) != 0:
                self.state = 879
                self.eventParameter()
                self.state = 890
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==15:
                    self.state = 880
                    self.match(FuzzySolidityParser.T__14)
                    self.state = 884
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==131:
                        self.state = 881
                        self.match(FuzzySolidityParser.NL)
                        self.state = 886
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 887
                    self.eventParameter()
                    self.state = 892
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 895
            self.match(FuzzySolidityParser.T__22)
            self.state = 899
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,114,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 896
                    self.match(FuzzySolidityParser.NL) 
                self.state = 901
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,114,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EventParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(FuzzySolidityParser.TypeNameContext,0)


        def IndexedKeyword(self):
            return self.getToken(FuzzySolidityParser.IndexedKeyword, 0)

        def identifier(self):
            return self.getTypedRuleContext(FuzzySolidityParser.IdentifierContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(FuzzySolidityParser.NL)
            else:
                return self.getToken(FuzzySolidityParser.NL, i)

        def getRuleIndex(self):
            return FuzzySolidityParser.RULE_eventParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEventParameter" ):
                listener.enterEventParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEventParameter" ):
                listener.exitEventParameter(self)




    def eventParameter(self):

        localctx = FuzzySolidityParser.EventParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_eventParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 902
            self.typeName(0)
            self.state = 910
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==116:
                self.state = 903
                self.match(FuzzySolidityParser.IndexedKeyword)
                self.state = 907
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 904
                    self.match(FuzzySolidityParser.NL)
                    self.state = 909
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 913
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 18016597549522944) != 0 or (((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & 6983778305) != 0:
                self.state = 912
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionTypeParameterListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(FuzzySolidityParser.NL)
            else:
                return self.getToken(FuzzySolidityParser.NL, i)

        def functionTypeParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FuzzySolidityParser.FunctionTypeParameterContext)
            else:
                return self.getTypedRuleContext(FuzzySolidityParser.FunctionTypeParameterContext,i)


        def getRuleIndex(self):
            return FuzzySolidityParser.RULE_functionTypeParameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionTypeParameterList" ):
                listener.enterFunctionTypeParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionTypeParameterList" ):
                listener.exitFunctionTypeParameterList(self)




    def functionTypeParameterList(self):

        localctx = FuzzySolidityParser.FunctionTypeParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_functionTypeParameterList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 915
            self.match(FuzzySolidityParser.T__21)
            self.state = 919
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 916
                self.match(FuzzySolidityParser.NL)
                self.state = 921
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 936
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 558448725169545216) != 0 or (((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & 6983778429) != 0:
                self.state = 922
                self.functionTypeParameter()
                self.state = 933
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==15:
                    self.state = 923
                    self.match(FuzzySolidityParser.T__14)
                    self.state = 927
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==131:
                        self.state = 924
                        self.match(FuzzySolidityParser.NL)
                        self.state = 929
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 930
                    self.functionTypeParameter()
                    self.state = 935
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 938
            self.match(FuzzySolidityParser.T__22)
            self.state = 942
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,122,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 939
                    self.match(FuzzySolidityParser.NL) 
                self.state = 944
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,122,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionTypeParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(FuzzySolidityParser.TypeNameContext,0)


        def storageLocation(self):
            return self.getTypedRuleContext(FuzzySolidityParser.StorageLocationContext,0)


        def getRuleIndex(self):
            return FuzzySolidityParser.RULE_functionTypeParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionTypeParameter" ):
                listener.enterFunctionTypeParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionTypeParameter" ):
                listener.exitFunctionTypeParameter(self)




    def functionTypeParameter(self):

        localctx = FuzzySolidityParser.FunctionTypeParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_functionTypeParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 945
            self.typeName(0)
            self.state = 947
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 3848290697216) != 0:
                self.state = 946
                self.storageLocation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(FuzzySolidityParser.TypeNameContext,0)


        def identifier(self):
            return self.getTypedRuleContext(FuzzySolidityParser.IdentifierContext,0)


        def storageLocation(self):
            return self.getTypedRuleContext(FuzzySolidityParser.StorageLocationContext,0)


        def getRuleIndex(self):
            return FuzzySolidityParser.RULE_variableDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclaration" ):
                listener.enterVariableDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclaration" ):
                listener.exitVariableDeclaration(self)




    def variableDeclaration(self):

        localctx = FuzzySolidityParser.VariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_variableDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 949
            self.typeName(0)
            self.state = 951
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,124,self._ctx)
            if la_ == 1:
                self.state = 950
                self.storageLocation()


            self.state = 953
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elementaryTypeName(self):
            return self.getTypedRuleContext(FuzzySolidityParser.ElementaryTypeNameContext,0)


        def userDefinedTypeName(self):
            return self.getTypedRuleContext(FuzzySolidityParser.UserDefinedTypeNameContext,0)


        def mapping(self):
            return self.getTypedRuleContext(FuzzySolidityParser.MappingContext,0)


        def functionTypeName(self):
            return self.getTypedRuleContext(FuzzySolidityParser.FunctionTypeNameContext,0)


        def PayableKeyword(self):
            return self.getToken(FuzzySolidityParser.PayableKeyword, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(FuzzySolidityParser.NL)
            else:
                return self.getToken(FuzzySolidityParser.NL, i)

        def typeName(self):
            return self.getTypedRuleContext(FuzzySolidityParser.TypeNameContext,0)


        def expression(self):
            return self.getTypedRuleContext(FuzzySolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return FuzzySolidityParser.RULE_typeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeName" ):
                listener.enterTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeName" ):
                listener.exitTypeName(self)



    def typeName(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = FuzzySolidityParser.TypeNameContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 68
        self.enterRecursionRule(localctx, 68, self.RULE_typeName, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 974
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,127,self._ctx)
            if la_ == 1:
                self.state = 956
                self.elementaryTypeName()
                pass

            elif la_ == 2:
                self.state = 957
                self.userDefinedTypeName()
                pass

            elif la_ == 3:
                self.state = 958
                self.mapping()
                pass

            elif la_ == 4:
                self.state = 959
                self.functionTypeName()
                pass

            elif la_ == 5:
                self.state = 960
                self.match(FuzzySolidityParser.T__34)
                self.state = 964
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 961
                    self.match(FuzzySolidityParser.NL)
                    self.state = 966
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 967
                self.match(FuzzySolidityParser.PayableKeyword)
                self.state = 971
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,126,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 968
                        self.match(FuzzySolidityParser.NL) 
                    self.state = 973
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,126,self._ctx)

                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 996
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,131,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = FuzzySolidityParser.TypeNameContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_typeName)
                    self.state = 976
                    if not self.precpred(self._ctx, 3):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                    self.state = 977
                    self.match(FuzzySolidityParser.T__32)
                    self.state = 981
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==131:
                        self.state = 978
                        self.match(FuzzySolidityParser.NL)
                        self.state = 983
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 985
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la - 4)) & ~0x3f) == 0 and ((1 << (_la - 4)) & -289356135933935103) != 0 or (((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & 15707933693) != 0:
                        self.state = 984
                        self.expression(0)


                    self.state = 987
                    self.match(FuzzySolidityParser.T__33)
                    self.state = 991
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,130,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 988
                            self.match(FuzzySolidityParser.NL) 
                        self.state = 993
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,130,self._ctx)
             
                self.state = 998
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,131,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class UserDefinedTypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FuzzySolidityParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(FuzzySolidityParser.IdentifierContext,i)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(FuzzySolidityParser.NL)
            else:
                return self.getToken(FuzzySolidityParser.NL, i)

        def getRuleIndex(self):
            return FuzzySolidityParser.RULE_userDefinedTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserDefinedTypeName" ):
                listener.enterUserDefinedTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserDefinedTypeName" ):
                listener.exitUserDefinedTypeName(self)




    def userDefinedTypeName(self):

        localctx = FuzzySolidityParser.UserDefinedTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_userDefinedTypeName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 999
            self.identifier()
            self.state = 1010
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,133,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1000
                    self.match(FuzzySolidityParser.T__35)
                    self.state = 1004
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==131:
                        self.state = 1001
                        self.match(FuzzySolidityParser.NL)
                        self.state = 1006
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1007
                    self.identifier() 
                self.state = 1012
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,133,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MappingKeyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elementaryTypeName(self):
            return self.getTypedRuleContext(FuzzySolidityParser.ElementaryTypeNameContext,0)


        def userDefinedTypeName(self):
            return self.getTypedRuleContext(FuzzySolidityParser.UserDefinedTypeNameContext,0)


        def getRuleIndex(self):
            return FuzzySolidityParser.RULE_mappingKey

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMappingKey" ):
                listener.enterMappingKey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMappingKey" ):
                listener.exitMappingKey(self)




    def mappingKey(self):

        localctx = FuzzySolidityParser.MappingKeyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_mappingKey)
        try:
            self.state = 1015
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [35, 55, 56, 57, 58, 98, 99, 100, 101, 102]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1013
                self.elementaryTypeName()
                pass
            elif token in [13, 24, 41, 54, 96, 114, 118, 125, 127, 128]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1014
                self.userDefinedTypeName()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MappingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mappingKey(self):
            return self.getTypedRuleContext(FuzzySolidityParser.MappingKeyContext,0)


        def typeName(self):
            return self.getTypedRuleContext(FuzzySolidityParser.TypeNameContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(FuzzySolidityParser.NL)
            else:
                return self.getToken(FuzzySolidityParser.NL, i)

        def getRuleIndex(self):
            return FuzzySolidityParser.RULE_mapping

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMapping" ):
                listener.enterMapping(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMapping" ):
                listener.exitMapping(self)




    def mapping(self):

        localctx = FuzzySolidityParser.MappingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_mapping)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1017
            self.match(FuzzySolidityParser.T__36)
            self.state = 1021
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 1018
                self.match(FuzzySolidityParser.NL)
                self.state = 1023
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1024
            self.match(FuzzySolidityParser.T__21)
            self.state = 1028
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 1025
                self.match(FuzzySolidityParser.NL)
                self.state = 1030
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1031
            self.mappingKey()
            self.state = 1032
            self.match(FuzzySolidityParser.T__37)
            self.state = 1036
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 1033
                self.match(FuzzySolidityParser.NL)
                self.state = 1038
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1039
            self.typeName(0)
            self.state = 1040
            self.match(FuzzySolidityParser.T__22)
            self.state = 1044
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,138,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1041
                    self.match(FuzzySolidityParser.NL) 
                self.state = 1046
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,138,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionTypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionTypeParameterList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FuzzySolidityParser.FunctionTypeParameterListContext)
            else:
                return self.getTypedRuleContext(FuzzySolidityParser.FunctionTypeParameterListContext,i)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(FuzzySolidityParser.NL)
            else:
                return self.getToken(FuzzySolidityParser.NL, i)

        def InternalKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(FuzzySolidityParser.InternalKeyword)
            else:
                return self.getToken(FuzzySolidityParser.InternalKeyword, i)

        def ExternalKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(FuzzySolidityParser.ExternalKeyword)
            else:
                return self.getToken(FuzzySolidityParser.ExternalKeyword, i)

        def stateMutability(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FuzzySolidityParser.StateMutabilityContext)
            else:
                return self.getTypedRuleContext(FuzzySolidityParser.StateMutabilityContext,i)


        def getRuleIndex(self):
            return FuzzySolidityParser.RULE_functionTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionTypeName" ):
                listener.enterFunctionTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionTypeName" ):
                listener.exitFunctionTypeName(self)




    def functionTypeName(self):

        localctx = FuzzySolidityParser.FunctionTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_functionTypeName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1047
            self.match(FuzzySolidityParser.T__28)
            self.state = 1051
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 1048
                self.match(FuzzySolidityParser.NL)
                self.state = 1053
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1054
            self.functionTypeParameterList()
            self.state = 1072
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,143,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1070
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [117]:
                        self.state = 1055
                        self.match(FuzzySolidityParser.InternalKeyword)
                        self.state = 1059
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,140,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 1056
                                self.match(FuzzySolidityParser.NL) 
                            self.state = 1061
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,140,self._ctx)

                        pass
                    elif token in [115]:
                        self.state = 1062
                        self.match(FuzzySolidityParser.ExternalKeyword)
                        self.state = 1066
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,141,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 1063
                                self.match(FuzzySolidityParser.NL) 
                            self.state = 1068
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,141,self._ctx)

                        pass
                    elif token in [111, 118, 122, 124]:
                        self.state = 1069
                        self.stateMutability()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 1074
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,143,self._ctx)

            self.state = 1083
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,145,self._ctx)
            if la_ == 1:
                self.state = 1075
                self.match(FuzzySolidityParser.T__29)
                self.state = 1079
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 1076
                    self.match(FuzzySolidityParser.NL)
                    self.state = 1081
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1082
                self.functionTypeParameterList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StorageLocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(FuzzySolidityParser.NL)
            else:
                return self.getToken(FuzzySolidityParser.NL, i)

        def getRuleIndex(self):
            return FuzzySolidityParser.RULE_storageLocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStorageLocation" ):
                listener.enterStorageLocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStorageLocation" ):
                listener.exitStorageLocation(self)




    def storageLocation(self):

        localctx = FuzzySolidityParser.StorageLocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_storageLocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1085
            _la = self._input.LA(1)
            if not(((_la) & ~0x3f) == 0 and ((1 << _la) & 3848290697216) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1089
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 1086
                self.match(FuzzySolidityParser.NL)
                self.state = 1091
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StateMutabilityContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PureKeyword(self):
            return self.getToken(FuzzySolidityParser.PureKeyword, 0)

        def ConstantKeyword(self):
            return self.getToken(FuzzySolidityParser.ConstantKeyword, 0)

        def ViewKeyword(self):
            return self.getToken(FuzzySolidityParser.ViewKeyword, 0)

        def PayableKeyword(self):
            return self.getToken(FuzzySolidityParser.PayableKeyword, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(FuzzySolidityParser.NL)
            else:
                return self.getToken(FuzzySolidityParser.NL, i)

        def getRuleIndex(self):
            return FuzzySolidityParser.RULE_stateMutability

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStateMutability" ):
                listener.enterStateMutability(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStateMutability" ):
                listener.exitStateMutability(self)




    def stateMutability(self):

        localctx = FuzzySolidityParser.StateMutabilityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_stateMutability)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1092
            _la = self._input.LA(1)
            if not((((_la - 111)) & ~0x3f) == 0 and ((1 << (_la - 111)) & 10369) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1096
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,147,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1093
                    self.match(FuzzySolidityParser.NL) 
                self.state = 1098
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,147,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(FuzzySolidityParser.NL)
            else:
                return self.getToken(FuzzySolidityParser.NL, i)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FuzzySolidityParser.StatementContext)
            else:
                return self.getTypedRuleContext(FuzzySolidityParser.StatementContext,i)


        def getRuleIndex(self):
            return FuzzySolidityParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)




    def block(self):

        localctx = FuzzySolidityParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1099
            self.match(FuzzySolidityParser.T__13)
            self.state = 1103
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 1100
                self.match(FuzzySolidityParser.NL)
                self.state = 1105
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1109
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la - 4)) & ~0x3f) == 0 and ((1 << (_la - 4)) & -288250843242428927) != 0 or (((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & 15708081149) != 0:
                self.state = 1106
                self.statement()
                self.state = 1111
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1112
            self.match(FuzzySolidityParser.T__15)
            self.state = 1116
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 1113
                self.match(FuzzySolidityParser.NL)
                self.state = 1118
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ifStatement(self):
            return self.getTypedRuleContext(FuzzySolidityParser.IfStatementContext,0)


        def tryStatement(self):
            return self.getTypedRuleContext(FuzzySolidityParser.TryStatementContext,0)


        def whileStatement(self):
            return self.getTypedRuleContext(FuzzySolidityParser.WhileStatementContext,0)


        def forStatement(self):
            return self.getTypedRuleContext(FuzzySolidityParser.ForStatementContext,0)


        def block(self):
            return self.getTypedRuleContext(FuzzySolidityParser.BlockContext,0)


        def inlineAssemblyStatement(self):
            return self.getTypedRuleContext(FuzzySolidityParser.InlineAssemblyStatementContext,0)


        def doWhileStatement(self):
            return self.getTypedRuleContext(FuzzySolidityParser.DoWhileStatementContext,0)


        def continueStatement(self):
            return self.getTypedRuleContext(FuzzySolidityParser.ContinueStatementContext,0)


        def breakStatement(self):
            return self.getTypedRuleContext(FuzzySolidityParser.BreakStatementContext,0)


        def returnStatement(self):
            return self.getTypedRuleContext(FuzzySolidityParser.ReturnStatementContext,0)


        def throwStatement(self):
            return self.getTypedRuleContext(FuzzySolidityParser.ThrowStatementContext,0)


        def emitStatement(self):
            return self.getTypedRuleContext(FuzzySolidityParser.EmitStatementContext,0)


        def simpleStatement(self):
            return self.getTypedRuleContext(FuzzySolidityParser.SimpleStatementContext,0)


        def uncheckedStatement(self):
            return self.getTypedRuleContext(FuzzySolidityParser.UncheckedStatementContext,0)


        def revertStatement(self):
            return self.getTypedRuleContext(FuzzySolidityParser.RevertStatementContext,0)


        def getRuleIndex(self):
            return FuzzySolidityParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)




    def statement(self):

        localctx = FuzzySolidityParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_statement)
        try:
            self.state = 1134
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,151,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1119
                self.ifStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1120
                self.tryStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1121
                self.whileStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1122
                self.forStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1123
                self.block()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1124
                self.inlineAssemblyStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1125
                self.doWhileStatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1126
                self.continueStatement()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1127
                self.breakStatement()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1128
                self.returnStatement()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1129
                self.throwStatement()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1130
                self.emitStatement()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1131
                self.simpleStatement()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1132
                self.uncheckedStatement()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1133
                self.revertStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(FuzzySolidityParser.ExpressionContext,0)


        def eos(self):
            return self.getTypedRuleContext(FuzzySolidityParser.EosContext,0)


        def getRuleIndex(self):
            return FuzzySolidityParser.RULE_expressionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionStatement" ):
                listener.enterExpressionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionStatement" ):
                listener.exitExpressionStatement(self)




    def expressionStatement(self):

        localctx = FuzzySolidityParser.ExpressionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_expressionStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1136
            self.expression(0)
            self.state = 1137
            self.eos()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(FuzzySolidityParser.ExpressionContext,0)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FuzzySolidityParser.StatementContext)
            else:
                return self.getTypedRuleContext(FuzzySolidityParser.StatementContext,i)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(FuzzySolidityParser.NL)
            else:
                return self.getToken(FuzzySolidityParser.NL, i)

        def getRuleIndex(self):
            return FuzzySolidityParser.RULE_ifStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfStatement" ):
                listener.enterIfStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfStatement" ):
                listener.exitIfStatement(self)




    def ifStatement(self):

        localctx = FuzzySolidityParser.IfStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_ifStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1139
            self.match(FuzzySolidityParser.T__41)
            self.state = 1143
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 1140
                self.match(FuzzySolidityParser.NL)
                self.state = 1145
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1146
            self.match(FuzzySolidityParser.T__21)
            self.state = 1150
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 1147
                self.match(FuzzySolidityParser.NL)
                self.state = 1152
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1153
            self.expression(0)
            self.state = 1154
            self.match(FuzzySolidityParser.T__22)
            self.state = 1158
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 1155
                self.match(FuzzySolidityParser.NL)
                self.state = 1160
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1161
            self.statement()
            self.state = 1170
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,156,self._ctx)
            if la_ == 1:
                self.state = 1162
                self.match(FuzzySolidityParser.T__42)
                self.state = 1166
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 1163
                    self.match(FuzzySolidityParser.NL)
                    self.state = 1168
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1169
                self.statement()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TryStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(FuzzySolidityParser.ExpressionContext,0)


        def block(self):
            return self.getTypedRuleContext(FuzzySolidityParser.BlockContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(FuzzySolidityParser.NL)
            else:
                return self.getToken(FuzzySolidityParser.NL, i)

        def returnParameters(self):
            return self.getTypedRuleContext(FuzzySolidityParser.ReturnParametersContext,0)


        def catchClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FuzzySolidityParser.CatchClauseContext)
            else:
                return self.getTypedRuleContext(FuzzySolidityParser.CatchClauseContext,i)


        def getRuleIndex(self):
            return FuzzySolidityParser.RULE_tryStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTryStatement" ):
                listener.enterTryStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTryStatement" ):
                listener.exitTryStatement(self)




    def tryStatement(self):

        localctx = FuzzySolidityParser.TryStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_tryStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1172
            self.match(FuzzySolidityParser.T__43)
            self.state = 1176
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 1173
                self.match(FuzzySolidityParser.NL)
                self.state = 1178
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1179
            self.expression(0)
            self.state = 1181
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==30:
                self.state = 1180
                self.returnParameters()


            self.state = 1183
            self.block()
            self.state = 1185 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1184
                self.catchClause()
                self.state = 1187 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==45):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CatchClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(FuzzySolidityParser.BlockContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(FuzzySolidityParser.NL)
            else:
                return self.getToken(FuzzySolidityParser.NL, i)

        def parameterList(self):
            return self.getTypedRuleContext(FuzzySolidityParser.ParameterListContext,0)


        def identifier(self):
            return self.getTypedRuleContext(FuzzySolidityParser.IdentifierContext,0)


        def getRuleIndex(self):
            return FuzzySolidityParser.RULE_catchClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatchClause" ):
                listener.enterCatchClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatchClause" ):
                listener.exitCatchClause(self)




    def catchClause(self):

        localctx = FuzzySolidityParser.CatchClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_catchClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1189
            self.match(FuzzySolidityParser.T__44)
            self.state = 1193
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 1190
                self.match(FuzzySolidityParser.NL)
                self.state = 1195
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1200
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 18016597553717248) != 0 or (((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & 6983778305) != 0:
                self.state = 1197
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((_la) & ~0x3f) == 0 and ((1 << _la) & 18016597549522944) != 0 or (((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & 6983778305) != 0:
                    self.state = 1196
                    self.identifier()


                self.state = 1199
                self.parameterList()


            self.state = 1202
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(FuzzySolidityParser.ExpressionContext,0)


        def statement(self):
            return self.getTypedRuleContext(FuzzySolidityParser.StatementContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(FuzzySolidityParser.NL)
            else:
                return self.getToken(FuzzySolidityParser.NL, i)

        def getRuleIndex(self):
            return FuzzySolidityParser.RULE_whileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileStatement" ):
                listener.enterWhileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileStatement" ):
                listener.exitWhileStatement(self)




    def whileStatement(self):

        localctx = FuzzySolidityParser.WhileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_whileStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1204
            self.match(FuzzySolidityParser.T__45)
            self.state = 1208
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 1205
                self.match(FuzzySolidityParser.NL)
                self.state = 1210
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1211
            self.match(FuzzySolidityParser.T__21)
            self.state = 1215
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 1212
                self.match(FuzzySolidityParser.NL)
                self.state = 1217
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1218
            self.expression(0)
            self.state = 1219
            self.match(FuzzySolidityParser.T__22)
            self.state = 1223
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 1220
                self.match(FuzzySolidityParser.NL)
                self.state = 1225
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1226
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclarationStatement(self):
            return self.getTypedRuleContext(FuzzySolidityParser.VariableDeclarationStatementContext,0)


        def expressionStatement(self):
            return self.getTypedRuleContext(FuzzySolidityParser.ExpressionStatementContext,0)


        def getRuleIndex(self):
            return FuzzySolidityParser.RULE_simpleStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleStatement" ):
                listener.enterSimpleStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleStatement" ):
                listener.exitSimpleStatement(self)




    def simpleStatement(self):

        localctx = FuzzySolidityParser.SimpleStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_simpleStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1230
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,166,self._ctx)
            if la_ == 1:
                self.state = 1228
                self.variableDeclarationStatement()
                pass

            elif la_ == 2:
                self.state = 1229
                self.expressionStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UncheckedStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(FuzzySolidityParser.BlockContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(FuzzySolidityParser.NL)
            else:
                return self.getToken(FuzzySolidityParser.NL, i)

        def getRuleIndex(self):
            return FuzzySolidityParser.RULE_uncheckedStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUncheckedStatement" ):
                listener.enterUncheckedStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUncheckedStatement" ):
                listener.exitUncheckedStatement(self)




    def uncheckedStatement(self):

        localctx = FuzzySolidityParser.UncheckedStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_uncheckedStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1232
            self.match(FuzzySolidityParser.T__46)
            self.state = 1236
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 1233
                self.match(FuzzySolidityParser.NL)
                self.state = 1238
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1239
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(FuzzySolidityParser.StatementContext,0)


        def simpleStatement(self):
            return self.getTypedRuleContext(FuzzySolidityParser.SimpleStatementContext,0)


        def expressionStatement(self):
            return self.getTypedRuleContext(FuzzySolidityParser.ExpressionStatementContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(FuzzySolidityParser.NL)
            else:
                return self.getToken(FuzzySolidityParser.NL, i)

        def expression(self):
            return self.getTypedRuleContext(FuzzySolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return FuzzySolidityParser.RULE_forStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForStatement" ):
                listener.enterForStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForStatement" ):
                listener.exitForStatement(self)




    def forStatement(self):

        localctx = FuzzySolidityParser.ForStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_forStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1241
            self.match(FuzzySolidityParser.T__25)
            self.state = 1245
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 1242
                self.match(FuzzySolidityParser.NL)
                self.state = 1247
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1248
            self.match(FuzzySolidityParser.T__21)
            self.state = 1252
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 1249
                self.match(FuzzySolidityParser.NL)
                self.state = 1254
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1263
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [4, 13, 22, 24, 29, 33, 35, 37, 41, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 96, 98, 99, 100, 101, 102, 103, 104, 105, 107, 114, 118, 123, 125, 127, 128, 129]:
                self.state = 1255
                self.simpleStatement()
                pass
            elif token in [48]:
                self.state = 1256
                self.match(FuzzySolidityParser.T__47)
                self.state = 1260
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 1257
                    self.match(FuzzySolidityParser.NL)
                    self.state = 1262
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

            self.state = 1273
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [4, 13, 22, 24, 33, 35, 41, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 96, 98, 99, 100, 101, 102, 103, 104, 105, 107, 114, 118, 123, 125, 127, 128, 129]:
                self.state = 1265
                self.expressionStatement()
                pass
            elif token in [48]:
                self.state = 1266
                self.match(FuzzySolidityParser.T__47)
                self.state = 1270
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 1267
                    self.match(FuzzySolidityParser.NL)
                    self.state = 1272
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

            self.state = 1276
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 4)) & ~0x3f) == 0 and ((1 << (_la - 4)) & -289356135933935103) != 0 or (((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & 15707933693) != 0:
                self.state = 1275
                self.expression(0)


            self.state = 1278
            self.match(FuzzySolidityParser.T__22)
            self.state = 1282
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 1279
                self.match(FuzzySolidityParser.NL)
                self.state = 1284
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1285
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InlineAssemblyStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyBlock(self):
            return self.getTypedRuleContext(FuzzySolidityParser.AssemblyBlockContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(FuzzySolidityParser.NL)
            else:
                return self.getToken(FuzzySolidityParser.NL, i)

        def StringLiteralFragment(self):
            return self.getToken(FuzzySolidityParser.StringLiteralFragment, 0)

        def getRuleIndex(self):
            return FuzzySolidityParser.RULE_inlineAssemblyStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInlineAssemblyStatement" ):
                listener.enterInlineAssemblyStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInlineAssemblyStatement" ):
                listener.exitInlineAssemblyStatement(self)




    def inlineAssemblyStatement(self):

        localctx = FuzzySolidityParser.InlineAssemblyStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_inlineAssemblyStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1287
            self.match(FuzzySolidityParser.T__48)
            self.state = 1291
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 1288
                self.match(FuzzySolidityParser.NL)
                self.state = 1293
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1301
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==129:
                self.state = 1294
                self.match(FuzzySolidityParser.StringLiteralFragment)
                self.state = 1298
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 1295
                    self.match(FuzzySolidityParser.NL)
                    self.state = 1300
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1303
            self.assemblyBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DoWhileStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(FuzzySolidityParser.StatementContext,0)


        def expression(self):
            return self.getTypedRuleContext(FuzzySolidityParser.ExpressionContext,0)


        def eos(self):
            return self.getTypedRuleContext(FuzzySolidityParser.EosContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(FuzzySolidityParser.NL)
            else:
                return self.getToken(FuzzySolidityParser.NL, i)

        def getRuleIndex(self):
            return FuzzySolidityParser.RULE_doWhileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoWhileStatement" ):
                listener.enterDoWhileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoWhileStatement" ):
                listener.exitDoWhileStatement(self)




    def doWhileStatement(self):

        localctx = FuzzySolidityParser.DoWhileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_doWhileStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1305
            self.match(FuzzySolidityParser.T__49)
            self.state = 1309
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 1306
                self.match(FuzzySolidityParser.NL)
                self.state = 1311
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1312
            self.statement()
            self.state = 1313
            self.match(FuzzySolidityParser.T__45)
            self.state = 1317
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 1314
                self.match(FuzzySolidityParser.NL)
                self.state = 1319
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1320
            self.match(FuzzySolidityParser.T__21)
            self.state = 1324
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 1321
                self.match(FuzzySolidityParser.NL)
                self.state = 1326
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1327
            self.expression(0)
            self.state = 1328
            self.match(FuzzySolidityParser.T__22)
            self.state = 1332
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,182,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1329
                    self.match(FuzzySolidityParser.NL) 
                self.state = 1334
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,182,self._ctx)

            self.state = 1335
            self.eos()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContinueStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ContinueKeyword(self):
            return self.getToken(FuzzySolidityParser.ContinueKeyword, 0)

        def eos(self):
            return self.getTypedRuleContext(FuzzySolidityParser.EosContext,0)


        def getRuleIndex(self):
            return FuzzySolidityParser.RULE_continueStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContinueStatement" ):
                listener.enterContinueStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContinueStatement" ):
                listener.exitContinueStatement(self)




    def continueStatement(self):

        localctx = FuzzySolidityParser.ContinueStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_continueStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1337
            self.match(FuzzySolidityParser.ContinueKeyword)
            self.state = 1338
            self.eos()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BreakStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BreakKeyword(self):
            return self.getToken(FuzzySolidityParser.BreakKeyword, 0)

        def eos(self):
            return self.getTypedRuleContext(FuzzySolidityParser.EosContext,0)


        def getRuleIndex(self):
            return FuzzySolidityParser.RULE_breakStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreakStatement" ):
                listener.enterBreakStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreakStatement" ):
                listener.exitBreakStatement(self)




    def breakStatement(self):

        localctx = FuzzySolidityParser.BreakStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_breakStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1340
            self.match(FuzzySolidityParser.BreakKeyword)
            self.state = 1341
            self.eos()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def eos(self):
            return self.getTypedRuleContext(FuzzySolidityParser.EosContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(FuzzySolidityParser.NL)
            else:
                return self.getToken(FuzzySolidityParser.NL, i)

        def expression(self):
            return self.getTypedRuleContext(FuzzySolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return FuzzySolidityParser.RULE_returnStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStatement" ):
                listener.enterReturnStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStatement" ):
                listener.exitReturnStatement(self)




    def returnStatement(self):

        localctx = FuzzySolidityParser.ReturnStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_returnStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1343
            self.match(FuzzySolidityParser.T__50)
            self.state = 1347
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,183,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1344
                    self.match(FuzzySolidityParser.NL) 
                self.state = 1349
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,183,self._ctx)

            self.state = 1351
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 4)) & ~0x3f) == 0 and ((1 << (_la - 4)) & -289356135933935103) != 0 or (((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & 15707933693) != 0:
                self.state = 1350
                self.expression(0)


            self.state = 1353
            self.eos()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ThrowStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def eos(self):
            return self.getTypedRuleContext(FuzzySolidityParser.EosContext,0)


        def getRuleIndex(self):
            return FuzzySolidityParser.RULE_throwStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThrowStatement" ):
                listener.enterThrowStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThrowStatement" ):
                listener.exitThrowStatement(self)




    def throwStatement(self):

        localctx = FuzzySolidityParser.ThrowStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_throwStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1355
            self.match(FuzzySolidityParser.T__51)
            self.state = 1356
            self.eos()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EmitStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionCall(self):
            return self.getTypedRuleContext(FuzzySolidityParser.FunctionCallContext,0)


        def eos(self):
            return self.getTypedRuleContext(FuzzySolidityParser.EosContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(FuzzySolidityParser.NL)
            else:
                return self.getToken(FuzzySolidityParser.NL, i)

        def getRuleIndex(self):
            return FuzzySolidityParser.RULE_emitStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmitStatement" ):
                listener.enterEmitStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmitStatement" ):
                listener.exitEmitStatement(self)




    def emitStatement(self):

        localctx = FuzzySolidityParser.EmitStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_emitStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1358
            self.match(FuzzySolidityParser.T__52)
            self.state = 1362
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 1359
                self.match(FuzzySolidityParser.NL)
                self.state = 1364
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1365
            self.functionCall()
            self.state = 1366
            self.eos()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RevertStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionCall(self):
            return self.getTypedRuleContext(FuzzySolidityParser.FunctionCallContext,0)


        def eos(self):
            return self.getTypedRuleContext(FuzzySolidityParser.EosContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(FuzzySolidityParser.NL)
            else:
                return self.getToken(FuzzySolidityParser.NL, i)

        def getRuleIndex(self):
            return FuzzySolidityParser.RULE_revertStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRevertStatement" ):
                listener.enterRevertStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRevertStatement" ):
                listener.exitRevertStatement(self)




    def revertStatement(self):

        localctx = FuzzySolidityParser.RevertStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_revertStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1368
            self.match(FuzzySolidityParser.T__53)
            self.state = 1372
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 1369
                self.match(FuzzySolidityParser.NL)
                self.state = 1374
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1375
            self.functionCall()
            self.state = 1376
            self.eos()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDeclarationStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def eos(self):
            return self.getTypedRuleContext(FuzzySolidityParser.EosContext,0)


        def identifierList(self):
            return self.getTypedRuleContext(FuzzySolidityParser.IdentifierListContext,0)


        def variableDeclaration(self):
            return self.getTypedRuleContext(FuzzySolidityParser.VariableDeclarationContext,0)


        def variableDeclarationList(self):
            return self.getTypedRuleContext(FuzzySolidityParser.VariableDeclarationListContext,0)


        def expression(self):
            return self.getTypedRuleContext(FuzzySolidityParser.ExpressionContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(FuzzySolidityParser.NL)
            else:
                return self.getToken(FuzzySolidityParser.NL, i)

        def getRuleIndex(self):
            return FuzzySolidityParser.RULE_variableDeclarationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclarationStatement" ):
                listener.enterVariableDeclarationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclarationStatement" ):
                listener.exitVariableDeclarationStatement(self)




    def variableDeclarationStatement(self):

        localctx = FuzzySolidityParser.VariableDeclarationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_variableDeclarationStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1402
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,190,self._ctx)
            if la_ == 1:
                self.state = 1378
                self.match(FuzzySolidityParser.T__54)
                self.state = 1382
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 1379
                    self.match(FuzzySolidityParser.NL)
                    self.state = 1384
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1385
                self.identifierList()
                pass

            elif la_ == 2:
                self.state = 1386
                self.variableDeclaration()
                pass

            elif la_ == 3:
                self.state = 1387
                self.match(FuzzySolidityParser.T__21)
                self.state = 1391
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 1388
                    self.match(FuzzySolidityParser.NL)
                    self.state = 1393
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1394
                self.variableDeclarationList()
                self.state = 1395
                self.match(FuzzySolidityParser.T__22)
                self.state = 1399
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,189,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1396
                        self.match(FuzzySolidityParser.NL) 
                    self.state = 1401
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,189,self._ctx)

                pass


            self.state = 1412
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9:
                self.state = 1404
                self.match(FuzzySolidityParser.T__8)
                self.state = 1408
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 1405
                    self.match(FuzzySolidityParser.NL)
                    self.state = 1410
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1411
                self.expression(0)


            self.state = 1414
            self.eos()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDeclarationListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FuzzySolidityParser.VariableDeclarationContext)
            else:
                return self.getTypedRuleContext(FuzzySolidityParser.VariableDeclarationContext,i)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(FuzzySolidityParser.NL)
            else:
                return self.getToken(FuzzySolidityParser.NL, i)

        def getRuleIndex(self):
            return FuzzySolidityParser.RULE_variableDeclarationList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclarationList" ):
                listener.enterVariableDeclarationList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclarationList" ):
                listener.exitVariableDeclarationList(self)




    def variableDeclarationList(self):

        localctx = FuzzySolidityParser.VariableDeclarationListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_variableDeclarationList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1417
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 558448725169545216) != 0 or (((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & 6983778429) != 0:
                self.state = 1416
                self.variableDeclaration()


            self.state = 1431
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==15:
                self.state = 1419
                self.match(FuzzySolidityParser.T__14)
                self.state = 1423
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 1420
                    self.match(FuzzySolidityParser.NL)
                    self.state = 1425
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1427
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((_la) & ~0x3f) == 0 and ((1 << _la) & 558448725169545216) != 0 or (((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & 6983778429) != 0:
                    self.state = 1426
                    self.variableDeclaration()


                self.state = 1433
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(FuzzySolidityParser.NL)
            else:
                return self.getToken(FuzzySolidityParser.NL, i)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FuzzySolidityParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(FuzzySolidityParser.IdentifierContext,i)


        def getRuleIndex(self):
            return FuzzySolidityParser.RULE_identifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierList" ):
                listener.enterIdentifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierList" ):
                listener.exitIdentifierList(self)




    def identifierList(self):

        localctx = FuzzySolidityParser.IdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_identifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1434
            self.match(FuzzySolidityParser.T__21)
            self.state = 1438
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 1435
                self.match(FuzzySolidityParser.NL)
                self.state = 1440
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1453
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,200,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1442
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((_la) & ~0x3f) == 0 and ((1 << _la) & 18016597549522944) != 0 or (((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & 6983778305) != 0:
                        self.state = 1441
                        self.identifier()


                    self.state = 1444
                    self.match(FuzzySolidityParser.T__14)
                    self.state = 1448
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==131:
                        self.state = 1445
                        self.match(FuzzySolidityParser.NL)
                        self.state = 1450
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
             
                self.state = 1455
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,200,self._ctx)

            self.state = 1457
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 18016597549522944) != 0 or (((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & 6983778305) != 0:
                self.state = 1456
                self.identifier()


            self.state = 1459
            self.match(FuzzySolidityParser.T__22)
            self.state = 1463
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,202,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1460
                    self.match(FuzzySolidityParser.NL) 
                self.state = 1465
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,202,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementaryTypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Int(self):
            return self.getToken(FuzzySolidityParser.Int, 0)

        def Uint(self):
            return self.getToken(FuzzySolidityParser.Uint, 0)

        def Byte(self):
            return self.getToken(FuzzySolidityParser.Byte, 0)

        def Fixed(self):
            return self.getToken(FuzzySolidityParser.Fixed, 0)

        def Ufixed(self):
            return self.getToken(FuzzySolidityParser.Ufixed, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(FuzzySolidityParser.NL)
            else:
                return self.getToken(FuzzySolidityParser.NL, i)

        def getRuleIndex(self):
            return FuzzySolidityParser.RULE_elementaryTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementaryTypeName" ):
                listener.enterElementaryTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementaryTypeName" ):
                listener.exitElementaryTypeName(self)




    def elementaryTypeName(self):

        localctx = FuzzySolidityParser.ElementaryTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_elementaryTypeName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1466
            _la = self._input.LA(1)
            if not(((_la) & ~0x3f) == 0 and ((1 << _la) & 540431989644197888) != 0 or (((_la - 98)) & ~0x3f) == 0 and ((1 << (_la - 98)) & 31) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1470
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,203,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1467
                    self.match(FuzzySolidityParser.NL) 
                self.state = 1472
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,203,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(FuzzySolidityParser.TypeNameContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(FuzzySolidityParser.NL)
            else:
                return self.getToken(FuzzySolidityParser.NL, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FuzzySolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(FuzzySolidityParser.ExpressionContext,i)


        def primaryExpression(self):
            return self.getTypedRuleContext(FuzzySolidityParser.PrimaryExpressionContext,0)


        def identifier(self):
            return self.getTypedRuleContext(FuzzySolidityParser.IdentifierContext,0)


        def nameValueList(self):
            return self.getTypedRuleContext(FuzzySolidityParser.NameValueListContext,0)


        def functionCallArguments(self):
            return self.getTypedRuleContext(FuzzySolidityParser.FunctionCallArgumentsContext,0)


        def getRuleIndex(self):
            return FuzzySolidityParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = FuzzySolidityParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 126
        self.enterRecursionRule(localctx, 126, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1538
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,212,self._ctx)
            if la_ == 1:
                self.state = 1474
                self.match(FuzzySolidityParser.T__60)
                self.state = 1478
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 1475
                    self.match(FuzzySolidityParser.NL)
                    self.state = 1480
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1481
                self.typeName(0)
                pass

            elif la_ == 2:
                self.state = 1482
                self.match(FuzzySolidityParser.T__21)
                self.state = 1486
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 1483
                    self.match(FuzzySolidityParser.NL)
                    self.state = 1488
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1489
                self.expression(0)
                self.state = 1490
                self.match(FuzzySolidityParser.T__22)
                self.state = 1494
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,206,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1491
                        self.match(FuzzySolidityParser.NL) 
                    self.state = 1496
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,206,self._ctx)

                pass

            elif la_ == 3:
                self.state = 1497
                _la = self._input.LA(1)
                if not(_la==59 or _la==60):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1501
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 1498
                    self.match(FuzzySolidityParser.NL)
                    self.state = 1503
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1504
                self.expression(19)
                pass

            elif la_ == 4:
                self.state = 1505
                _la = self._input.LA(1)
                if not(_la==63 or _la==64):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1509
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 1506
                    self.match(FuzzySolidityParser.NL)
                    self.state = 1511
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1512
                self.expression(18)
                pass

            elif la_ == 5:
                self.state = 1513
                _la = self._input.LA(1)
                if not(_la==65 or _la==66):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1517
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 1514
                    self.match(FuzzySolidityParser.NL)
                    self.state = 1519
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1520
                self.expression(17)
                pass

            elif la_ == 6:
                self.state = 1521
                self.match(FuzzySolidityParser.T__66)
                self.state = 1525
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 1522
                    self.match(FuzzySolidityParser.NL)
                    self.state = 1527
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1528
                self.expression(16)
                pass

            elif la_ == 7:
                self.state = 1529
                self.match(FuzzySolidityParser.T__3)
                self.state = 1533
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 1530
                    self.match(FuzzySolidityParser.NL)
                    self.state = 1535
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1536
                self.expression(15)
                pass

            elif la_ == 8:
                self.state = 1537
                self.primaryExpression()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1761
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,241,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1759
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,240,self._ctx)
                    if la_ == 1:
                        localctx = FuzzySolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1540
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 1541
                        self.match(FuzzySolidityParser.T__67)
                        self.state = 1545
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==131:
                            self.state = 1542
                            self.match(FuzzySolidityParser.NL)
                            self.state = 1547
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1548
                        self.expression(15)
                        pass

                    elif la_ == 2:
                        localctx = FuzzySolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1549
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 1550
                        _la = self._input.LA(1)
                        if not((((_la - 12)) & ~0x3f) == 0 and ((1 << (_la - 12)) & 432345564227567617) != 0):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1554
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==131:
                            self.state = 1551
                            self.match(FuzzySolidityParser.NL)
                            self.state = 1556
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1557
                        self.expression(14)
                        pass

                    elif la_ == 3:
                        localctx = FuzzySolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1558
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 1559
                        _la = self._input.LA(1)
                        if not(_la==63 or _la==64):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1563
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==131:
                            self.state = 1560
                            self.match(FuzzySolidityParser.NL)
                            self.state = 1565
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1566
                        self.expression(13)
                        pass

                    elif la_ == 4:
                        localctx = FuzzySolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1567
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 1568
                        _la = self._input.LA(1)
                        if not(_la==71 or _la==72):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1572
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==131:
                            self.state = 1569
                            self.match(FuzzySolidityParser.NL)
                            self.state = 1574
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1575
                        self.expression(12)
                        pass

                    elif la_ == 5:
                        localctx = FuzzySolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1576
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 1577
                        self.match(FuzzySolidityParser.T__72)
                        self.state = 1581
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==131:
                            self.state = 1578
                            self.match(FuzzySolidityParser.NL)
                            self.state = 1583
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1584
                        self.expression(11)
                        pass

                    elif la_ == 6:
                        localctx = FuzzySolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1585
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 1586
                        self.match(FuzzySolidityParser.T__2)
                        self.state = 1590
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==131:
                            self.state = 1587
                            self.match(FuzzySolidityParser.NL)
                            self.state = 1592
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1593
                        self.expression(10)
                        pass

                    elif la_ == 7:
                        localctx = FuzzySolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1594
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 1595
                        self.match(FuzzySolidityParser.T__73)
                        self.state = 1599
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==131:
                            self.state = 1596
                            self.match(FuzzySolidityParser.NL)
                            self.state = 1601
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1602
                        self.expression(9)
                        pass

                    elif la_ == 8:
                        localctx = FuzzySolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1603
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 1604
                        _la = self._input.LA(1)
                        if not(((_la) & ~0x3f) == 0 and ((1 << _la) & 480) != 0):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1608
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==131:
                            self.state = 1605
                            self.match(FuzzySolidityParser.NL)
                            self.state = 1610
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1611
                        self.expression(8)
                        pass

                    elif la_ == 9:
                        localctx = FuzzySolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1612
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 1613
                        _la = self._input.LA(1)
                        if not(_la==75 or _la==76):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1617
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==131:
                            self.state = 1614
                            self.match(FuzzySolidityParser.NL)
                            self.state = 1619
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1620
                        self.expression(7)
                        pass

                    elif la_ == 10:
                        localctx = FuzzySolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1621
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 1622
                        self.match(FuzzySolidityParser.T__76)
                        self.state = 1626
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==131:
                            self.state = 1623
                            self.match(FuzzySolidityParser.NL)
                            self.state = 1628
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1629
                        self.expression(6)
                        pass

                    elif la_ == 11:
                        localctx = FuzzySolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1630
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 1631
                        self.match(FuzzySolidityParser.T__1)
                        self.state = 1635
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==131:
                            self.state = 1632
                            self.match(FuzzySolidityParser.NL)
                            self.state = 1637
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1638
                        self.expression(5)
                        pass

                    elif la_ == 12:
                        localctx = FuzzySolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1639
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1640
                        self.match(FuzzySolidityParser.T__77)
                        self.state = 1644
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==131:
                            self.state = 1641
                            self.match(FuzzySolidityParser.NL)
                            self.state = 1646
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1647
                        self.expression(0)
                        self.state = 1648
                        self.match(FuzzySolidityParser.T__61)
                        self.state = 1652
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==131:
                            self.state = 1649
                            self.match(FuzzySolidityParser.NL)
                            self.state = 1654
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1655
                        self.expression(4)
                        pass

                    elif la_ == 13:
                        localctx = FuzzySolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1657
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1658
                        _la = self._input.LA(1)
                        if not(_la==9 or (((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & 1023) != 0):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1662
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==131:
                            self.state = 1659
                            self.match(FuzzySolidityParser.NL)
                            self.state = 1664
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1665
                        self.expression(3)
                        pass

                    elif la_ == 14:
                        localctx = FuzzySolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1666
                        if not self.precpred(self._ctx, 27):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 27)")
                        self.state = 1667
                        _la = self._input.LA(1)
                        if not(_la==59 or _la==60):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1671
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,227,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 1668
                                self.match(FuzzySolidityParser.NL) 
                            self.state = 1673
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,227,self._ctx)

                        pass

                    elif la_ == 15:
                        localctx = FuzzySolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1674
                        if not self.precpred(self._ctx, 25):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 25)")
                        self.state = 1675
                        self.match(FuzzySolidityParser.T__32)
                        self.state = 1679
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==131:
                            self.state = 1676
                            self.match(FuzzySolidityParser.NL)
                            self.state = 1681
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1682
                        self.expression(0)
                        self.state = 1683
                        self.match(FuzzySolidityParser.T__33)
                        self.state = 1687
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,229,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 1684
                                self.match(FuzzySolidityParser.NL) 
                            self.state = 1689
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,229,self._ctx)

                        pass

                    elif la_ == 16:
                        localctx = FuzzySolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1690
                        if not self.precpred(self._ctx, 24):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 24)")
                        self.state = 1691
                        self.match(FuzzySolidityParser.T__32)
                        self.state = 1695
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==131:
                            self.state = 1692
                            self.match(FuzzySolidityParser.NL)
                            self.state = 1697
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1699
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la - 4)) & ~0x3f) == 0 and ((1 << (_la - 4)) & -289356135933935103) != 0 or (((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & 15707933693) != 0:
                            self.state = 1698
                            self.expression(0)


                        self.state = 1701
                        self.match(FuzzySolidityParser.T__61)
                        self.state = 1705
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==131:
                            self.state = 1702
                            self.match(FuzzySolidityParser.NL)
                            self.state = 1707
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1709
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la - 4)) & ~0x3f) == 0 and ((1 << (_la - 4)) & -289356135933935103) != 0 or (((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & 15707933693) != 0:
                            self.state = 1708
                            self.expression(0)


                        self.state = 1711
                        self.match(FuzzySolidityParser.T__33)
                        self.state = 1715
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,234,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 1712
                                self.match(FuzzySolidityParser.NL) 
                            self.state = 1717
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,234,self._ctx)

                        pass

                    elif la_ == 17:
                        localctx = FuzzySolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1718
                        if not self.precpred(self._ctx, 23):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 23)")
                        self.state = 1719
                        self.match(FuzzySolidityParser.T__35)
                        self.state = 1723
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==131:
                            self.state = 1720
                            self.match(FuzzySolidityParser.NL)
                            self.state = 1725
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1726
                        self.identifier()
                        pass

                    elif la_ == 18:
                        localctx = FuzzySolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1727
                        if not self.precpred(self._ctx, 22):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 22)")
                        self.state = 1728
                        self.match(FuzzySolidityParser.T__13)
                        self.state = 1732
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==131:
                            self.state = 1729
                            self.match(FuzzySolidityParser.NL)
                            self.state = 1734
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1735
                        self.nameValueList()
                        self.state = 1736
                        self.match(FuzzySolidityParser.T__15)
                        self.state = 1740
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,237,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 1737
                                self.match(FuzzySolidityParser.NL) 
                            self.state = 1742
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,237,self._ctx)

                        pass

                    elif la_ == 19:
                        localctx = FuzzySolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1743
                        if not self.precpred(self._ctx, 21):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 21)")
                        self.state = 1744
                        self.match(FuzzySolidityParser.T__21)
                        self.state = 1748
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==131:
                            self.state = 1745
                            self.match(FuzzySolidityParser.NL)
                            self.state = 1750
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1751
                        self.functionCallArguments()
                        self.state = 1752
                        self.match(FuzzySolidityParser.T__22)
                        self.state = 1756
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,239,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 1753
                                self.match(FuzzySolidityParser.NL) 
                            self.state = 1758
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,239,self._ctx)

                        pass

             
                self.state = 1763
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,241,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class PrimaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BooleanLiteral(self):
            return self.getToken(FuzzySolidityParser.BooleanLiteral, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(FuzzySolidityParser.NL)
            else:
                return self.getToken(FuzzySolidityParser.NL, i)

        def numberLiteral(self):
            return self.getTypedRuleContext(FuzzySolidityParser.NumberLiteralContext,0)


        def hexLiteral(self):
            return self.getTypedRuleContext(FuzzySolidityParser.HexLiteralContext,0)


        def stringLiteral(self):
            return self.getTypedRuleContext(FuzzySolidityParser.StringLiteralContext,0)


        def identifier(self):
            return self.getTypedRuleContext(FuzzySolidityParser.IdentifierContext,0)


        def TypeKeyword(self):
            return self.getToken(FuzzySolidityParser.TypeKeyword, 0)

        def PayableKeyword(self):
            return self.getToken(FuzzySolidityParser.PayableKeyword, 0)

        def tupleExpression(self):
            return self.getTypedRuleContext(FuzzySolidityParser.TupleExpressionContext,0)


        def typeNameExpression(self):
            return self.getTypedRuleContext(FuzzySolidityParser.TypeNameExpressionContext,0)


        def getRuleIndex(self):
            return FuzzySolidityParser.RULE_primaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryExpression" ):
                listener.enterPrimaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryExpression" ):
                listener.exitPrimaryExpression(self)




    def primaryExpression(self):

        localctx = FuzzySolidityParser.PrimaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_primaryExpression)
        self._la = 0 # Token type
        try:
            self.state = 1823
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,251,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1764
                self.match(FuzzySolidityParser.BooleanLiteral)
                self.state = 1768
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,242,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1765
                        self.match(FuzzySolidityParser.NL) 
                    self.state = 1770
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,242,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1771
                self.numberLiteral()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1772
                self.hexLiteral()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1773
                self.stringLiteral()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1774
                self.identifier()
                self.state = 1789
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,245,self._ctx)
                if la_ == 1:
                    self.state = 1775
                    self.match(FuzzySolidityParser.T__32)
                    self.state = 1779
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==131:
                        self.state = 1776
                        self.match(FuzzySolidityParser.NL)
                        self.state = 1781
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1782
                    self.match(FuzzySolidityParser.T__33)
                    self.state = 1786
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,244,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1783
                            self.match(FuzzySolidityParser.NL) 
                        self.state = 1788
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,244,self._ctx)



                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1791
                self.match(FuzzySolidityParser.TypeKeyword)
                self.state = 1795
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,246,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1792
                        self.match(FuzzySolidityParser.NL) 
                    self.state = 1797
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,246,self._ctx)

                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1798
                self.match(FuzzySolidityParser.PayableKeyword)
                self.state = 1802
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,247,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1799
                        self.match(FuzzySolidityParser.NL) 
                    self.state = 1804
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,247,self._ctx)

                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1805
                self.tupleExpression()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1806
                self.typeNameExpression()
                self.state = 1821
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,250,self._ctx)
                if la_ == 1:
                    self.state = 1807
                    self.match(FuzzySolidityParser.T__32)
                    self.state = 1811
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==131:
                        self.state = 1808
                        self.match(FuzzySolidityParser.NL)
                        self.state = 1813
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1814
                    self.match(FuzzySolidityParser.T__33)
                    self.state = 1818
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,249,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1815
                            self.match(FuzzySolidityParser.NL) 
                        self.state = 1820
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,249,self._ctx)



                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FuzzySolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(FuzzySolidityParser.ExpressionContext,i)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(FuzzySolidityParser.NL)
            else:
                return self.getToken(FuzzySolidityParser.NL, i)

        def getRuleIndex(self):
            return FuzzySolidityParser.RULE_expressionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionList" ):
                listener.enterExpressionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionList" ):
                listener.exitExpressionList(self)




    def expressionList(self):

        localctx = FuzzySolidityParser.ExpressionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_expressionList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1825
            self.expression(0)
            self.state = 1836
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==15:
                self.state = 1826
                self.match(FuzzySolidityParser.T__14)
                self.state = 1830
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 1827
                    self.match(FuzzySolidityParser.NL)
                    self.state = 1832
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1833
                self.expression(0)
                self.state = 1838
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NameValueListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nameValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FuzzySolidityParser.NameValueContext)
            else:
                return self.getTypedRuleContext(FuzzySolidityParser.NameValueContext,i)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(FuzzySolidityParser.NL)
            else:
                return self.getToken(FuzzySolidityParser.NL, i)

        def getRuleIndex(self):
            return FuzzySolidityParser.RULE_nameValueList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNameValueList" ):
                listener.enterNameValueList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNameValueList" ):
                listener.exitNameValueList(self)




    def nameValueList(self):

        localctx = FuzzySolidityParser.NameValueListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_nameValueList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1839
            self.nameValue()
            self.state = 1850
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,255,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1840
                    self.match(FuzzySolidityParser.T__14)
                    self.state = 1844
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==131:
                        self.state = 1841
                        self.match(FuzzySolidityParser.NL)
                        self.state = 1846
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1847
                    self.nameValue() 
                self.state = 1852
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,255,self._ctx)

            self.state = 1860
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==15:
                self.state = 1853
                self.match(FuzzySolidityParser.T__14)
                self.state = 1857
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 1854
                    self.match(FuzzySolidityParser.NL)
                    self.state = 1859
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NameValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(FuzzySolidityParser.IdentifierContext,0)


        def expression(self):
            return self.getTypedRuleContext(FuzzySolidityParser.ExpressionContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(FuzzySolidityParser.NL)
            else:
                return self.getToken(FuzzySolidityParser.NL, i)

        def getRuleIndex(self):
            return FuzzySolidityParser.RULE_nameValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNameValue" ):
                listener.enterNameValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNameValue" ):
                listener.exitNameValue(self)




    def nameValue(self):

        localctx = FuzzySolidityParser.NameValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_nameValue)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1862
            self.identifier()
            self.state = 1863
            self.match(FuzzySolidityParser.T__61)
            self.state = 1867
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 1864
                self.match(FuzzySolidityParser.NL)
                self.state = 1869
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1870
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionCallArgumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(FuzzySolidityParser.NL)
            else:
                return self.getToken(FuzzySolidityParser.NL, i)

        def nameValueList(self):
            return self.getTypedRuleContext(FuzzySolidityParser.NameValueListContext,0)


        def expressionList(self):
            return self.getTypedRuleContext(FuzzySolidityParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return FuzzySolidityParser.RULE_functionCallArguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCallArguments" ):
                listener.enterFunctionCallArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCallArguments" ):
                listener.exitFunctionCallArguments(self)




    def functionCallArguments(self):

        localctx = FuzzySolidityParser.FunctionCallArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_functionCallArguments)
        self._la = 0 # Token type
        try:
            self.state = 1892
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [14]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1872
                self.match(FuzzySolidityParser.T__13)
                self.state = 1876
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 1873
                    self.match(FuzzySolidityParser.NL)
                    self.state = 1878
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1880
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((_la) & ~0x3f) == 0 and ((1 << _la) & 18016597549522944) != 0 or (((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & 6983778305) != 0:
                    self.state = 1879
                    self.nameValueList()


                self.state = 1882
                self.match(FuzzySolidityParser.T__15)
                self.state = 1886
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 1883
                    self.match(FuzzySolidityParser.NL)
                    self.state = 1888
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [4, 13, 22, 23, 24, 33, 35, 41, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 96, 98, 99, 100, 101, 102, 103, 104, 105, 107, 114, 118, 123, 125, 127, 128, 129]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1890
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la - 4)) & ~0x3f) == 0 and ((1 << (_la - 4)) & -289356135933935103) != 0 or (((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & 15707933693) != 0:
                    self.state = 1889
                    self.expressionList()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(FuzzySolidityParser.ExpressionContext,0)


        def functionCallArguments(self):
            return self.getTypedRuleContext(FuzzySolidityParser.FunctionCallArgumentsContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(FuzzySolidityParser.NL)
            else:
                return self.getToken(FuzzySolidityParser.NL, i)

        def getRuleIndex(self):
            return FuzzySolidityParser.RULE_functionCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCall" ):
                listener.enterFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCall" ):
                listener.exitFunctionCall(self)




    def functionCall(self):

        localctx = FuzzySolidityParser.FunctionCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_functionCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1894
            self.expression(0)
            self.state = 1895
            self.match(FuzzySolidityParser.T__21)
            self.state = 1899
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 1896
                self.match(FuzzySolidityParser.NL)
                self.state = 1901
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1902
            self.functionCallArguments()
            self.state = 1903
            self.match(FuzzySolidityParser.T__22)
            self.state = 1907
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,265,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1904
                    self.match(FuzzySolidityParser.NL) 
                self.state = 1909
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,265,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(FuzzySolidityParser.NL)
            else:
                return self.getToken(FuzzySolidityParser.NL, i)

        def assemblyItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FuzzySolidityParser.AssemblyItemContext)
            else:
                return self.getTypedRuleContext(FuzzySolidityParser.AssemblyItemContext,i)


        def getRuleIndex(self):
            return FuzzySolidityParser.RULE_assemblyBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyBlock" ):
                listener.enterAssemblyBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyBlock" ):
                listener.exitAssemblyBlock(self)




    def assemblyBlock(self):

        localctx = FuzzySolidityParser.AssemblyBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_assemblyBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1910
            self.match(FuzzySolidityParser.T__13)
            self.state = 1914
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 1911
                self.match(FuzzySolidityParser.NL)
                self.state = 1916
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1920
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((_la) & ~0x3f) == 0 and ((1 << _la) & 309066156482781184) != 0 or (((_la - 89)) & ~0x3f) == 0 and ((1 << (_la - 89)) & 1993454485645) != 0:
                self.state = 1917
                self.assemblyItem()
                self.state = 1922
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1923
            self.match(FuzzySolidityParser.T__15)
            self.state = 1927
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 1924
                self.match(FuzzySolidityParser.NL)
                self.state = 1929
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(FuzzySolidityParser.IdentifierContext,0)


        def assemblyBlock(self):
            return self.getTypedRuleContext(FuzzySolidityParser.AssemblyBlockContext,0)


        def assemblyExpression(self):
            return self.getTypedRuleContext(FuzzySolidityParser.AssemblyExpressionContext,0)


        def assemblyLocalDefinition(self):
            return self.getTypedRuleContext(FuzzySolidityParser.AssemblyLocalDefinitionContext,0)


        def assemblyAssignment(self):
            return self.getTypedRuleContext(FuzzySolidityParser.AssemblyAssignmentContext,0)


        def assemblyStackAssignment(self):
            return self.getTypedRuleContext(FuzzySolidityParser.AssemblyStackAssignmentContext,0)


        def labelDefinition(self):
            return self.getTypedRuleContext(FuzzySolidityParser.LabelDefinitionContext,0)


        def assemblySwitch(self):
            return self.getTypedRuleContext(FuzzySolidityParser.AssemblySwitchContext,0)


        def assemblyFunctionDefinition(self):
            return self.getTypedRuleContext(FuzzySolidityParser.AssemblyFunctionDefinitionContext,0)


        def assemblyFor(self):
            return self.getTypedRuleContext(FuzzySolidityParser.AssemblyForContext,0)


        def assemblyIf(self):
            return self.getTypedRuleContext(FuzzySolidityParser.AssemblyIfContext,0)


        def BreakKeyword(self):
            return self.getToken(FuzzySolidityParser.BreakKeyword, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(FuzzySolidityParser.NL)
            else:
                return self.getToken(FuzzySolidityParser.NL, i)

        def ContinueKeyword(self):
            return self.getToken(FuzzySolidityParser.ContinueKeyword, 0)

        def LeaveKeyword(self):
            return self.getToken(FuzzySolidityParser.LeaveKeyword, 0)

        def subAssembly(self):
            return self.getTypedRuleContext(FuzzySolidityParser.SubAssemblyContext,0)


        def numberLiteral(self):
            return self.getTypedRuleContext(FuzzySolidityParser.NumberLiteralContext,0)


        def stringLiteral(self):
            return self.getTypedRuleContext(FuzzySolidityParser.StringLiteralContext,0)


        def hexLiteral(self):
            return self.getTypedRuleContext(FuzzySolidityParser.HexLiteralContext,0)


        def getRuleIndex(self):
            return FuzzySolidityParser.RULE_assemblyItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyItem" ):
                listener.enterAssemblyItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyItem" ):
                listener.exitAssemblyItem(self)




    def assemblyItem(self):

        localctx = FuzzySolidityParser.AssemblyItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_assemblyItem)
        self._la = 0 # Token type
        try:
            self.state = 1966
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,272,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1930
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1931
                self.assemblyBlock()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1932
                self.assemblyExpression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1933
                self.assemblyLocalDefinition()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1934
                self.assemblyAssignment()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1935
                self.assemblyStackAssignment()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1936
                self.labelDefinition()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1937
                self.assemblySwitch()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1938
                self.assemblyFunctionDefinition()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1939
                self.assemblyFor()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1940
                self.assemblyIf()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1941
                self.match(FuzzySolidityParser.BreakKeyword)
                self.state = 1945
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 1942
                    self.match(FuzzySolidityParser.NL)
                    self.state = 1947
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1948
                self.match(FuzzySolidityParser.ContinueKeyword)
                self.state = 1952
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 1949
                    self.match(FuzzySolidityParser.NL)
                    self.state = 1954
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1955
                self.match(FuzzySolidityParser.LeaveKeyword)
                self.state = 1959
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 1956
                    self.match(FuzzySolidityParser.NL)
                    self.state = 1961
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1962
                self.subAssembly()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1963
                self.numberLiteral()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 1964
                self.stringLiteral()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 1965
                self.hexLiteral()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyCall(self):
            return self.getTypedRuleContext(FuzzySolidityParser.AssemblyCallContext,0)


        def assemblyLiteral(self):
            return self.getTypedRuleContext(FuzzySolidityParser.AssemblyLiteralContext,0)


        def assemblyMember(self):
            return self.getTypedRuleContext(FuzzySolidityParser.AssemblyMemberContext,0)


        def getRuleIndex(self):
            return FuzzySolidityParser.RULE_assemblyExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyExpression" ):
                listener.enterAssemblyExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyExpression" ):
                listener.exitAssemblyExpression(self)




    def assemblyExpression(self):

        localctx = FuzzySolidityParser.AssemblyExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_assemblyExpression)
        try:
            self.state = 1971
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,273,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1968
                self.assemblyCall()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1969
                self.assemblyLiteral()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1970
                self.assemblyMember()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FuzzySolidityParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(FuzzySolidityParser.IdentifierContext,i)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(FuzzySolidityParser.NL)
            else:
                return self.getToken(FuzzySolidityParser.NL, i)

        def getRuleIndex(self):
            return FuzzySolidityParser.RULE_assemblyMember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyMember" ):
                listener.enterAssemblyMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyMember" ):
                listener.exitAssemblyMember(self)




    def assemblyMember(self):

        localctx = FuzzySolidityParser.AssemblyMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_assemblyMember)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1973
            self.identifier()
            self.state = 1974
            self.match(FuzzySolidityParser.T__35)
            self.state = 1978
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 1975
                self.match(FuzzySolidityParser.NL)
                self.state = 1980
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1981
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(FuzzySolidityParser.IdentifierContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(FuzzySolidityParser.NL)
            else:
                return self.getToken(FuzzySolidityParser.NL, i)

        def assemblyExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FuzzySolidityParser.AssemblyExpressionContext)
            else:
                return self.getTypedRuleContext(FuzzySolidityParser.AssemblyExpressionContext,i)


        def getRuleIndex(self):
            return FuzzySolidityParser.RULE_assemblyCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyCall" ):
                listener.enterAssemblyCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyCall" ):
                listener.exitAssemblyCall(self)




    def assemblyCall(self):

        localctx = FuzzySolidityParser.AssemblyCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_assemblyCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2005
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [51]:
                self.state = 1983
                self.match(FuzzySolidityParser.T__50)
                self.state = 1987
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 1984
                    self.match(FuzzySolidityParser.NL)
                    self.state = 1989
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [35]:
                self.state = 1990
                self.match(FuzzySolidityParser.T__34)
                self.state = 1994
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 1991
                    self.match(FuzzySolidityParser.NL)
                    self.state = 1996
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [58]:
                self.state = 1997
                self.match(FuzzySolidityParser.T__57)
                self.state = 2001
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 1998
                    self.match(FuzzySolidityParser.NL)
                    self.state = 2003
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [13, 24, 41, 54, 96, 114, 118, 125, 127, 128]:
                self.state = 2004
                self.identifier()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2037
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,284,self._ctx)
            if la_ == 1:
                self.state = 2007
                self.match(FuzzySolidityParser.T__21)
                self.state = 2011
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 2008
                    self.match(FuzzySolidityParser.NL)
                    self.state = 2013
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2015
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((_la) & ~0x3f) == 0 and ((1 << _la) & 308498807874658304) != 0 or (((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & 15573715713) != 0:
                    self.state = 2014
                    self.assemblyExpression()


                self.state = 2027
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==15:
                    self.state = 2017
                    self.match(FuzzySolidityParser.T__14)
                    self.state = 2021
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==131:
                        self.state = 2018
                        self.match(FuzzySolidityParser.NL)
                        self.state = 2023
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2024
                    self.assemblyExpression()
                    self.state = 2029
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2030
                self.match(FuzzySolidityParser.T__22)
                self.state = 2034
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 2031
                    self.match(FuzzySolidityParser.NL)
                    self.state = 2036
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyLocalDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyIdentifierOrList(self):
            return self.getTypedRuleContext(FuzzySolidityParser.AssemblyIdentifierOrListContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(FuzzySolidityParser.NL)
            else:
                return self.getToken(FuzzySolidityParser.NL, i)

        def assemblyExpression(self):
            return self.getTypedRuleContext(FuzzySolidityParser.AssemblyExpressionContext,0)


        def getRuleIndex(self):
            return FuzzySolidityParser.RULE_assemblyLocalDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyLocalDefinition" ):
                listener.enterAssemblyLocalDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyLocalDefinition" ):
                listener.exitAssemblyLocalDefinition(self)




    def assemblyLocalDefinition(self):

        localctx = FuzzySolidityParser.AssemblyLocalDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_assemblyLocalDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2039
            self.match(FuzzySolidityParser.T__88)
            self.state = 2043
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 2040
                self.match(FuzzySolidityParser.NL)
                self.state = 2045
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2046
            self.assemblyIdentifierOrList()
            self.state = 2055
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==90:
                self.state = 2047
                self.match(FuzzySolidityParser.T__89)
                self.state = 2051
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 2048
                    self.match(FuzzySolidityParser.NL)
                    self.state = 2053
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2054
                self.assemblyExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyAssignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyIdentifierOrList(self):
            return self.getTypedRuleContext(FuzzySolidityParser.AssemblyIdentifierOrListContext,0)


        def assemblyExpression(self):
            return self.getTypedRuleContext(FuzzySolidityParser.AssemblyExpressionContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(FuzzySolidityParser.NL)
            else:
                return self.getToken(FuzzySolidityParser.NL, i)

        def getRuleIndex(self):
            return FuzzySolidityParser.RULE_assemblyAssignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyAssignment" ):
                listener.enterAssemblyAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyAssignment" ):
                listener.exitAssemblyAssignment(self)




    def assemblyAssignment(self):

        localctx = FuzzySolidityParser.AssemblyAssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_assemblyAssignment)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2057
            self.assemblyIdentifierOrList()
            self.state = 2058
            self.match(FuzzySolidityParser.T__89)
            self.state = 2062
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 2059
                self.match(FuzzySolidityParser.NL)
                self.state = 2064
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2065
            self.assemblyExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyIdentifierOrListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(FuzzySolidityParser.IdentifierContext,0)


        def assemblyMember(self):
            return self.getTypedRuleContext(FuzzySolidityParser.AssemblyMemberContext,0)


        def assemblyIdentifierList(self):
            return self.getTypedRuleContext(FuzzySolidityParser.AssemblyIdentifierListContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(FuzzySolidityParser.NL)
            else:
                return self.getToken(FuzzySolidityParser.NL, i)

        def getRuleIndex(self):
            return FuzzySolidityParser.RULE_assemblyIdentifierOrList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyIdentifierOrList" ):
                listener.enterAssemblyIdentifierOrList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyIdentifierOrList" ):
                listener.exitAssemblyIdentifierOrList(self)




    def assemblyIdentifierOrList(self):

        localctx = FuzzySolidityParser.AssemblyIdentifierOrListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_assemblyIdentifierOrList)
        self._la = 0 # Token type
        try:
            self.state = 2084
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,291,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2067
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2068
                self.assemblyMember()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2069
                self.match(FuzzySolidityParser.T__21)
                self.state = 2073
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 2070
                    self.match(FuzzySolidityParser.NL)
                    self.state = 2075
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2076
                self.assemblyIdentifierList()
                self.state = 2077
                self.match(FuzzySolidityParser.T__22)
                self.state = 2081
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 2078
                    self.match(FuzzySolidityParser.NL)
                    self.state = 2083
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyIdentifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FuzzySolidityParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(FuzzySolidityParser.IdentifierContext,i)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(FuzzySolidityParser.NL)
            else:
                return self.getToken(FuzzySolidityParser.NL, i)

        def getRuleIndex(self):
            return FuzzySolidityParser.RULE_assemblyIdentifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyIdentifierList" ):
                listener.enterAssemblyIdentifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyIdentifierList" ):
                listener.exitAssemblyIdentifierList(self)




    def assemblyIdentifierList(self):

        localctx = FuzzySolidityParser.AssemblyIdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_assemblyIdentifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2086
            self.identifier()
            self.state = 2097
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==15:
                self.state = 2087
                self.match(FuzzySolidityParser.T__14)
                self.state = 2091
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 2088
                    self.match(FuzzySolidityParser.NL)
                    self.state = 2093
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2094
                self.identifier()
                self.state = 2099
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyStackAssignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(FuzzySolidityParser.IdentifierContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(FuzzySolidityParser.NL)
            else:
                return self.getToken(FuzzySolidityParser.NL, i)

        def getRuleIndex(self):
            return FuzzySolidityParser.RULE_assemblyStackAssignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyStackAssignment" ):
                listener.enterAssemblyStackAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyStackAssignment" ):
                listener.exitAssemblyStackAssignment(self)




    def assemblyStackAssignment(self):

        localctx = FuzzySolidityParser.AssemblyStackAssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_assemblyStackAssignment)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2100
            self.match(FuzzySolidityParser.T__90)
            self.state = 2104
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 2101
                self.match(FuzzySolidityParser.NL)
                self.state = 2106
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2107
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabelDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(FuzzySolidityParser.IdentifierContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(FuzzySolidityParser.NL)
            else:
                return self.getToken(FuzzySolidityParser.NL, i)

        def getRuleIndex(self):
            return FuzzySolidityParser.RULE_labelDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabelDefinition" ):
                listener.enterLabelDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabelDefinition" ):
                listener.exitLabelDefinition(self)




    def labelDefinition(self):

        localctx = FuzzySolidityParser.LabelDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_labelDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2109
            self.identifier()
            self.state = 2110
            self.match(FuzzySolidityParser.T__61)
            self.state = 2114
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 2111
                self.match(FuzzySolidityParser.NL)
                self.state = 2116
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblySwitchContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyExpression(self):
            return self.getTypedRuleContext(FuzzySolidityParser.AssemblyExpressionContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(FuzzySolidityParser.NL)
            else:
                return self.getToken(FuzzySolidityParser.NL, i)

        def assemblyCase(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FuzzySolidityParser.AssemblyCaseContext)
            else:
                return self.getTypedRuleContext(FuzzySolidityParser.AssemblyCaseContext,i)


        def getRuleIndex(self):
            return FuzzySolidityParser.RULE_assemblySwitch

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblySwitch" ):
                listener.enterAssemblySwitch(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblySwitch" ):
                listener.exitAssemblySwitch(self)




    def assemblySwitch(self):

        localctx = FuzzySolidityParser.AssemblySwitchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_assemblySwitch)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2117
            self.match(FuzzySolidityParser.T__91)
            self.state = 2121
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 2118
                self.match(FuzzySolidityParser.NL)
                self.state = 2123
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2124
            self.assemblyExpression()
            self.state = 2128
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==93 or _la==94:
                self.state = 2125
                self.assemblyCase()
                self.state = 2130
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyCaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyLiteral(self):
            return self.getTypedRuleContext(FuzzySolidityParser.AssemblyLiteralContext,0)


        def assemblyBlock(self):
            return self.getTypedRuleContext(FuzzySolidityParser.AssemblyBlockContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(FuzzySolidityParser.NL)
            else:
                return self.getToken(FuzzySolidityParser.NL, i)

        def getRuleIndex(self):
            return FuzzySolidityParser.RULE_assemblyCase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyCase" ):
                listener.enterAssemblyCase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyCase" ):
                listener.exitAssemblyCase(self)




    def assemblyCase(self):

        localctx = FuzzySolidityParser.AssemblyCaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_assemblyCase)
        self._la = 0 # Token type
        try:
            self.state = 2149
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [93]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2131
                self.match(FuzzySolidityParser.T__92)
                self.state = 2135
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 2132
                    self.match(FuzzySolidityParser.NL)
                    self.state = 2137
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2138
                self.assemblyLiteral()
                self.state = 2139
                self.assemblyBlock()
                pass
            elif token in [94]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2141
                self.match(FuzzySolidityParser.T__93)
                self.state = 2145
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 2142
                    self.match(FuzzySolidityParser.NL)
                    self.state = 2147
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2148
                self.assemblyBlock()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyFunctionDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(FuzzySolidityParser.IdentifierContext,0)


        def assemblyBlock(self):
            return self.getTypedRuleContext(FuzzySolidityParser.AssemblyBlockContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(FuzzySolidityParser.NL)
            else:
                return self.getToken(FuzzySolidityParser.NL, i)

        def assemblyIdentifierList(self):
            return self.getTypedRuleContext(FuzzySolidityParser.AssemblyIdentifierListContext,0)


        def assemblyFunctionReturns(self):
            return self.getTypedRuleContext(FuzzySolidityParser.AssemblyFunctionReturnsContext,0)


        def getRuleIndex(self):
            return FuzzySolidityParser.RULE_assemblyFunctionDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyFunctionDefinition" ):
                listener.enterAssemblyFunctionDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyFunctionDefinition" ):
                listener.exitAssemblyFunctionDefinition(self)




    def assemblyFunctionDefinition(self):

        localctx = FuzzySolidityParser.AssemblyFunctionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_assemblyFunctionDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2151
            self.match(FuzzySolidityParser.T__28)
            self.state = 2155
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 2152
                self.match(FuzzySolidityParser.NL)
                self.state = 2157
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2158
            self.identifier()
            self.state = 2159
            self.match(FuzzySolidityParser.T__21)
            self.state = 2163
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 2160
                self.match(FuzzySolidityParser.NL)
                self.state = 2165
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2167
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 18016597549522944) != 0 or (((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & 6983778305) != 0:
                self.state = 2166
                self.assemblyIdentifierList()


            self.state = 2169
            self.match(FuzzySolidityParser.T__22)
            self.state = 2173
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 2170
                self.match(FuzzySolidityParser.NL)
                self.state = 2175
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2177
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==95:
                self.state = 2176
                self.assemblyFunctionReturns()


            self.state = 2179
            self.assemblyBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyFunctionReturnsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyIdentifierList(self):
            return self.getTypedRuleContext(FuzzySolidityParser.AssemblyIdentifierListContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(FuzzySolidityParser.NL)
            else:
                return self.getToken(FuzzySolidityParser.NL, i)

        def getRuleIndex(self):
            return FuzzySolidityParser.RULE_assemblyFunctionReturns

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyFunctionReturns" ):
                listener.enterAssemblyFunctionReturns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyFunctionReturns" ):
                listener.exitAssemblyFunctionReturns(self)




    def assemblyFunctionReturns(self):

        localctx = FuzzySolidityParser.AssemblyFunctionReturnsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_assemblyFunctionReturns)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2181
            self.match(FuzzySolidityParser.T__94)
            self.state = 2185
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 2182
                self.match(FuzzySolidityParser.NL)
                self.state = 2187
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2188
            self.assemblyIdentifierList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyForContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FuzzySolidityParser.AssemblyExpressionContext)
            else:
                return self.getTypedRuleContext(FuzzySolidityParser.AssemblyExpressionContext,i)


        def assemblyBlock(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FuzzySolidityParser.AssemblyBlockContext)
            else:
                return self.getTypedRuleContext(FuzzySolidityParser.AssemblyBlockContext,i)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(FuzzySolidityParser.NL)
            else:
                return self.getToken(FuzzySolidityParser.NL, i)

        def getRuleIndex(self):
            return FuzzySolidityParser.RULE_assemblyFor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyFor" ):
                listener.enterAssemblyFor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyFor" ):
                listener.exitAssemblyFor(self)




    def assemblyFor(self):

        localctx = FuzzySolidityParser.AssemblyForContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_assemblyFor)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2190
            self.match(FuzzySolidityParser.T__25)
            self.state = 2194
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 2191
                self.match(FuzzySolidityParser.NL)
                self.state = 2196
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2199
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [14]:
                self.state = 2197
                self.assemblyBlock()
                pass
            elif token in [13, 24, 35, 41, 51, 54, 58, 96, 104, 105, 107, 114, 118, 125, 127, 128, 129]:
                self.state = 2198
                self.assemblyExpression()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2201
            self.assemblyExpression()
            self.state = 2204
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [14]:
                self.state = 2202
                self.assemblyBlock()
                pass
            elif token in [13, 24, 35, 41, 51, 54, 58, 96, 104, 105, 107, 114, 118, 125, 127, 128, 129]:
                self.state = 2203
                self.assemblyExpression()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2206
            self.assemblyBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyIfContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyExpression(self):
            return self.getTypedRuleContext(FuzzySolidityParser.AssemblyExpressionContext,0)


        def assemblyBlock(self):
            return self.getTypedRuleContext(FuzzySolidityParser.AssemblyBlockContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(FuzzySolidityParser.NL)
            else:
                return self.getToken(FuzzySolidityParser.NL, i)

        def getRuleIndex(self):
            return FuzzySolidityParser.RULE_assemblyIf

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyIf" ):
                listener.enterAssemblyIf(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyIf" ):
                listener.exitAssemblyIf(self)




    def assemblyIf(self):

        localctx = FuzzySolidityParser.AssemblyIfContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_assemblyIf)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2208
            self.match(FuzzySolidityParser.T__41)
            self.state = 2212
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 2209
                self.match(FuzzySolidityParser.NL)
                self.state = 2214
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2215
            self.assemblyExpression()
            self.state = 2216
            self.assemblyBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stringLiteral(self):
            return self.getTypedRuleContext(FuzzySolidityParser.StringLiteralContext,0)


        def DecimalNumber(self):
            return self.getToken(FuzzySolidityParser.DecimalNumber, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(FuzzySolidityParser.NL)
            else:
                return self.getToken(FuzzySolidityParser.NL, i)

        def HexNumber(self):
            return self.getToken(FuzzySolidityParser.HexNumber, 0)

        def hexLiteral(self):
            return self.getTypedRuleContext(FuzzySolidityParser.HexLiteralContext,0)


        def getRuleIndex(self):
            return FuzzySolidityParser.RULE_assemblyLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyLiteral" ):
                listener.enterAssemblyLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyLiteral" ):
                listener.exitAssemblyLiteral(self)




    def assemblyLiteral(self):

        localctx = FuzzySolidityParser.AssemblyLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_assemblyLiteral)
        self._la = 0 # Token type
        try:
            self.state = 2234
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [129]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2218
                self.stringLiteral()
                pass
            elif token in [104]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2219
                self.match(FuzzySolidityParser.DecimalNumber)
                self.state = 2223
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 2220
                    self.match(FuzzySolidityParser.NL)
                    self.state = 2225
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [105]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2226
                self.match(FuzzySolidityParser.HexNumber)
                self.state = 2230
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 2227
                    self.match(FuzzySolidityParser.NL)
                    self.state = 2232
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [107]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2233
                self.hexLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubAssemblyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(FuzzySolidityParser.IdentifierContext,0)


        def assemblyBlock(self):
            return self.getTypedRuleContext(FuzzySolidityParser.AssemblyBlockContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(FuzzySolidityParser.NL)
            else:
                return self.getToken(FuzzySolidityParser.NL, i)

        def getRuleIndex(self):
            return FuzzySolidityParser.RULE_subAssembly

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubAssembly" ):
                listener.enterSubAssembly(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubAssembly" ):
                listener.exitSubAssembly(self)




    def subAssembly(self):

        localctx = FuzzySolidityParser.SubAssemblyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_subAssembly)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2236
            self.match(FuzzySolidityParser.T__48)
            self.state = 2240
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 2237
                self.match(FuzzySolidityParser.NL)
                self.state = 2242
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2243
            self.identifier()
            self.state = 2244
            self.assemblyBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TupleExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(FuzzySolidityParser.NL)
            else:
                return self.getToken(FuzzySolidityParser.NL, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FuzzySolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(FuzzySolidityParser.ExpressionContext,i)


        def getRuleIndex(self):
            return FuzzySolidityParser.RULE_tupleExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTupleExpression" ):
                listener.enterTupleExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTupleExpression" ):
                listener.exitTupleExpression(self)




    def tupleExpression(self):

        localctx = FuzzySolidityParser.TupleExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_tupleExpression)
        self._la = 0 # Token type
        try:
            self.state = 2308
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [22]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2246
                self.match(FuzzySolidityParser.T__21)
                self.state = 2250
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 2247
                    self.match(FuzzySolidityParser.NL)
                    self.state = 2252
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2254
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la - 4)) & ~0x3f) == 0 and ((1 << (_la - 4)) & -289356135933935103) != 0 or (((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & 15707933693) != 0:
                    self.state = 2253
                    self.expression(0)


                self.state = 2268
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==15:
                    self.state = 2256
                    self.match(FuzzySolidityParser.T__14)
                    self.state = 2260
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==131:
                        self.state = 2257
                        self.match(FuzzySolidityParser.NL)
                        self.state = 2262
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2264
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la - 4)) & ~0x3f) == 0 and ((1 << (_la - 4)) & -289356135933935103) != 0 or (((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & 15707933693) != 0:
                        self.state = 2263
                        self.expression(0)


                    self.state = 2270
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2271
                self.match(FuzzySolidityParser.T__22)
                self.state = 2275
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,320,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2272
                        self.match(FuzzySolidityParser.NL) 
                    self.state = 2277
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,320,self._ctx)

                pass
            elif token in [33]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2278
                self.match(FuzzySolidityParser.T__32)
                self.state = 2282
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 2279
                    self.match(FuzzySolidityParser.NL)
                    self.state = 2284
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2299
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la - 4)) & ~0x3f) == 0 and ((1 << (_la - 4)) & -289356135933935103) != 0 or (((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & 15707933693) != 0:
                    self.state = 2285
                    self.expression(0)
                    self.state = 2296
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==15:
                        self.state = 2286
                        self.match(FuzzySolidityParser.T__14)
                        self.state = 2290
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==131:
                            self.state = 2287
                            self.match(FuzzySolidityParser.NL)
                            self.state = 2292
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 2293
                        self.expression(0)
                        self.state = 2298
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 2301
                self.match(FuzzySolidityParser.T__33)
                self.state = 2305
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,325,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2302
                        self.match(FuzzySolidityParser.NL) 
                    self.state = 2307
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,325,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeNameExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elementaryTypeName(self):
            return self.getTypedRuleContext(FuzzySolidityParser.ElementaryTypeNameContext,0)


        def userDefinedTypeName(self):
            return self.getTypedRuleContext(FuzzySolidityParser.UserDefinedTypeNameContext,0)


        def getRuleIndex(self):
            return FuzzySolidityParser.RULE_typeNameExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeNameExpression" ):
                listener.enterTypeNameExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeNameExpression" ):
                listener.exitTypeNameExpression(self)




    def typeNameExpression(self):

        localctx = FuzzySolidityParser.TypeNameExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_typeNameExpression)
        try:
            self.state = 2312
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [35, 55, 56, 57, 58, 98, 99, 100, 101, 102]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2310
                self.elementaryTypeName()
                pass
            elif token in [13, 24, 41, 54, 96, 114, 118, 125, 127, 128]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2311
                self.userDefinedTypeName()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumberLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DecimalNumber(self):
            return self.getToken(FuzzySolidityParser.DecimalNumber, 0)

        def HexNumber(self):
            return self.getToken(FuzzySolidityParser.HexNumber, 0)

        def NumberUnit(self):
            return self.getToken(FuzzySolidityParser.NumberUnit, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(FuzzySolidityParser.NL)
            else:
                return self.getToken(FuzzySolidityParser.NL, i)

        def getRuleIndex(self):
            return FuzzySolidityParser.RULE_numberLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumberLiteral" ):
                listener.enterNumberLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumberLiteral" ):
                listener.exitNumberLiteral(self)




    def numberLiteral(self):

        localctx = FuzzySolidityParser.NumberLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_numberLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2328
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [104]:
                self.state = 2314
                self.match(FuzzySolidityParser.DecimalNumber)
                self.state = 2318
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,328,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2315
                        self.match(FuzzySolidityParser.NL) 
                    self.state = 2320
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,328,self._ctx)

                pass
            elif token in [105]:
                self.state = 2321
                self.match(FuzzySolidityParser.HexNumber)
                self.state = 2325
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,329,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2322
                        self.match(FuzzySolidityParser.NL) 
                    self.state = 2327
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,329,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

            self.state = 2337
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,332,self._ctx)
            if la_ == 1:
                self.state = 2330
                self.match(FuzzySolidityParser.NumberUnit)
                self.state = 2334
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,331,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2331
                        self.match(FuzzySolidityParser.NL) 
                    self.state = 2336
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,331,self._ctx)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ReceiveKeyword(self):
            return self.getToken(FuzzySolidityParser.ReceiveKeyword, 0)

        def ConstructorKeyword(self):
            return self.getToken(FuzzySolidityParser.ConstructorKeyword, 0)

        def PayableKeyword(self):
            return self.getToken(FuzzySolidityParser.PayableKeyword, 0)

        def LeaveKeyword(self):
            return self.getToken(FuzzySolidityParser.LeaveKeyword, 0)

        def Identifier(self):
            return self.getToken(FuzzySolidityParser.Identifier, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(FuzzySolidityParser.NL)
            else:
                return self.getToken(FuzzySolidityParser.NL, i)

        def getRuleIndex(self):
            return FuzzySolidityParser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)




    def identifier(self):

        localctx = FuzzySolidityParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_identifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2339
            _la = self._input.LA(1)
            if not(((_la) & ~0x3f) == 0 and ((1 << _la) & 18016597549522944) != 0 or (((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & 6983778305) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2343
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,333,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2340
                    self.match(FuzzySolidityParser.NL) 
                self.state = 2345
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,333,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HexLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HexLiteralFragment(self, i:int=None):
            if i is None:
                return self.getTokens(FuzzySolidityParser.HexLiteralFragment)
            else:
                return self.getToken(FuzzySolidityParser.HexLiteralFragment, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(FuzzySolidityParser.NL)
            else:
                return self.getToken(FuzzySolidityParser.NL, i)

        def getRuleIndex(self):
            return FuzzySolidityParser.RULE_hexLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHexLiteral" ):
                listener.enterHexLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHexLiteral" ):
                listener.exitHexLiteral(self)




    def hexLiteral(self):

        localctx = FuzzySolidityParser.HexLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_hexLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2353 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2346
                    self.match(FuzzySolidityParser.HexLiteralFragment)
                    self.state = 2350
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,334,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 2347
                            self.match(FuzzySolidityParser.NL) 
                        self.state = 2352
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,334,self._ctx)


                else:
                    raise NoViableAltException(self)
                self.state = 2355 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,335,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OverrideSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(FuzzySolidityParser.NL)
            else:
                return self.getToken(FuzzySolidityParser.NL, i)

        def userDefinedTypeName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FuzzySolidityParser.UserDefinedTypeNameContext)
            else:
                return self.getTypedRuleContext(FuzzySolidityParser.UserDefinedTypeNameContext,i)


        def getRuleIndex(self):
            return FuzzySolidityParser.RULE_overrideSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOverrideSpecifier" ):
                listener.enterOverrideSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOverrideSpecifier" ):
                listener.exitOverrideSpecifier(self)




    def overrideSpecifier(self):

        localctx = FuzzySolidityParser.OverrideSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_overrideSpecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2357
            self.match(FuzzySolidityParser.T__96)
            self.state = 2361
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,336,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2358
                    self.match(FuzzySolidityParser.NL) 
                self.state = 2363
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,336,self._ctx)

            self.state = 2392
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==22:
                self.state = 2364
                self.match(FuzzySolidityParser.T__21)
                self.state = 2368
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 2365
                    self.match(FuzzySolidityParser.NL)
                    self.state = 2370
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2371
                self.userDefinedTypeName()
                self.state = 2382
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==15:
                    self.state = 2372
                    self.match(FuzzySolidityParser.T__14)
                    self.state = 2376
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==131:
                        self.state = 2373
                        self.match(FuzzySolidityParser.NL)
                        self.state = 2378
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2379
                    self.userDefinedTypeName()
                    self.state = 2384
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2385
                self.match(FuzzySolidityParser.T__22)
                self.state = 2389
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,340,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2386
                        self.match(FuzzySolidityParser.NL) 
                    self.state = 2391
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,340,self._ctx)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLiteralFragment(self, i:int=None):
            if i is None:
                return self.getTokens(FuzzySolidityParser.StringLiteralFragment)
            else:
                return self.getToken(FuzzySolidityParser.StringLiteralFragment, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(FuzzySolidityParser.NL)
            else:
                return self.getToken(FuzzySolidityParser.NL, i)

        def getRuleIndex(self):
            return FuzzySolidityParser.RULE_stringLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringLiteral" ):
                listener.enterStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringLiteral" ):
                listener.exitStringLiteral(self)




    def stringLiteral(self):

        localctx = FuzzySolidityParser.StringLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_stringLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2401 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2394
                    self.match(FuzzySolidityParser.StringLiteralFragment)
                    self.state = 2398
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,342,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 2395
                            self.match(FuzzySolidityParser.NL) 
                        self.state = 2400
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,342,self._ctx)


                else:
                    raise NoViableAltException(self)
                self.state = 2403 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,343,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EosContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(FuzzySolidityParser.NL)
            else:
                return self.getToken(FuzzySolidityParser.NL, i)

        def getRuleIndex(self):
            return FuzzySolidityParser.RULE_eos

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEos" ):
                listener.enterEos(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEos" ):
                listener.exitEos(self)




    def eos(self):

        localctx = FuzzySolidityParser.EosContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_eos)
        self._la = 0 # Token type
        try:
            self.state = 2417
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [48]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2405
                self.match(FuzzySolidityParser.T__47)
                self.state = 2409
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==131:
                    self.state = 2406
                    self.match(FuzzySolidityParser.NL)
                    self.state = 2411
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [131]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2413 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2412
                    self.match(FuzzySolidityParser.NL)
                    self.state = 2415 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==131):
                        break

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[34] = self.typeName_sempred
        self._predicates[63] = self.expression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def typeName_sempred(self, localctx:TypeNameContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 3)
         

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 13)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 27)
         

            if predIndex == 15:
                return self.precpred(self._ctx, 25)
         

            if predIndex == 16:
                return self.precpred(self._ctx, 24)
         

            if predIndex == 17:
                return self.precpred(self._ctx, 23)
         

            if predIndex == 18:
                return self.precpred(self._ctx, 22)
         

            if predIndex == 19:
                return self.precpred(self._ctx, 21)
         




