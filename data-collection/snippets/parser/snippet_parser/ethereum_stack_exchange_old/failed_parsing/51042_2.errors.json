{
    "mismatched input 'Transaction' expecting {';', NL}": [
        "ERROR: when parsing line 19 column 4: mismatched input 'Transaction' expecting {';', NL}\n"
    ],
    "mismatched input 'and' expecting {'=', ';', NL}": [
        "ERROR: when parsing line 19 column 22: mismatched input 'and' expecting {'=', ';', NL}\n"
    ],
    "extraneous input 'succeed' expecting {'=', ';', NL}": [
        "ERROR: when parsing line 19 column 36: extraneous input 'succeed' expecting {'=', ';', NL}\n"
    ],
    "extraneous input '{' expecting {'=', ';', NL}": [
        "ERROR: when parsing line 20 column 16: extraneous input '{' expecting {'=', ';', NL}\n",
        "ERROR: when parsing line 23 column 20: extraneous input '{' expecting {'=', ';', NL}\n"
    ],
    "mismatched input ':' expecting {';', NL}": [
        "ERROR: when parsing line 21 column 19: mismatched input ':' expecting {';', NL}\n",
        "ERROR: when parsing line 24 column 7: mismatched input ':' expecting {';', NL}\n"
    ],
    "extraneous input '}' expecting {';', NL}": [
        "ERROR: when parsing line 22 column 0: extraneous input '}' expecting {';', NL}\n"
    ],
    "no viable alternative at input '\\n}'": [
        "ERROR: when parsing line 25 column 0: no viable alternative at input '\\n}'\n"
    ],
    "extraneous input '}' expecting {<EOF>, 'pragma', '~', 'import', 'from', 'abstract', 'contract', 'interface', 'library', '(', 'error', 'struct', 'function', 'enum', '[', 'address', 'mapping', 'calldata', 'revert', 'var', 'bool', 'string', 'byte', '++', '--', 'new', '+', '-', 'after', 'delete', '!', 'callback', Int, Uint, Byte, Fixed, Ufixed, BooleanLiteral, DecimalNumber, HexNumber, HexLiteralFragment, 'leave', 'payable', 'type', 'constructor', 'fallback', 'receive', Identifier, StringLiteralFragment}": [
        "ERROR: when parsing line 25 column 0: extraneous input '}' expecting {<EOF>, 'pragma', '~', 'import', 'from', 'abstract', 'contract', 'interface', 'library', '(', 'error', 'struct', 'function', 'enum', '[', 'address', 'mapping', 'calldata', 'revert', 'var', 'bool', 'string', 'byte', '++', '--', 'new', '+', '-', 'after', 'delete', '!', 'callback', Int, Uint, Byte, Fixed, Ufixed, BooleanLiteral, DecimalNumber, HexNumber, HexLiteralFragment, 'leave', 'payable', 'type', 'constructor', 'fallback', 'receive', Identifier, StringLiteralFragment}\n"
    ]
}