{
    "mismatched input '(' expecting {';', NL}": [
        "ERROR: when parsing line 1 column 2: mismatched input '(' expecting {';', NL}\n",
        "ERROR: when parsing line 2 column 3: mismatched input '(' expecting {';', NL}\n"
    ],
    "mismatched input 'good' expecting {'=', ';', NL}": [
        "ERROR: when parsing line 1 column 15: mismatched input 'good' expecting {'=', ';', NL}\n"
    ],
    "mismatched input 'the' expecting {'=', ';', NL}": [
        "ERROR: when parsing line 1 column 23: mismatched input 'the' expecting {'=', ';', NL}\n",
        "ERROR: when parsing line 1 column 96: mismatched input 'the' expecting {'=', ';', NL}\n",
        "ERROR: when parsing line 2 column 24: mismatched input 'the' expecting {'=', ';', NL}\n",
        "ERROR: when parsing line 2 column 84: mismatched input 'the' expecting {'=', ';', NL}\n"
    ],
    "mismatched input '-' expecting {'=', ';', NL}": [
        "ERROR: when parsing line 1 column 34: mismatched input '-' expecting {'=', ';', NL}\n",
        "ERROR: when parsing line 1 column 51: mismatched input '-' expecting {'=', ';', NL}\n",
        "ERROR: when parsing line 2 column 35: mismatched input '-' expecting {'=', ';', NL}\n"
    ],
    "mismatched input 'same' expecting {';', NL}": [
        "ERROR: when parsing line 1 column 40: mismatched input 'same' expecting {';', NL}\n"
    ],
    "mismatched input 'good' expecting {';', NL}": [
        "ERROR: when parsing line 1 column 57: mismatched input 'good' expecting {';', NL}\n",
        "ERROR: when parsing line 2 column 41: mismatched input 'good' expecting {';', NL}\n"
    ],
    "mismatched input 'two' expecting {'=', ';', NL}": [
        "ERROR: when parsing line 1 column 67: mismatched input 'two' expecting {'=', ';', NL}\n"
    ],
    "mismatched input 'is' expecting {'=', ';', NL}": [
        "ERROR: when parsing line 1 column 80: mismatched input 'is' expecting {'=', ';', NL}\n"
    ],
    "mismatched input ',' expecting {'=', ';', NL}": [
        "ERROR: when parsing line 1 column 107: mismatched input ',' expecting {'=', ';', NL}\n",
        "ERROR: when parsing line 2 column 95: mismatched input ',' expecting {'=', ';', NL}\n"
    ],
    "mismatched input 'good' expecting ')'": [
        "ERROR: when parsing line 2 column 16: mismatched input 'good' expecting ')'\n"
    ],
    "mismatched input 'on' expecting {'=', ';', NL}": [
        "ERROR: when parsing line 2 column 56: mismatched input 'on' expecting {'=', ';', NL}\n"
    ],
    "mismatched input 'market' expecting {'=', ';', NL}": [
        "ERROR: when parsing line 2 column 63: mismatched input 'market' expecting {'=', ';', NL}\n"
    ],
    "mismatched input 'goods' expecting {';', NL}": [
        "ERROR: when parsing line 2 column 75: mismatched input 'goods' expecting {';', NL}\n"
    ],
    "mismatched input '{' expecting {'from', 'error', 'memory', 'storage', 'calldata', 'revert', 'callback', 'leave', 'payable', 'constructor', 'receive', Identifier}": [
        "ERROR: when parsing line 2 column 108: mismatched input '{' expecting {'from', 'error', 'memory', 'storage', 'calldata', 'revert', 'callback', 'leave', 'payable', 'constructor', 'receive', Identifier}\n"
    ],
    "mismatched input '<EOF>' expecting {'~', 'from', '{', '}', '(', 'error', 'for', 'function', '[', 'address', 'mapping', 'calldata', 'if', 'try', 'while', 'unchecked', 'assembly', 'do', 'return', 'throw', 'emit', 'revert', 'var', 'bool', 'string', 'byte', '++', '--', 'new', '+', '-', 'after', 'delete', '!', 'callback', Int, Uint, Byte, Fixed, Ufixed, BooleanLiteral, DecimalNumber, HexNumber, HexLiteralFragment, 'break', 'continue', 'leave', 'payable', 'type', 'constructor', 'receive', Identifier, StringLiteralFragment}": [
        "ERROR: when parsing line 3 column 0: mismatched input '<EOF>' expecting {'~', 'from', '{', '}', '(', 'error', 'for', 'function', '[', 'address', 'mapping', 'calldata', 'if', 'try', 'while', 'unchecked', 'assembly', 'do', 'return', 'throw', 'emit', 'revert', 'var', 'bool', 'string', 'byte', '++', '--', 'new', '+', '-', 'after', 'delete', '!', 'callback', Int, Uint, Byte, Fixed, Ufixed, BooleanLiteral, DecimalNumber, HexNumber, HexLiteralFragment, 'break', 'continue', 'leave', 'payable', 'type', 'constructor', 'receive', Identifier, StringLiteralFragment}\n"
    ]
}