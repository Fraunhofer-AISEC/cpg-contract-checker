{
    "mismatched input 'TB' expecting {';', NL}": [
        "ERROR: when parsing line 1 column 1: mismatched input 'TB' expecting {';', NL}\n"
    ],
    "mismatched input 'bytes' expecting {';', NL}": [
        "ERROR: when parsing line 1 column 9: mismatched input 'bytes' expecting {';', NL}\n"
    ],
    "mismatched input ',' expecting {';', NL}": [
        "ERROR: when parsing line 1 column 19: mismatched input ',' expecting {';', NL}\n",
        "ERROR: when parsing line 1 column 23: mismatched input ',' expecting {';', NL}\n",
        "ERROR: when parsing line 1 column 27: mismatched input ',' expecting {';', NL}\n",
        "ERROR: when parsing line 3 column 2: mismatched input ',' expecting {';', NL}\n",
        "ERROR: when parsing line 3 column 6: mismatched input ',' expecting {';', NL}\n",
        "ERROR: when parsing line 3 column 10: mismatched input ',' expecting {';', NL}\n",
        "ERROR: when parsing line 3 column 19: mismatched input ',' expecting {';', NL}\n",
        "ERROR: when parsing line 3 column 46: mismatched input ',' expecting {';', NL}\n"
    ],
    "mismatched input '31' expecting {';', NL}": [
        "ERROR: when parsing line 3 column 0: mismatched input '31' expecting {';', NL}\n"
    ],
    "mismatched input 'gas' expecting {';', NL}": [
        "ERROR: when parsing line 3 column 24: mismatched input 'gas' expecting {';', NL}\n"
    ],
    "mismatched input 'ether' expecting {'~', 'from', '(', 'error', '[', 'address', 'calldata', 'revert', 'var', 'bool', 'string', 'byte', '++', '--', 'new', '+', '-', 'after', 'delete', '!', 'callback', Int, Uint, Byte, Fixed, Ufixed, BooleanLiteral, DecimalNumber, HexNumber, HexLiteralFragment, 'leave', 'payable', 'type', 'constructor', 'receive', Identifier, StringLiteralFragment, NL}": [
        "ERROR: when parsing line 3 column 64: mismatched input 'ether' expecting {'~', 'from', '(', 'error', '[', 'address', 'calldata', 'revert', 'var', 'bool', 'string', 'byte', '++', '--', 'new', '+', '-', 'after', 'delete', '!', 'callback', Int, Uint, Byte, Fixed, Ufixed, BooleanLiteral, DecimalNumber, HexNumber, HexLiteralFragment, 'leave', 'payable', 'type', 'constructor', 'receive', Identifier, StringLiteralFragment, NL}\n"
    ]
}