{
    "mismatched input 'the' expecting {'=', ';', NL}": [
        "ERROR: when parsing line 50 column 12: mismatched input 'the' expecting {'=', ';', NL}\n"
    ],
    "extraneous input 'amount' expecting {'=', ';', NL}": [
        "ERROR: when parsing line 50 column 24: extraneous input 'amount' expecting {'=', ';', NL}\n"
    ],
    "extraneous input 'tokens' expecting {'=', ';', NL}": [
        "ERROR: when parsing line 52 column 19: extraneous input 'tokens' expecting {'=', ';', NL}\n"
    ],
    "mismatched input 'display' expecting {'(', NL}": [
        "ERROR: when parsing line 56 column 12: mismatched input 'display' expecting {'(', NL}\n"
    ],
    "mismatched input ';' expecting '('": [
        "ERROR: when parsing line 73 column 37: mismatched input ';' expecting '('\n"
    ],
    "mismatched input 'never' expecting {'=', ';', NL}": [
        "ERROR: when parsing line 75 column 13: mismatched input 'never' expecting {'=', ';', NL}\n"
    ],
    "mismatched input 'assert' expecting {'=', ';', NL}": [
        "ERROR: when parsing line 76 column 4: mismatched input 'assert' expecting {'=', ';', NL}\n"
    ],
    "mismatched input 'is' expecting {'=', ';', NL}": [
        "ERROR: when parsing line 128 column 17: mismatched input 'is' expecting {'=', ';', NL}\n"
    ],
    "no viable alternative at input 'to0x0'": [
        "ERROR: when parsing line 160 column 3: no viable alternative at input 'to0x0'\n"
    ],
    "mismatched input 'address' expecting {';', NL}": [
        "ERROR: when parsing line 160 column 7: mismatched input 'address' expecting {';', NL}\n"
    ],
    "mismatched input 'burn' expecting {';', NL}": [
        "ERROR: when parsing line 160 column 20: mismatched input 'burn' expecting {';', NL}\n"
    ],
    "extraneous input 'instead' expecting {';', NL}": [
        "ERROR: when parsing line 160 column 27: extraneous input 'instead' expecting {';', NL}\n"
    ],
    "extraneous input 'enough' expecting {'=', ';', NL}": [
        "ERROR: when parsing line 162 column 11: extraneous input 'enough' expecting {'=', ';', NL}\n"
    ]
}