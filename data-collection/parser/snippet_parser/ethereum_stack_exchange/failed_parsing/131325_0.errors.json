{
    "extraneous input '<' expecting {<EOF>, 'pragma', '~', 'import', 'from', '{', '}', 'abstract', 'contract', 'interface', 'library', '(', 'error', 'using', 'for', 'struct', 'modifier', 'function', 'event', 'enum', '[', 'address', 'mapping', 'calldata', 'if', 'else', 'try', 'while', 'unchecked', 'assembly', 'do', 'return', 'throw', 'emit', 'revert', 'var', 'bool', 'string', 'byte', '++', '--', 'new', '+', '-', 'after', 'delete', '!', 'callback', Int, Uint, Byte, Fixed, Ufixed, BooleanLiteral, DecimalNumber, HexNumber, HexLiteralFragment, 'break', 'continue', 'leave', 'payable', 'type', 'constructor', 'fallback', 'receive', Identifier, StringLiteralFragment}": [
        "ERROR: when parsing line 5 column 38: extraneous input '<' expecting {<EOF>, 'pragma', '~', 'import', 'from', '{', '}', 'abstract', 'contract', 'interface', 'library', '(', 'error', 'using', 'for', 'struct', 'modifier', 'function', 'event', 'enum', '[', 'address', 'mapping', 'calldata', 'if', 'else', 'try', 'while', 'unchecked', 'assembly', 'do', 'return', 'throw', 'emit', 'revert', 'var', 'bool', 'string', 'byte', '++', '--', 'new', '+', '-', 'after', 'delete', '!', 'callback', Int, Uint, Byte, Fixed, Ufixed, BooleanLiteral, DecimalNumber, HexNumber, HexLiteralFragment, 'break', 'continue', 'leave', 'payable', 'type', 'constructor', 'fallback', 'receive', Identifier, StringLiteralFragment}\n",
        "ERROR: when parsing line 9 column 35: extraneous input '<' expecting {<EOF>, 'pragma', '~', 'import', 'from', '{', '}', 'abstract', 'contract', 'interface', 'library', '(', 'error', 'using', 'for', 'struct', 'modifier', 'function', 'event', 'enum', '[', 'address', 'mapping', 'calldata', 'if', 'else', 'try', 'while', 'unchecked', 'assembly', 'do', 'return', 'throw', 'emit', 'revert', 'var', 'bool', 'string', 'byte', '++', '--', 'new', '+', '-', 'after', 'delete', '!', 'callback', Int, Uint, Byte, Fixed, Ufixed, BooleanLiteral, DecimalNumber, HexNumber, HexLiteralFragment, 'break', 'continue', 'leave', 'payable', 'type', 'constructor', 'fallback', 'receive', Identifier, StringLiteralFragment}\n"
    ],
    "no viable alternative at input '(Undeclaredidentifier'": [
        "ERROR: when parsing line 5 column 53: no viable alternative at input '(Undeclaredidentifier'\n",
        "ERROR: when parsing line 9 column 50: no viable alternative at input '(Undeclaredidentifier'\n"
    ],
    "mismatched input '.' expecting ')'": [
        "ERROR: when parsing line 5 column 63: mismatched input '.' expecting ')'\n",
        "ERROR: when parsing line 9 column 60: mismatched input '.' expecting ')'\n"
    ],
    "mismatched input 'is' expecting {';', NL}": [
        "ERROR: when parsing line 5 column 81: mismatched input 'is' expecting {';', NL}\n",
        "ERROR: when parsing line 9 column 75: mismatched input 'is' expecting {';', NL}\n"
    ],
    "mismatched input '(' expecting {';', NL}": [
        "ERROR: when parsing line 5 column 88: mismatched input '(' expecting {';', NL}\n",
        "ERROR: when parsing line 9 column 82: mismatched input '(' expecting {';', NL}\n"
    ],
    "extraneous input 'yet' expecting ')'": [
        "ERROR: when parsing line 5 column 96: extraneous input 'yet' expecting ')'\n",
        "ERROR: when parsing line 9 column 90: extraneous input 'yet' expecting ')'\n"
    ],
    "mismatched input 'visible' expecting {'=', ';', NL}": [
        "ERROR: when parsing line 5 column 101: mismatched input 'visible' expecting {'=', ';', NL}\n",
        "ERROR: when parsing line 9 column 95: mismatched input 'visible' expecting {'=', ';', NL}\n"
    ],
    "mismatched input 'this' expecting {'=', ';', NL}": [
        "ERROR: when parsing line 5 column 112: mismatched input 'this' expecting {'=', ';', NL}\n",
        "ERROR: when parsing line 9 column 106: mismatched input 'this' expecting {'=', ';', NL}\n"
    ],
    "mismatched input '.' expecting {'=', ';', NL}": [
        "ERROR: when parsing line 5 column 122: mismatched input '.' expecting {'=', ';', NL}\n",
        "ERROR: when parsing line 9 column 116: mismatched input '.' expecting {'=', ';', NL}\n"
    ]
}