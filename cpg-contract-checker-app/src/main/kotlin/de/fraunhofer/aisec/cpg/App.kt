/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package de.fraunhofer.aisec.cpg;

import de.fraunhofer.aisec.cpg.frontends.solidity.EOGExtensionPass
import de.fraunhofer.aisec.cpg.frontends.solidity.SolidityLanguageFrontend
import de.fraunhofer.aisec.cpg.graph.Node
import de.fraunhofer.aisec.cpg.helpers.Benchmark
import de.fraunhofer.aisec.cpg.passes.EvaluationOrderGraphPass
import org.neo4j.configuration.GraphDatabaseSettings.DEFAULT_DATABASE_NAME
import org.neo4j.dbms.api.DatabaseManagementService
import org.neo4j.dbms.api.DatabaseManagementServiceBuilder
import org.neo4j.graphdb.GraphDatabaseService
import org.neo4j.ogm.config.Configuration
import org.neo4j.ogm.session.SessionFactory
import org.slf4j.LoggerFactory
import picocli.CommandLine
import java.io.File
import java.nio.file.Path


class App{

    private val logger = LoggerFactory.getLogger(App::class.java)

    @CommandLine.Option(names = ["--neo4j-password"], description = ["The Neo4j password"])
    var neo4jPassword: String = "password"

    companion object {
        val log = LoggerFactory.getLogger(App::class.java)
    }

    fun start() {
        val tr: TranslationResult= getGraph()

        persistGraph(tr)

        runVulnerabilityChecks()
    }

    fun getGraph() : TranslationResult{
        val basePath = "/home/kweiss/solsnip"
        val base = "base"
        val modgrammar = "modgrammar"
        var path = basePath + "/" + base
        path = "cpg-solidity/src/test/resources/examples/Modifiers.sol"
        val config =
            TranslationConfiguration.builder()
                .topLevel(File(path))
                .sourceLocations(File(path))
                .defaultPasses()
                .registerLanguage(
                    SolidityLanguageFrontend::class.java,
                    SolidityLanguageFrontend.SOLIDITY_EXTENSIONS
                )
                .registerPass(EOGExtensionPass())
                .debugParser(true)
                .processAnnotations(true)
                .build()

        val oldEOGIndex = config.registeredPasses.indexOfFirst {  it is EvaluationOrderGraphPass}
        val newEOGIndex = config.registeredPasses.indexOfFirst {  it is EOGExtensionPass}

        config.registeredPasses[oldEOGIndex ] = config.registeredPasses[ newEOGIndex ]
        config.registeredPasses.removeAt(newEOGIndex)

        val analyzer = TranslationManager.builder().config(config).build()
        val o = analyzer.analyze()
        return o.get()
    }

    fun persistGraph(result: TranslationResult){
        val configuration =
            Configuration.Builder()
                .uri("bolt://localhost")
                .autoIndex("none")
                .credentials("neo4j", neo4jPassword)
                .build()

        val sessionFactory =
            SessionFactory(configuration, "de.fraunhofer.aisec.cpg.graph", "de.fraunhofer.aisec.cpg.frontends.solidity")
        val session = sessionFactory.openSession()

        session.beginTransaction().use { transaction ->
            session.purgeDatabase()

            val b = Benchmark(App::class.java, "Saving nodes to database")
            /*result.translationUnits.forEach {
                println("Saving file:" + it.name)
                session.save(it)
            }*/

            val nodes = mutableListOf<Node>()
            nodes.addAll(result.additionalNodes)
            nodes.addAll(result.translationUnits)

            session.save(result.translationUnits)
            result.translationUnits.forEach {
                log.info(it.name)
                session.save(it)
                                                                                                                                                                                                                                                                                                                                                                                        }

            b.stop()

            transaction.commit()
        }

        session.clear()
        sessionFactory.close()
    }
}

fun runVulnerabilityChecks(){
    val managementService: DatabaseManagementService = DatabaseManagementServiceBuilder( Path.of( "neo4j" ) ).build();
    val db: GraphDatabaseService = managementService.database( DEFAULT_DATABASE_NAME );


    var rows = ""

    db.beginTx().use { tx ->
        tx.execute("MATCH (n) RETURN n, n.name").use { result ->
            while (result.hasNext()) {
                val row: Map<String, Any> = result.next()
                for ((key, value) in row) {
                    rows += "$key: $value; "
                }
                rows += "\n"
            }
        }
    }
    println("Results: " + rows)
}

fun main() {
    val app = App()
    app.start()
    System.exit(0)
}

val TranslationResult.additionalNodes: MutableList<Node>
    get() =
        this.scratch.computeIfAbsent("additionalNodes") { mutableListOf<Node>() } as
                MutableList<Node>


operator fun TranslationResult.plusAssign(node: Node) {
    if(!this.additionalNodes.contains(node))
        this.additionalNodes += node
}
