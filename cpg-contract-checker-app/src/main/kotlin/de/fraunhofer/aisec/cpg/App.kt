/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package de.fraunhofer.aisec.cpg;

import de.fraunhofer.aisec.cpg.checks.*
import de.fraunhofer.aisec.cpg.frontends.solidity.DFGExtensionPass
import de.fraunhofer.aisec.cpg.frontends.solidity.EOGExtensionPass
import de.fraunhofer.aisec.cpg.frontends.solidity.GraphExtensionsPass
import de.fraunhofer.aisec.cpg.frontends.solidity.SolidityLanguageFrontend
import de.fraunhofer.aisec.cpg.graph.Node
import de.fraunhofer.aisec.cpg.helpers.Benchmark
import de.fraunhofer.aisec.cpg.helpers.SubgraphWalker
import de.fraunhofer.aisec.cpg.passes.EvaluationOrderGraphPass
import org.neo4j.driver.AuthTokens
import org.neo4j.driver.GraphDatabase
import org.neo4j.driver.Transaction
import org.neo4j.ogm.config.Configuration
import org.neo4j.ogm.session.SessionFactory
import org.slf4j.Logger
import org.slf4j.LoggerFactory
import picocli.CommandLine
import java.io.File
import java.nio.file.Files
import java.nio.file.Path
import java.nio.file.Paths
import java.util.concurrent.Callable
import java.util.stream.Collectors
import kotlin.io.path.isDirectory
import kotlin.system.exitProcess
import kotlin.system.measureTimeMillis


class App : Callable<Int> {

    private val logger = LoggerFactory.getLogger(App::class.java)

    private val compDurations: MutableMap<String, Long> = mutableMapOf()


    @CommandLine.Parameters(
        arity = "0..*",
        description =
        ["The files to analyze."]
    )
    var files: List<String> = mutableListOf()

    @CommandLine.Option(names = ["--neo4j-password"], description = ["The Neo4j password"])
    var neo4jPassword: String = "password"
    var checks: MutableList<Check> = mutableListOf()

    var findings: MutableMap<String, MutableList<String>> = mutableMapOf()



    private val log: Logger
        get() = LoggerFactory.getLogger(App::class.java)

    override fun call(): Int {
        registerChecks()
        var nr_checked_files = 0
        if(files.isEmpty()){
            files = files.flatMap { getAllSolFiles(it) }
            // files = listOf<Path>(Path.of(base + "/" + "66617876_2.sol"))
            // files = listOf<Path>(Path.of("/home/kweiss/coding/cpg-contract-checker/cpg-solidity/src/test/resources/examples/" + "SelfDestruct.sol"))
        }
        for(path in files){
            println(path)
            val start = System.currentTimeMillis()
            val tr= getGraph(path)
            var duration = System.currentTimeMillis() - start
            compDurations["Graph translation"] = compDurations["Graph translation"]?:0 + duration
            tr.translationUnits.forEach {
                if(SubgraphWalker.flattenAST(it).size <= 4){
                    if(!findings.containsKey("Empty translation")){
                        findings["Empty translation"] = mutableListOf()
                    }
                    findings["Empty translation"]!!.add(it.name)
                }
            }
            duration = measureTimeMillis {
                persistGraph(tr)
            }
            compDurations["Persisting graph"] = compDurations["Persisting graph"]?:0 + duration
            println("Running checks")
            duration = measureTimeMillis {
                runVulnerabilityChecks(path)
            }
            compDurations["All checks"] = compDurations["All checks"]?:0 + duration
            nr_checked_files++
            println("Nr. Files: " + nr_checked_files)
        }
        findings.forEach { (k,v) ->
            println("File: " + k)
            v.forEach { e ->
                println("- " + e)
            }
        }
        var durationsString = ""
        compDurations.forEach {(k,v) ->
            durationsString += k + ": " + v + " ms, "
        }
        print(durationsString.dropLast(2) + "\n")
        return 0
    }

    fun getAllSolFiles(path: String): MutableList<String>{
        val path = Paths.get(path)
        return Files.walk(path)
            .filter { item -> Files.isRegularFile(item) }.map{it.toString()}
            .filter { item -> item.endsWith(".sol") }.collect(Collectors.toList())
    }

    fun getGraph(filename: String) : TranslationResult{
        var path = filename
        val config =
            TranslationConfiguration.builder()
                .topLevel(File(path))
                .sourceLocations(File(path))
                .defaultPasses()
                .registerLanguage(
                    SolidityLanguageFrontend::class.java,
                    SolidityLanguageFrontend.SOLIDITY_EXTENSIONS
                )
                .registerPass(EOGExtensionPass())
                .registerPass(DFGExtensionPass())
                .registerPass(GraphExtensionsPass())
                .debugParser(true)
                .processAnnotations(true)
                .build()

        val oldEOGIndex = config.registeredPasses.indexOfFirst {  it is EvaluationOrderGraphPass}
        val newEOGIndex = config.registeredPasses.indexOfFirst {  it is EOGExtensionPass}

        config.registeredPasses[oldEOGIndex ] = config.registeredPasses[ newEOGIndex ]
        config.registeredPasses.removeAt(newEOGIndex)

        val analyzer = TranslationManager.builder().config(config).build()
        val o = analyzer.analyze()
        return o.get()
    }

    fun registerChecks(){
        checks.add(OverUnderflowCheck())
        checks.add(AddressPaddingCheck())
        checks.add(AccessControlSelfdestructCheck())
        checks.add(CallReturnCheck())
        checks.add(AccessControlLogicCheck())
        checks.add(ReentrancyCheck())
        checks.add(DefaultProxyDelegateCheck())
        checks.add(TXOriginCheck())
    }

    fun persistGraph(result: TranslationResult){
        val configuration =
            Configuration.Builder()
                .uri("bolt://localhost")
                .autoIndex("none")
                .credentials("neo4j", neo4jPassword)
                .build()

        val sessionFactory =
            SessionFactory(configuration, "de.fraunhofer.aisec.cpg.graph", "de.fraunhofer.aisec.cpg.frontends.solidity")
        val session = sessionFactory.openSession()

        session.beginTransaction().use { transaction ->
            session.purgeDatabase()

            val b = Benchmark(App::class.java, "Saving nodes to database")
            result.translationUnits.forEach {
                println("Saving file:" + it.name)
                session.save(it)
            }

            val nodes = mutableListOf<Node>()
            nodes.addAll(result.additionalNodes)
            nodes.addAll(result.translationUnits)

            session.save(result.translationUnits)
            result.translationUnits.forEach {
                log.info(it.name)
                session.save(it)
                                                                                                                                                                                                                                                                                                                                                                                        }

            b.stop()

            transaction.commit()
        }

        session.clear()
        sessionFactory.close()
    }

    fun runVulnerabilityChecks(filename: String){
        GraphDatabase.driver("bolt://localhost:7687", AuthTokens.basic("neo4j", neo4jPassword)).use { driver ->
            driver.session().use { session ->
                session.readTransaction() { t: Transaction ->
                        for (check in checks) {
                            val duration = measureTimeMillis {
                                var checkFindings = check.check(t)
                                if (checkFindings.isNotEmpty()) {
                                    if (findings[filename] == null) {
                                        findings.put(filename, mutableListOf())
                                    }
                                    checkFindings.forEach {
                                        findings[filename]!!.add(
                                            check.getVulnerabilityName() + ", "
                                                    + it.artifactLocation.toString().substringAfter("file:") + " "
                                                    + it.region.toString()
                                        )
                                    }
                                }
                            }
                            compDurations[check.javaClass.simpleName] = duration
                            println(check.javaClass.simpleName + " took " + duration + " ms")
                        }
                }
            }
        }
    }
}

/**
 * Starts a command line application of the cpg-solidity tool.
 */
fun main(args: Array<String>) {
    val exitCode = CommandLine(App()).execute(*args)
    exitProcess(exitCode)
}

val TranslationResult.additionalNodes: MutableList<Node>
    get() =
        this.scratch.computeIfAbsent("additionalNodes") { mutableListOf<Node>() } as
                MutableList<Node>


operator fun TranslationResult.plusAssign(node: Node) {
    if(!this.additionalNodes.contains(node))
        this.additionalNodes += node
}
