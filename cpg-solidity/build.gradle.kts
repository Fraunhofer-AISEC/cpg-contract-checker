import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    java
    `java-library`
    antlr
    kotlin("jvm") version "1.9.0"
    id("com.diffplug.spotless") version "6.25.0"
}

repositories {
    mavenCentral()

    maven { setUrl("https://jitpack.io") }

    ivy {
        setUrl("https://download.eclipse.org/tools/cdt/releases/11.0/cdt-11.0.0/plugins")
        metadataSources {
            artifact()
        }
        patternLayout {
            artifact("/[organisation].[module]_[revision].[ext]")
        }
    }
}

val versions = mapOf(
    "cpg" to "7.1.0",
    "junit5" to "5.8.2",
    "neo4j" to "4.0.2"
)

dependencies {
    api("de.fraunhofer.aisec", "cpg-core", versions["cpg"])
    antlr("org.antlr:antlr4:4.5")


    // neo4j
    api("org.neo4j", "neo4j", versions["neo4j"])
    api("org.neo4j", "neo4j-ogm-core", versions["neo4j"])
    api("org.neo4j", "neo4j-ogm", versions["neo4j"])
    api("org.neo4j", "neo4j-ogm-bolt-driver", versions["neo4j"])

    // logging
    api("org.slf4j:jul-to-slf4j:2.0.7")
    api("org.slf4j:slf4j-api:2.0.7")
    implementation("org.apache.logging.log4j:log4j-slf4j2-impl:2.20.0")

    // testing
    testImplementation(kotlin("test"))
    testImplementation("org.junit.jupiter", "junit-jupiter-api", versions["junit5"])
    testImplementation("org.junit.jupiter", "junit-jupiter-params", versions["junit5"])
    testRuntimeOnly("org.junit.jupiter", "junit-jupiter-engine", versions["junit5"])

}


java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(17))
    }
}


tasks.withType<org.jetbrains.kotlin.gradle.tasks.KotlinCompile> {
    dependsOn("generateGrammarSource")
}

// state that JSON schema parser must run before compiling Kotlin
tasks.withType<KotlinCompile> {
    dependsOn("spotlessApply")
}

tasks.compileTestKotlin {
    dependsOn("generateTestGrammarSource")
}

tasks.test {
    useJUnitPlatform()
}

val headerWithStars = """/*
 * Copyright (c) 2024, Fraunhofer AISEC. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * ╔═╗╔═╗╔═╗   ╔═╗┌─┐┌┐┌┌┬┐┬─┐┌─┐┌─┐┌┬┐  ╔═╗┬ ┬┌─┐┌─┐┬┌─┌─┐┬─┐
 * ║  ╠═╝║ ╦───║  │ ││││ │ ├┬┘├─┤│   │───║  ├─┤├┤ │  ├┴┐├┤ ├┬┘
 * ╚═╝╩  ╚═╝   ╚═╝└─┘┘└┘ ┴ ┴└─┴ ┴└─┘ ┴   ╚═╝┴ ┴└─┘└─┘┴ ┴└─┘┴└─
 *
 */
"""

spotless {
    kotlin {
        ktfmt().kotlinlangStyle()
        licenseHeader(headerWithStars).yearSeparator(" - ")
    }

}
